<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[平常心]]></title>
  <subtitle><![CDATA[独立之精神, 自由之思想！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sphenginx.github.io/"/>
  <updated>2015-11-28T01:43:20.805Z</updated>
  <id>http://sphenginx.github.io/</id>
  
  <author>
    <name><![CDATA[Sphenginx Cui]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[健身]]></title>
    <link href="http://sphenginx.github.io/2015/06/29/%E5%81%A5%E8%BA%AB/"/>
    <id>http://sphenginx.github.io/2015/06/29/健身/</id>
    <published>2015-06-29T12:03:01.000Z</published>
    <updated>2015-11-28T01:43:20.805Z</updated>
    <content type="html"><![CDATA[<p>今天晚上在体育街打乒乓球，偶遇一退休乒乓球教练，他在看到洒家打球的时候，一针见血的指出了我的陋习，他说：因地球引力的存在，地球上的一切运动都是抛物线型的，在运动的时候身体的重心要放低，像扎马步那样最好，球拍和桌沿平行，击球时，运用肘部的力量，快速直线摆动小臂，球拍从腰部快速摆到鼻子部分，给球一个向上向前的力，不要做多余的动作，尤其是动腿的陋习必须改掉。</p>
<p>洒家对老爷爷的说法深以为然，其实运动大道理是相通的，都是重心放低，做好扎马步的姿势，这样可以快速的进行身体姿势的变换，以应对即将到来的变化。运动时要运用相关关节的力量，快速带动关节相关身体部位向上前方向击出，不要做多余的动作。（陋习:打球时完全不需要动脚…… 囧）</p>
<p>为了改变运动陋习，特作此文，已备翻阅。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天晚上在体育街打乒乓球，偶遇一退休乒乓球教练，他在看到洒家打球的时候，一针见血的指出了我的陋习，他说：因地球引力的存在，地球上的一切运动都是抛物线型的，在运动的时候身体的重心要放低，像扎马步那样最好，球拍和桌沿平行，击球时，运用肘部的力量，快速直线摆动小臂，球拍从腰部快速]]>
    </summary>
    
      <category term="健身" scheme="http://sphenginx.github.io/tags/%E5%81%A5%E8%BA%AB/"/>
    
      <category term="人生百态" scheme="http://sphenginx.github.io/categories/%E4%BA%BA%E7%94%9F%E7%99%BE%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[API漫谈]]></title>
    <link href="http://sphenginx.github.io/2015/06/01/API%E6%BC%AB%E8%B0%88/"/>
    <id>http://sphenginx.github.io/2015/06/01/API漫谈/</id>
    <published>2015-06-01T01:27:40.000Z</published>
    <updated>2015-11-28T01:45:58.790Z</updated>
    <content type="html"><![CDATA[<p><strong>前言</strong><br>如何保证API的client来源是真实的，对于API的认证很重要,平时都是按别人的文档和别人通讯也没想过这事，一想还蛮有趣的，下面就让我们来一步步规划一个接口认证的吧。</p>
<p><strong>信息匹对</strong></p>
<p>认证不就是登陆么，用户给我发个身份和密码，我一匹对，正确，通过不久可以了么？</p>
<ul>
<li><p>方法<br>  用户发一个 user_id 和 user_key 过来，我们接收后匹对看是否存在。</p>
</li>
<li><p>不足<br>  接口通过HTTP通讯，中间一旦被人窃听，以后就可以拿 user_id 和 user_key 给我们发请求，而我们无法分辨出到底是谁才是真的齐天大圣。看来，不可以把 user_key 这样子发送。</p>
<p>  就算认证是可靠的，黑客还是可以拦截住请求，对认证部分不修改但把参数修改了，然后让请求继续发送。例如把你准备给哈利文转账，但是请求在中间被拦截修改后，变成给变色龙转了。</p>
</li>
</ul>
<p><strong>哈希</strong><br>我们密码存储的时候不是经常md5哈希后保存么，那么我们把 user_key 也哈希一下吧，嗯，正愁不知道拿user_key和谁哈希好，既然说参数会被替换，那么，我们拿 user_key 和 请求参数哈希后的字符串作为 auth_token 传输，而不发送 user_key不就可以了。这样参数也成为认证的一部分，就不会被替换掉了。</p>
<ul>
<li><p>做法<br>  把参数按某个规则排好序后，连接成字符串，然后和 user_key 哈希后作为 auth_token，发送。接受端接到请求后，把参数排序后和 user_key 哈希后的字符串和 auth_token 比较。</p>
</li>
<li><p>不足<br>  当参数很少，而 user_key 不复杂的情况下， auto_token 有被碰撞出 user_key的可能</p>
</li>
</ul>
<p><strong>加强版哈希</strong><br>表示，这种情况对我们这种平时存密码都要多次哈希的孩子来说毫无鸭梨啊，我们可以分别对参数字符串哈希后取一定位数，然后把 user_key 哈希后取一定位数，再把两者连起来哈希作为 auth_token</p>
<ul>
<li><p>请求非法 ！<br>  什么转了9999次款？黑客大叔表示无法对我们请求下手了，不过他借你某次给他转款的时候拦截到了你的请求，然后不停的伪造一样的请求… 我们可以增加一些策略，防止这种请求重放，例如：在参数里面添加时间戳，最好精确到毫秒，然后把时间戳、user_id和接口方法作为唯一值检验，相同的值只能一次有效。</p>
</li>
<li><p>不足<br>  目前为止，我们能确保请求时持有user_key的user_id发出的，而且不会被修改，不会被重放，user_key也不会暴露，一切都很美好。但是我们的信息是明文的，会照成信息泄露。</p>
</li>
</ul>
<p><strong>加密</strong></p>
<ul>
<li><p>可以把内容加密起来传输</p>
</li>
<li><p>方法<br>  HTTPS<br>  RSA<br>  利用user_key对整个请求的内容进行异或后重新编码之类的加密</p>
</li>
<li><p>不足<br>  成本高，操作麻烦，目前普通接口通讯一般不会有到这一步的处理。</p>
</li>
<li><p>这是双向的<br>  认证是接口双方都需要做的，不止指用户发给平台，还要包括用户接到平台应答后也应该进行相同的验证</p>
</li>
</ul>
<p><strong>其他手段</strong>  </p>
<blockquote>
<p>   ip地址认证<br>    请求有效时间  </p>
</blockquote>
<p><strong>总之</strong> </p>
<blockquote>
<p>   来源正确，身份正确，内容正确，请求正确，信息安全</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>前言</strong><br>如何保证API的client来源是真实的，对于API的认证很重要,平时都是按别人的文档和别人通讯也没想过这事，一想还蛮有趣的，下面就让我们来一步步规划一个接口认证的吧。</p>
<p><strong>信息匹对</strong><]]>
    </summary>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="request" scheme="http://sphenginx.github.io/tags/request/"/>
    
      <category term="日新月异" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E6%96%B0%E6%9C%88%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式]]></title>
    <link href="http://sphenginx.github.io/2015/06/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://sphenginx.github.io/2015/06/01/设计模式/</id>
    <published>2015-06-01T01:27:40.000Z</published>
    <updated>2015-11-28T01:32:06.599Z</updated>
    <content type="html"><![CDATA[<p>##设计模式</p>
<p><a href="http://baike.baidu.com/view/66964.htm" target="_blank" rel="external">设计模式</a>（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。</p>
<p>##设计框架</p>
<p>可复用面向对象软件系统一般划分为两大类：应用程序工具箱和框架（Framework），我们平时开发的具体软件都是应用程序，Java的API属于工具箱；而框架是构成一类特定软件可复用设计的一组相互协作的类，EJB（EnterpriseJavaBeans）是Java应用于企业计算的框架。<br>框架通常定义了应用体系的整体结构类和对象的关系等等设计参数，以便于具体应用实现者能集中精力于应用本身的特定细节。框架主要记录软件应用中共同的设计决策，框架强调设计复用，因此框架设计中必然要使用设计模式。<br>另外，设计模式有助于对框架结构的理解，成熟的框架通常使用了多种设计模式,如果你熟悉这些设计模式，毫无疑问，你将迅速掌握框架的结构，我们一般开发者如果突然接触EJB、Spring等框架，会觉得特别难学、难掌握，那么转而先掌握设计模式，无疑是给了你剖析EJB或J2EE系统的一把利器。  </p>
<p>##设计原则</p>
<p>为什么要提倡“Design Pattern呢？根本原因是为了代码复用，增加可维护性。那么怎么才能实现代码复用呢？面向对象有几个原则：<br><a href="http://baike.baidu.com/view/866233.htm" target="_blank" rel="external">开闭原则</a>（Open Closed Principle，OCP）、<br><a href="http://baike.baidu.com/view/1638361.htm" target="_blank" rel="external">里氏代换原则</a>（Liskov Substitution Principle，LSP）、<br><a href="http://baike.baidu.com/view/2503920.htm" target="_blank" rel="external">依赖倒转原则</a>（Dependency Inversion Principle，DIP）、<br><a href="http://baike.baidu.com/view/1638378.htm" target="_blank" rel="external">接口隔离原则</a>（Interface Segregation Principle，ISP）、<br>合成/聚合复用原则（Composite/Aggregate Reuse Principle，CARP）、<br>最小知识原则（Principle of Least Knowledge，PLK，也叫迪米特法则）。<br>开闭原则具有理想主义的色彩，它是面向对象设计的终极目标。其他几条，则可以看做是开闭原则的实现方法。<br>设计模式就是实现了这些原则，从而达到了代码复用、增加可维护性的目的。<br><a href="http://baike.baidu.com/link?url=ZjnaTAyjSCCLQTdMyoqo43iLRTIfwqlbhwgKESkZsXNwsmEn0w54Xz-HZ1EoOX4CsUcSSNHUMCLkyq7uKeuBa_" target="_blank" rel="external">高内聚、低耦合</a></p>
<p>##基本模式</p>
<p>设计模式分为三种类型，共23种。  </p>
<ul>
<li>创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。</li>
<li>结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</li>
<li>行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。</li>
</ul>
<p>按字典序排列简介如下:</p>
<ul>
<li><p>Abstract Factory（抽象工厂模式）：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。  </p>
</li>
<li><p>Adapter（适配器模式）：将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。  </p>
</li>
<li><p>Bridge（桥接模式）：将抽象部分与它的实现部分分离，使它们都可以独立地变化。  </p>
</li>
<li><p>Builder（建造者模式）：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。  </p>
</li>
<li><p>Chain of Responsibility（职责链模式）：为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。  </p>
</li>
<li><p>Command（命令模式）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</p>
</li>
<li><p>Composite（组合模式）：将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。</p>
</li>
<li><p>Decorator（装饰模式）：动态地给一个对象添加一些额外的职责。就扩展功能而言， 它比生成子类方式更为灵活。</p>
</li>
<li><p>Facade（外观模式）：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
</li>
<li><p>Factory Method（工厂模式）：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。Factory Method使一个类的实例化延迟到其子类。</p>
</li>
<li><p>Flyweight（享元模式）：运用共享技术有效地支持大量细粒度的对象。</p>
</li>
<li><p>Interpreter（解析器模式）：给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。</p>
</li>
<li><p>Iterator（迭代器模式）：提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</p>
</li>
<li><p>Mediator（中介模式）：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
</li>
<li><p>Memento（备忘录模式）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</p>
</li>
<li><p>Observer（观察者模式）：定义对象间的一种一对多的依赖关系,以便当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并自动刷新。</p>
</li>
<li><p>Prototype（原型模式）：用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</p>
</li>
<li><p>Proxy（代理模式）：为其他对象提供一个代理以控制对这个对象的访问。</p>
</li>
<li><p>Singleton（单例模式）：保证一个类仅有一个实例，并提供一个访问它的全局访问点。 单例模式是最简单的设计模式之一，但是对于Java的开发者来说，它却有很多缺陷。在九月的专栏中，David Geary探讨了单例模式以及在面对多线程（multi-threading）、类装载器（class loaders）和序列化（serialization）时如何处理这些缺陷。</p>
</li>
<li><p>State（状态模式）：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</p>
</li>
<li><p>Strategy（策略模式）：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。</p>
</li>
<li><p>Template Method（模板方法模式）：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
</li>
<li><p>Visitor（访问者模式）：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>##设计模式</p>
<p><a href="http://baike.baidu.com/view/66964.htm" target="_blank" rel="external">设计模式</a>（Design pattern）是一套被反复使用、多数人知晓的、经过分类]]>
    </summary>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="request" scheme="http://sphenginx.github.io/tags/request/"/>
    
      <category term="日新月异" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E6%96%B0%E6%9C%88%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[记一次PHP中$_REQUEST踩的坑]]></title>
    <link href="http://sphenginx.github.io/2015/01/17/%E6%9C%AA%E4%BB%98%E6%AC%BE%E5%8F%91%E8%B4%A7%E7%9A%84%E9%80%BB%E8%BE%91%E5%A4%AA%E5%9D%91%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <id>http://sphenginx.github.io/2015/01/17/未付款发货的逻辑太坑了！！！/</id>
    <published>2015-01-17T08:03:01.000Z</published>
    <updated>2015-11-27T09:30:30.096Z</updated>
    <content type="html"><![CDATA[<p><strong>前记</strong></p>
<p>今天，收到一个bug fixed：用户在支付一个订单后收到N条短信提醒！</p>
<p><strong>排查</strong></p>
<p>因为支付只能在生成环境调试，于是远程连接服务器，找到有返回值的地方，记录返回值，然后开始测试，支付了N次没有发现一个有问题，于是问测试部门，怎么出现这个问题的！测试部门问了下用户，是因为未付款，但是卖家点了发货，听到此消息，我不禁一呆，坑能不能有个底限啊！这种逆天的逻辑怎么能出现呢！！！为啥这么说呢，接下来洒家给你详细分析。</p>
<p>先说下支付的逻辑：众所周知，不管是微信支付 还是 支付宝支付，都是异步进行的。也就是说用户在微信或者支付宝支付成功后，微信或者支付宝并不会第一时间把这个支付成功的消息返回给你，而是在接下来的一个小时或者更长时间内分N次给你支付成功的通知（有时候接收到第三方服务器返回success的时候还会发起多次的异步通知），所以一般业务逻辑在此处都会有一防止重复更新数据库的逻辑判断，在成功更新订单为已付款状态后，如果还收到异步通知，直接返回true。</p>
<p>但是因为未付款发货这种逆天逻辑的存在，在网速慢或者服务器访问量大的时候，用户支付成功，服务器未收到支付成功的异步通知，这时候，脑残卖家点了发货，并且成功了更新了数据库的订单状态，这时候，服务器收到支付成功的通知（在收到支付成功时的业务逻辑是更新未付款的订单），这时候去更新数据表，发现数据不存在（因为订单状态为已发货，而不是未付款），更坑的是，订单表的类型居然是MyISAM类型的，居然不是InnoDB类型的，如此事务完全不能进行，在发现未更新数据的时候不能rollback，这样造成了，之前成功返回异步通知的逻辑不能执行，造成微信或者支付宝异步通知一次，则更新一次数据库…… </p>
<p>这样的逻辑简直太坑爹了！！！以此提醒同僚们：<code>“ 程序有风险，入行需谨慎”</code> 啊！！！</p>
<p><strong>解决方案</strong></p>
<ul>
<li>更新订单表以及订单相关表为Innodb类型（MyISAM不支持事务处理）；</li>
<li>更新响应支付通知条件，只要支付方返回支付成功通知，这边就更新为已付款状态，而不关心订单状态是否是未付款；</li>
</ul>
<p>这种逻辑真的不要再出现了啊！！！</p>
<p>不说了，继续修复脏数据了……o(╯□╰)o，囧…… </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>前记</strong></p>
<p>今天，收到一个bug fixed：用户在支付一个订单后收到N条短信提醒！</p>
<p><strong>排查</strong></p>
<p>因为支付只能在生成环境调试，于是远程连接服务器，找到有返回值的地方，记录返回值]]>
    </summary>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="异步" scheme="http://sphenginx.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="支付" scheme="http://sphenginx.github.io/tags/%E6%94%AF%E4%BB%98/"/>
    
      <category term="No Zuo No Die" scheme="http://sphenginx.github.io/categories/No-Zuo-No-Die/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo]]></title>
    <link href="http://sphenginx.github.io/2015/01/17/hexo/"/>
    <id>http://sphenginx.github.io/2015/01/17/hexo/</id>
    <published>2015-01-17T08:03:01.000Z</published>
    <updated>2015-11-28T00:48:04.496Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>!  Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>!  Check <a href="http://hexo.io/docs/" target="_blank" rel="]]>
    </summary>
    
      <category term="hello world" scheme="http://sphenginx.github.io/tags/hello-world/"/>
    
      <category term="hexo" scheme="http://sphenginx.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决Unix-like、Windows系统之间文本换行符不同的问题]]></title>
    <link href="http://sphenginx.github.io/2014/12/24/CRLF%20in%20Unix-like%E3%80%81Windows%20os/"/>
    <id>http://sphenginx.github.io/2014/12/24/CRLF in Unix-like、Windows os/</id>
    <published>2014-12-24T09:02:50.000Z</published>
    <updated>2015-11-28T01:42:51.653Z</updated>
    <content type="html"><![CDATA[<p>\r是回车符,\n是换行符，各个系统的换行标志：</p>
<blockquote>
<p>   win                   用   \r\n<br>    linux/unix            用   \n<br>    Mac   OS              用   \r</p>
</blockquote>
<p>CR用符号’\r’表示, 十进制ASCII代码是13, 十六进制代码为OxOD<br>LF使用’\n’符号表示, ASCII代码是10, 十六制为0x0A<br>所以：<br>Windows下用的是OAOD，即CR&amp;LF，<br>linux/unix用的是OA，即LF<br>MacOS用的是OD，即CR</p>
<p>来历：</p>
<blockquote>
<p>   计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。<br>    于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换行”，告诉打字机把纸向下移一行。这就是“换行”和“回车”的来历，从它们的英语名字上也可以看出一二。<br>    后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。Unix 系统里，每行结尾只有“&lt;换行&gt;”，即“\n”；Windows系统里面，每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“ \r\n”；Mac系统里，每行结尾是“&lt;回车&gt;”。一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p>
</blockquote>
<p>##问题一：Windows下编写的纯文本文档在Linux下使用，例如Windows下编写的SH脚本，放到Linux下执行可能会出错。</p>
<ul>
<li><p>方法一：<br>不用系统记事本，自己下载一个Ultraedit或者Nodepad++文本编辑器，在Ultraedit下将该文件执行“File-&gt;conversions-&gt;Dos to Unix”，执行这个转化后的sh文件能够直接在linux下执行。这步操作能够就是将\r\n转换成\n。</p>
</li>
<li><p>方法二：<br>在windows下将txt文件保存为ANSI格式，然后在Linux终端输入：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ms.txt | col -b &#62; linux.txt</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>方法三：我的另一个方法<br>利用cat -v test.txt可以显示test.txt中的\r（显示为^M），然后去掉^M即可。<br>输入：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -v test.txt &#62;te.txt</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>然后cat te.txt可见行尾有^M，即\r。我们把^M去掉即可：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi te.txt</span><br></pre></td></tr></table></figure></p>
<p>在vi中输入替换命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/\^M//g</span><br></pre></td></tr></table></figure></p>
<p>再保存即可。</p>
<p>##问题二：Linux下新建的文档在Windows下用记事本打开内容会挤在一起（没有了换行符）。原因是记事本不支持\n换行（它只支持\r\n形式的换行）。</p>
<ul>
<li><p>解决方法：在Windows中使用Ultraedit或者Nodepad++文本编辑器，执行转换。</p>
</li>
<li><p>另外，有两个偏方：<br>1）在Windows中把txt后缀改成doc或者c，用Word或VC6.0来打开，然后复制到txt文件中。<br>2）在Linux下新建文本文档的时候，不要用Vim或者Gedit，用Open Office，保存成doc格式。  </p>
</li>
<li><p>打开文本文件可以用：<br>1）gedit xx.doc<br>2）vim xx.doc（vim可能不支持繁体字，如果不涉及繁体字以及古怪的符号，就可以用vim）<br>3）找到文件，直接用Open Office打开。选择字符集（系统），字符（SYSong18030）,语言（中文简体），换段落：CR&amp;LF（或者LF）。   </p>
</li>
</ul>
<p>注意：如果文件名是中文（比如vim 测试.txt），那有可能找不到，须要ls一下，然后复制文件名，然后再gedit 粘贴文件名。   </p>
<ol>
<li>CR&amp;LF，即\r\n，这是Windows下记事本的格式，Linux是完全支持的；（推荐）   </li>
<li>CR，即\r，记事本不支持，没有换行效果，也没有\r效果；Word下有换行效果，也有\r；   </li>
<li>LF，即\n，linux/unix系统下的换行符。（shell脚本就需要这个格式）   </li>
</ol>
<p>PS：<br>    \r效果是：在每一行的末尾，默认的光标定位是下一行的行首，也就是说在行尾输入的内容实际上是下一行的行首，\r才是真正的换行，而\n是回车，原本指打字机的纸张往下移动一位，后来在Unix-like系统下，\n成为了实际上的换行符。\r和\n的区别看下面的例子就知道了：<br>    \n和\r在C语言中的用法：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"938517\r10086\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>无论是Linux系统还是Windows平台，输出均是<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10086</span><br></pre></td></tr></table></figure></p>
<p>因为\r已经换行了，所以938517就不再显示了。而\n并不是真正意义上的换行，它实际上是把纸张（或屏幕）向下移动一位（以便显示下一行的内容）。</p>
<p>##问题三：Windows下编写的doc文档，在Linux下查看（用Open Office）一般都会乱码。   </p>
<ul>
<li>解决方法：先用Open Office打开，然后再全选，把字体设置为SYSong18030，OK中文简体和繁体都显示正常了。    </li>
</ul>
<p>##问题四：在不同平台间使用FTP软件传送文件时, 在ascii文本模式传输模式下, 一些FTP客户端程序会自动对换行格式进行转换，经过这种传输的文件字节数可能会发生变化。   </p>
<ul>
<li>解决方法：如果你不想ftp修改原文件, 可以使用bin模式(二进制模式)传输文本。   </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>\r是回车符,\n是换行符，各个系统的换行标志：</p>
<blockquote>
<p>   win                   用   \r\n<br>    linux/unix            用   \n<br>    Mac   OS       ]]>
    </summary>
    
      <category term="jquery" scheme="http://sphenginx.github.io/tags/jquery/"/>
    
      <category term="日新月异" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E6%96%B0%E6%9C%88%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery中each如何跳出循环并终止后续代码执行？]]></title>
    <link href="http://sphenginx.github.io/2014/12/24/jQuery%E4%B8%ADeach%E5%A6%82%E4%BD%95%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E5%B9%B6%E7%BB%88%E6%AD%A2%E5%90%8E%E7%BB%AD%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%EF%BC%9F/"/>
    <id>http://sphenginx.github.io/2014/12/24/jQuery中each如何跳出循环并终止后续代码执行？/</id>
    <published>2014-12-24T09:02:50.000Z</published>
    <updated>2015-11-28T01:24:03.488Z</updated>
    <content type="html"><![CDATA[<p><strong>前记</strong></p>
<p>今天在表单提交验证的时候，需要检测商品是否有规格，因为商品有多个规格，所以用到了jquery的each，循环读取每个规格，如果值为空，则return false；但是，后来发现return false 表单还是提交了，百思不得其解。</p>
<p><strong>排查</strong></p>
<p>后来查看manual才发现：<code>jquery的each函数中，return false只能提前终止循环，相当于break；return true相当于 continue。</code></p>
<p><strong>解决</strong></p>
<p>那么，如何才能阻止表单的提交呢，想了N久，想到在each循环前，先定义一个变量为true，然后在循环读取规格的时候，如果值为空，则把变量定义为false，同时return false，代码如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#20986;&#29616;bug&#30340;&#20195;&#30721;&#10;$(&#34;.spec&#34;).each(function()&#123;&#10;    var s =$(this).val();&#10;    if(!s)&#123;&#10;        alert(&#39;&#35268;&#26684;&#19981;&#33021;&#20026;&#31354;&#39;);&#10;        return false;&#10;    &#125;&#10;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这样return false，只是终止循环，并没有终止程序。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#26356;&#26032;&#21518;&#30340;&#20195;&#30721;&#10;var real_true = true;&#10;$(&#34;.spec&#34;).each(function()&#123;&#10;    var s =$(this).val();&#10;    if(!s)&#123;&#10;&#9; alert(&#39;&#35268;&#26684;&#19981;&#33021;&#20026;&#31354;&#39;);&#10;&#9;  real_true = false;&#10;         return false;&#10;    &#125;&#10;&#125;)&#10;if(!real_true)&#123;&#10;    return false;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>暂时想到了这个方法，如果大家有更好的方法，欢迎一起探讨~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>前记</strong></p>
<p>今天在表单提交验证的时候，需要检测商品是否有规格，因为商品有多个规格，所以用到了jquery的each，循环读取每个规格，如果值为空，则return false；但是，后来发现return false 表单还是提交了，百]]>
    </summary>
    
      <category term="jquery" scheme="http://sphenginx.github.io/tags/jquery/"/>
    
      <category term="日新月异" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E6%96%B0%E6%9C%88%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[记一次PHP中$_REQUEST踩的坑]]></title>
    <link href="http://sphenginx.github.io/2014/11/27/%E8%AE%B0%E4%B8%80%E6%AC%A1PHP%E4%B8%AD$_REQUEST%E8%B8%A9%E7%9A%84%E5%9D%91/"/>
    <id>http://sphenginx.github.io/2014/11/27/记一次PHP中$_REQUEST踩的坑/</id>
    <published>2014-11-27T01:27:40.000Z</published>
    <updated>2015-11-27T09:37:45.823Z</updated>
    <content type="html"><![CDATA[<p><strong>前记</strong></p>
<p>今天测试返回一个API调用接口不对的bug，查看API发现变量是通过$_REQUEST来获取参数的，难道获取方法有问题？</p>
<p><strong>排查</strong></p>
<p>既然有了怀疑，那么我们来打印下变量吧，通过实验发现：<br> <strong>$_REQUEST获取的参数 和URL中的不一致</strong>，<br>为啥会不一致呢，请教了下Google大神，查看<code>ini</code>的设置，发现<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ variables_order = &#34;EGPCS&#34;;</span><br></pre></td></tr></table></figure></p>
<p>打印EGPCS时发现cookie 和 get中有相同的变量，原来是cookie中的参数覆盖了get中的参数，囧~ </p>
<blockquote>
<p>（腹诽：cookie中应该加个前缀啥的吧……）：</p>
</blockquote>
<p><strong>结论</strong></p>
<p>php版本&lt; 5.3时 会 根据variables_order的设置读取参数；</p>
<p>PHP版本 &gt; 5.3时 会根据request_order的设置读取参数；</p>
<p>PHP version &lt; 5.3时默认读取顺序为：<strong>E G P C S</strong>，即 ：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ variables_order = &#34;EGPCS&#34;;</span><br></pre></td></tr></table></figure></p>
<p>variables_order 系统在定义PHP预定义变量，EGPCS 是 <code>Environment, Get, Post, Cookie, and Server</code> 的简写。 </p>
<p>这个变量主要是在php执行时，对超级变量创建的设置。EGPCS对应的超级变量为<code>$_ENV</code>, <code>$_GET</code>, <code>$_POST</code>, <code>$_COOKIE</code>, <code>$_SERVER</code>。如果variables_order被设置为””,则对应的超级全局变量的值都为空数组。</p>
<p>所以，要想<code>$_REQUEST</code>包含的预定义变量的值，variables_order必须有对应的设置。例如，variables_order = “G”，则$_REQUEST中肯定不会有post的值。</p>
<p>在<code>register_globals=on</code>的情况，这个配置的顺序将影响对应变量的值，重复key，后边的会覆盖前边的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ request_order = &#34;PGC&#34;</span><br></pre></td></tr></table></figure></p>
<p>这个变量，说明<code>$_REQUEST</code>包含哪些类型的外部数据、数据加载的顺序。这个是有顺序的，如果key重复，后边的就会覆盖前边的值。</p>
<blockquote>
<p>   比如:<br><code>$_GET</code>里面有个 <code>$_GET[&#39;id&#39;]=2</code> ,  <code>$_POST</code> 里有一个 <code>$_POST[&#39;id&#39;] =3</code>。<br>如果request_order = “PG”的形式设置，那么 <code>$_REQUEST[&#39;id&#39;]=2</code>。<br>如果request_order = “GP”的形式设置，则 <code>$_REQUEST[&#39;id&#39;]=3</code>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>前记</strong></p>
<p>今天测试返回一个API调用接口不对的bug，查看API发现变量是通过$_REQUEST来获取参数的，难道获取方法有问题？</p>
<p><strong>排查</strong></p>
<p>既然有了怀疑，那么我们来打印下]]>
    </summary>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="request" scheme="http://sphenginx.github.io/tags/request/"/>
    
      <category term="日新月异" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E6%96%B0%E6%9C%88%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP依赖管理工具Composer入门]]></title>
    <link href="http://sphenginx.github.io/2014/11/13/PHP%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Composer%E5%85%A5%E9%97%A8/"/>
    <id>http://sphenginx.github.io/2014/11/13/PHP依赖管理工具Composer入门/</id>
    <published>2014-11-13T06:43:25.000Z</published>
    <updated>2015-11-27T09:47:25.667Z</updated>
    <content type="html"><![CDATA[<p><strong>介绍</strong></p>
<p>Composer是PHP中的一个依赖管理工具. 它可以让你声明自己项目所依赖的库，然后它将会在项目中为你安装这些库。</p>
<p><strong>依赖管理</strong></p>
<p>Composer不是包管理器。是的，它实际上和”包”或者库打交道，但是它是以项目为单位进行管理，把它们安装到你项目中的一个目录（例如vendor）。默认情况下它不会以全局的方式安装任何东西。因此，它是一个依赖管理器。</p>
<p>这个想法并不新鲜，Composer的灵感是来自于node的npm和ruby的bundler。但是目前PHP还没有一个这样的工具。<br><code>Composer</code>解决的问题是：</p>
<ul>
<li>你有一个依赖N多库的项目。</li>
<li>这些库中一些又依赖于其他的库。</li>
<li>你声明你所依赖的库。</li>
<li>Composer找出哪些包的哪个版本将会被安装，然后安装它们（也就是把它们下载到你的项目中）。</li>
</ul>
<p><strong>声明依赖关系</strong></p>
<p>假设你正在创建一个项目，然后你需要一个日志操作的库。你决定使用monolog。为了把它加入到你的项目中，你需要做的就是创建一个名为composer.json的文件，其描述这个项目的依赖关系。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#10;    &#34;require&#34;: &#123;&#10;        &#34;monolog/monolog&#34;: &#34;1.2.*&#34;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们简单的描述说我们的项目依赖某个monolog/monolog包，版本只要是以1.2开头的就行。</p>
<p><strong>系统要求</strong></p>
<p>Composer需要PHP <strong>5.3.2+</strong> 才能运行。一些灵敏的PHP设置和编译选项也是必须的，不过安装程序 <code>installer</code> 会警告你任何不兼容的地方。<br>如果想要从源码而不是简单的从zip压缩包中安装软件包的话，你将需要git，svn或者hg，这依赖于软件包是通过什么进行版本控制的。<br>Composer是兼容多平台的，并且我们力争使其在Windows，Linux和OSX上的运行无差异。<br>安装 - *nix下载Composer可执行程序局部安装<br>为了获取Composer，我们需要做两件事。第一个是安装Composer（前面说过了，这意味下载它到你的项目中）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="operator">-s</span>S https://getcomposer.org/installer | php</span><br></pre></td></tr></table></figure></p>
<p>这只会检查一些PHP设置，然后下载<strong>composer.phar</strong>到你的工作目录中。这个文件是Composer二进制文件。它是一个PHAR <code>PHP archive</code>，PHP的归档格式，也可以像其他命令一样在命令行上运行。<br>你可以使用<code>--install-dir</code>选项，并且提供一个目标目录（可以是绝对或者相对路径）从而把Composer安装到一个指定的目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="operator">-s</span>S https://getcomposer.org/installer | php -- --install-dir=bin</span><br></pre></td></tr></table></figure></p>
<p>你可以把这个文件放到任何你想放的地方。如果你把它放到你的PATH中，你就可以全局访问它了。在类unix系统中你甚至可以使它可执行，并且调用的时候不需要php。<br>你可以执行这些命令从而能够在你的系统上简单的访问composer：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="operator">-s</span>S https://getcomposer.org/installer | php</span><br><span class="line">$ sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure></p>
<p>然后，只需要执行composer命令来运行Composer，而不是php composer.phar。</p>
<p><strong>Windows使用安装程序</strong></p>
<p>这是在你的机器上安装Composer最简单的方法。<br>下载并运行<a href="https://getcomposer.org/Composer-Setup.exe" target="_blank" rel="external">Composer-Setup.exe</a>，它将会安装最新的Composer版本并且设置好PATH，然后你就可以在命令中的任何目录下调用composer了。<br>手动安装<br>切换到一个存在于PATH环境变量中的目录，然后执行安装代码片段来下载composer.phar：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username&#62;cd C:\bin&#10;C:\bin&#62;php -r &#34;eval(&#39;?&#62;&#39;.file_get_contents(&#39;https://getcomposer.org/installer&#39;));&#34;</span><br></pre></td></tr></table></figure></p>
<p>创建一个新的以.bat结尾的composer文件:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\bin&#62;echo @php &#34;%~dp0composer.phar&#34; %*&#62;composer.bat</span><br></pre></td></tr></table></figure></p>
<p>关闭你当前的终端。打开一个新的终端测试一下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username&#62;composer -V&#10;Composer version 27d8904&#10; &#10;C:\Users\username&#62;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用Composer</strong></p>
<p>我们接下来要使用Composer来安装项目的依赖。如果你在当前目录下没有一个叫作<strong>composer.json</strong>的文件，请跳到基本使用章节。<br>为了解决并下载依赖，运行install命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php composer.phar install</span><br></pre></td></tr></table></figure></p>
<p>如果你是全局安装，并且目录下没有phar文件，那么运行这个：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer install</span><br></pre></td></tr></table></figure></p>
<p>如果是上面的例子，这个操作将会下载monolog到vendor/monolog/monolog目录。<br>自动加载<br>除了下载库之外，Composer也会创建一个自动加载文件，这个文件能够自动加载Composer下载的库中所有的类。如果想使用它，只需要在你代码启动的地方加上如下代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require &#39;vendor/autoload.php&#39;;</span><br></pre></td></tr></table></figure></p>
<p>哇哦！现在开始使用monolog吧! 如果想进一步学习Composer，继续阅读「基本使用」章节。 如果想要找需要的package，到Packagist。</p>
<p>参考  英文原文：<a href="http://getcomposer.org/doc/00-intro.md" target="_blank" rel="external">http://getcomposer.org/doc/00-intro.md</a></p>
<p>(完)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>介绍</strong></p>
<p>Composer是PHP中的一个依赖管理工具. 它可以让你声明自己项目所依赖的库，然后它将会在项目中为你安装这些库。</p>
<p><strong>依赖管理</strong></p>
<p>Composer不是包管理器。]]>
    </summary>
    
      <category term="composer" scheme="http://sphenginx.github.io/tags/composer/"/>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="日新月异" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E6%96%B0%E6%9C%88%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[闲言碎语]]></title>
    <link href="http://sphenginx.github.io/2011/03/09/%E7%A2%8E%E8%AF%AD/"/>
    <id>http://sphenginx.github.io/2011/03/09/碎语/</id>
    <published>2011-03-09T08:29:00.000Z</published>
    <updated>2015-11-28T01:17:47.742Z</updated>
    <content type="html"><![CDATA[<p><strong>碎语</strong></p>
<ul>
<li><p>春有百花秋有月，夏有凉风冬有雪。若无闲事挂心头，便是人间好时节。</p>
</li>
<li><p>长大也许就是：学会了把亲情放在第一位、把友情放在第二位、把爱情放在够不到的位置；学会了不和父母顶嘴，学会为了维护友谊让步；学会了不想着依赖别人，做好自己，让别人依赖你；学会了认清自己，不是很好，也不算坏，不把头扬的很高，也不拿眼睛盯别人的脚；学会把喜欢的人放在心底，默默的不张扬。</p>
</li>
<li><p>爱自己最好的方式，就是成就自己!</p>
</li>
<li><p>这世界上，败给谁都可以释怀，败给自己最不能原谅!</p>
</li>
<li><p>启蒙就是有勇气去运用你自己的理性。</p>
</li>
<li><p>一件事你犹豫去不去做，那就是该立即动身做的。一个东西你犹豫买不买，那就是该买的。喜欢是非常难得的，尽管去争取你喜欢的，而不是费心找廉价点的替代品。对事物，对人都该如此。</p>
</li>
<li><p>I’d rather be a failure at something I love than a success at something I hate.</p>
</li>
<li><p>世间凡人皆慵于懒，天下才子皆毁于疏！ 困难，只是用来被击败的存在而已，只是因为现在的你不够强大。</p>
</li>
<li><p>如果懒惰暂时还未产生恶习或祸患，那通常也一定会产生沮丧。懒惰就像生锈一样，比操劳更能损害身体！</p>
</li>
<li><p>人应该是自己的主宰，主宰自己的身体和思想，而不应该让身体或者贪婪控制自己！！！</p>
</li>
<li><p>回归本质，学习编程语言还是为了低成本高效的解决实际的业务问题。</p>
</li>
<li><p>如果只看合乎自己口味的书，那你永远只能知道你已经知道的事情。</p>
</li>
<li><p>读万卷书不如行万里路，行万里路不如阅人无数！</p>
</li>
<li><p>怕什么真理无穷，进一寸有一寸的欢喜。</p>
</li>
<li><p>生活中真正的勇士向来是默默无闻的 喧哗不止的永远是自视清高的一群 。</p>
</li>
<li><p>黑暗既然一定要存在，就让阳光尽量多的普照大地吧。</p>
</li>
<li><p>声音比文字更能表达一个人的想法，和人花点时间坐下来交谈是不能代替的。</p>
</li>
<li><p>工作中积极发挥主观能动性是非常重要的，主动的去交流工作任务，完工后积极的去和同事进行反馈；这样可以减少一些交流或者说是等待成本，可以非常高效的完成任务！！！</p>
</li>
<li><p>迷茫的时候，才是学习的时候，才是认知世界的时候，才是真正走出自己的认知面见到世界的时候。</p>
</li>
<li><p>成熟的人需要面具。戴上，坚强面对社会；摘下，温柔面对家人。</p>
</li>
<li><p>当你知道了许多真实，虚假的东西，就没有那么多酸情了，你越来越沉默，越来越不想说。</p>
</li>
<li><p>最快的脚步不是跨越，而是持续；最慢的步伐不是小步，而是徘徊。</p>
</li>
<li><p>想要不再受人欺负，努力让自己变得更强大吧！ 想要保护身边的人，那就让自己变得更加强大吧！</p>
</li>
<li><p>你之所以一边埋怨自己，一边又安于现状，是因为你还没走到无路可走的时候。真正的选择，是别无选择！</p>
</li>
<li><p>以前很喜欢抱怨，后来每次抱怨前仔细想想，常发现其实最应该抱怨的对象是自己，是自己没能力改变这个状况，让自己脱困。… 这么想的好处是：抱怨频率少了，自己也努力要变得更强。</p>
</li>
<li><p>情怀就是，生活不只是眼前的苟且，还有诗（吃）和远方。</p>
</li>
<li><p>忙起来你觉得什么都不缺，空下来才知道你什么都没有。</p>
</li>
<li><p>穷在闹市无人问，富在深山有远亲。</p>
</li>
<li><p>岂能尽如人意，但求问心无愧！</p>
</li>
<li><p>你若笃定，社会便不浮躁！！！</p>
</li>
<li><p>想要不可替代,就必须与众不同！！！</p>
</li>
<li><p>真正的勇气是：无所畏惧地接受上天给你的一切！</p>
</li>
<li><p>进步，从鄙视自己开始。跟贱人吵架，不仅仅让人分不清谁是贱人，更容易让你停留在跟贱人一个层次；为烂事操心，不仅仅是对我们精力的一种浪费，更悲惨在这会麻痹神经，让我们误人为这就是生活常态并最终成为常态。</p>
</li>
<li><p>心情再差，也不要写在脸上，因为没有人喜欢看；日子再穷，也不要挂在嘴边，因为没有人无故给你钱；工作再累，也不要抱怨，因为没有人无条件替你干；生活再苦，也不要失去信念，因为美好将在明天； 品性再坏，也要孝顺父母，因为你也有老的那天。</p>
</li>
<li><p>人往往把自己看得过重才会患得患失，觉得别人必须理解自己。 其实，人要看轻自己，少一些自我，多一些换位，才能心生快乐。 所谓心有多大，快乐就有多少；包容越多，得到越多。</p>
</li>
<li><p>做人的最高境界不是一味低调，也不是一味张扬，而是始终如一的不卑不亢！</p>
</li>
<li><p>你是什么样的人，就会遇见什么样的人。让自己变得闪闪发光，努力站在人生的高处，自然会遇见更好的人和风景。</p>
</li>
<li><p>学会用一种幽默面对生活，不要把那些生命的历练当做生命的坎，记住一句忠告，生活因为感谢才倍加温暖，生活中的那些苦水，越吐才越苦，睁大眼睛去发现生活的光明与希望，内心多一些冷静与宽阔，不在乎苦难，苦难又奈何。</p>
</li>
<li><p>找伴侣就要找大度，大气的，一点亏都不肯吃的人，说一万遍“爱你”也别信。爱你的人会心甘情愿输给你。学会了迁就，懂得了忍让，才能证明深爱着你。他给你的或许不多，但有了宽容，就等于给了你全部!</p>
</li>
<li><p>我对全栈开发工程师的定义是，他们能够自己构建和部署一个完整的、可以工作的应用程序，而不需要其他任何人的帮助。那意味着他们能够编写前端、后端代码，能够配置服务器，当然还能够设计数据库表。</p>
</li>
</ul>
<p><strong>语录</strong></p>
<ul>
<li><p>“没手，没脚，没烦恼” ——尼克·胡哲</p>
</li>
<li><p>大胆假设，小心求证。 ——胡适</p>
</li>
<li><p>成长的很大一部分，是接受。接受分道扬镳，接受世事无常，接受孤独挫折，接受突如其来的无力感，接受自己的缺点。然后发自内心地去改变，找到一个平衡点。跟世界相处，首先是和自己相处。天黑开盏灯，落雨带把伞，难过先难过，但也不作死。—— 卢思浩</p>
</li>
<li><p>年轻人不要试图追求安全感，特别是年轻的时候，周遭环境从来都不会有绝对的安全感，如果你觉得安全，很可能暗藏危机。真正的安全感，来自你对自己的信心，是你每个阶段性目标的实现，而真正的归属感，在于你的内心深处，对自己命运的把控，因为你最大的对手永远都是自己。—— 李嘉诚</p>
</li>
<li><p>胜利迟早都属于有信心的人。换句话说，你若仅仅接受最好的，你最后得到的常常也就是最好的，只要你有自信。一个人胜任一件事，85%取决于态度，15%取决于智力，所以一个人的成败取决于他是否自信，假如这个人是自卑的，那自卑就会扼杀他的聪明才智，消磨他的意志。—— 杜根定律</p>
</li>
<li><p>你不应该给软件装后门，因为你不能保证这个后门只有好人能够使用。  —— 苹果CEO 库克</p>
</li>
<li><p>思考和知识应该是经常同步而行。不然，知识就是个死物，而且会毫无成果地消亡。—— 弗兰西斯.培根</p>
</li>
<li><p>读史使人明智,读诗使人灵秀,演算使人精密,哲理使人深刻,伦理学使人庄重,逻辑修辞使人善辩. —— 培根</p>
</li>
<li><p>士人读书，第一要有志，第二要有识，第三要有恒。有志，则断不甘为下流。有识，则知学问无尽，不敢以一得自足；如河伯之观海，如井蛙之窥天，皆无见识也。有恒，则断无不成之事。此三者缺一不可。—— 曾国藩</p>
</li>
<li><p>好好珍惜身边的人，因为你不知道意外和明天哪一个会先到来。 —— 天津塘沽大爆炸。</p>
</li>
<li><p>人类面临有三大问题，顺序错不得。先要解决人和物之间的问题，接下来要解决人和人之间的问题，最后一定要解决人和自己内心之间的问题。 —— 梁漱溟</p>
</li>
<li><p>世界不是想象的那样，恐惧是世间最强大的武器！你是因为恐惧，所以你才愤怒；因为恐惧你才选择了逃避，让自己成为一个连是非都不分的人，你不知道，你永远不知道，要走在正确的路上需要多么大的勇气。别再因为害怕，找理由一次次为自己开脱。 —— 《痞子英雄》</p>
</li>
<li><p>我不敢休息，因为我没有存款；我不敢说累，因为我没有成就；我不敢偷懒，因为我还要生活；我能放弃选择，但是我不能选择放弃。所以坚强，拼搏是我唯一的选择！——  致此时的你。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>碎语</strong></p>
<ul>
<li><p>春有百花秋有月，夏有凉风冬有雪。若无闲事挂心头，便是人间好时节。</p>
</li>
<li><p>长大也许就是：学会了把亲情放在第一位、把友情放在第二位、把爱情放在够不到的位置；学会了不和父母顶嘴，学]]>
    </summary>
    
      <category term="碎语" scheme="http://sphenginx.github.io/tags/%E7%A2%8E%E8%AF%AD/"/>
    
      <category term="闲言碎语" scheme="http://sphenginx.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面试有感]]></title>
    <link href="http://sphenginx.github.io/2011/03/09/%E9%9D%A2%E8%AF%95%E6%9C%89%E6%84%9F/"/>
    <id>http://sphenginx.github.io/2011/03/09/面试有感/</id>
    <published>2011-03-09T08:29:00.000Z</published>
    <updated>2015-11-27T09:53:54.965Z</updated>
    <content type="html"><![CDATA[<p>自2011年一月25号培训毕业以来，我参加的大大小小的面试（不包括远程的）也有将近二十多次了，在这二十多次的面试中，我不知不觉当了一次‘面霸’，也发现了面试的一些好处，特作文以记之，也希望对即将参加工作的童鞋有一些帮助吧。</p>
<p>首先，多次的面试可以很好的锻炼体力，在这么多次的面试中，我记得最长的一次是从北京的最北边到北京的最南边，那次面试从上午十一点出门到下午六点回家，很好的锻炼了我的‘艰苦奋斗’精神，我的抗疲劳能力也大大增强。</p>
<p>其次，多次的面试可以加深对行业的了解，每次面试前，我都会上网查找面试企业的相关信息，以及该企业的优势与发展空间，甚至是我面试的岗位的发展空间，通过多次的面试，对网站开发行业有了更深层次的了解，对自己的职业定位更加明确。</p>
<p>再次，多次的面试可以更好的巩固职业相关知识，每次的面试题中，或多或少的都会出一些自己没有涉及到的知识面，通过面试可以更好的认识自己的不足，从而加深自己的知识储备，以备将来知识的升级换代起到很好的承上启下作用。</p>
<p>再再次，多次面试可以很好的锻炼口才，由开始的内向不敢说到最后的侃侃而谈，甚至是主动挑起话题；这些都是面试时意想不到的收获；</p>
<p>另外面试最重要的一点，就是认清自己的能力、价值和升值空间，不要因为怕没工作而不知所措的降低自己的身价，坚持自己的薪金要求，不仅仅是对自己能力的肯定，有时候还会换来HR的青睐有加，获得意想不到的收获。</p>
<p>呵呵，以上都是一些经验心得，在我看来，面霸其实是最了解行业的人之一。</p>
<p>最后，预祝我和童鞋们都能找到一份称心如意的工作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自2011年一月25号培训毕业以来，我参加的大大小小的面试（不包括远程的）也有将近二十多次了，在这二十多次的面试中，我不知不觉当了一次‘面霸’，也发现了面试的一些好处，特作文以记之，也希望对即将参加工作的童鞋有一些帮助吧。</p>
<p>首先，多次的面试可以很好的锻炼体力，]]>
    </summary>
    
      <category term="面试" scheme="http://sphenginx.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="人生百态" scheme="http://sphenginx.github.io/categories/%E4%BA%BA%E7%94%9F%E7%99%BE%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[写在年后的第一场雪，写在年后的第一次面试]]></title>
    <link href="http://sphenginx.github.io/2011/02/16/%E5%86%99%E5%9C%A8%E5%B9%B4%E5%90%8E%E7%9A%84%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9B%AA%EF%BC%8C%E5%86%99%E5%9C%A8%E5%B9%B4%E5%90%8E%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/"/>
    <id>http://sphenginx.github.io/2011/02/16/写在年后的第一场雪，写在年后的第一次面试/</id>
    <published>2011-02-16T08:01:00.000Z</published>
    <updated>2015-11-27T08:44:46.945Z</updated>
    <content type="html"><![CDATA[<p>洋洋洒洒，还未过晌，就草草的结束了你的2011年第一次人间之旅！恰如我的这次远程面试，也只有短短的十几分钟。</p>
<p>毕业在即，记得余秋雨《文化苦旅》自序中说：“人生的年少轻狂是以尚未唔得自己的历史定位为前提的。”三个月的实训，让我有了自己的定位。所以，这算是毕业前最后的年少轻狂吧！。。。。。。</p>
<p>去年十月份，离开学校来到达内培训！记得当时开班是十月十号，因大学前三年的日子太自由了，所以，开班伊始，我就决定，这次一定要好好学习，不辜负那一万三千八百块钱！而我也是这么做的。所以，我基本上是一个通晓php开发的网络开发人员！然而，等到达内毕业时，因性格使然，面试也是尽不如意！可是这已经是第七次远程面试了，可是结果仍然未知。这就是一个电子商务市场占有率70%的公司的办事效率吗？还是你们的办公理念仍停留在第三次工业革命以前？这让我苦思未果~~~</p>
<p>倘若这次面试之后仍然有面试，那你们这个定制公司就给我见鬼去吧！还有，某辅导员，在培训过程中，你多次为无关事情催命回校，你也跟爷见鬼去吧。“此处不留爷，自有留爷处，处处不留爷，老子去铁路！”我就不信在这个网络经济时代，网络编程人才大量需求的市场，没有我这个网络开发人员的一席之地！！！</p>
<p>因定制公司多次面试未果，一时怒起，临机诉苦，不知所云。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>洋洋洒洒，还未过晌，就草草的结束了你的2011年第一次人间之旅！恰如我的这次远程面试，也只有短短的十几分钟。</p>
<p>毕业在即，记得余秋雨《文化苦旅》自序中说：“人生的年少轻狂是以尚未唔得自己的历史定位为前提的。”三个月的实训，让我有了自己的定位。所以，这算是毕业前最]]>
    </summary>
    
      <category term="面试" scheme="http://sphenginx.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="人生百态" scheme="http://sphenginx.github.io/categories/%E4%BA%BA%E7%94%9F%E7%99%BE%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的两年半聊大生活]]></title>
    <link href="http://sphenginx.github.io/2010/09/24/%E6%88%91%E7%9A%84%E4%B8%A4%E5%B9%B4%E5%8D%8A%E8%81%8A%E5%A4%A7%E7%94%9F%E6%B4%BB/"/>
    <id>http://sphenginx.github.io/2010/09/24/我的两年半聊大生活/</id>
    <published>2010-09-24T07:15:00.000Z</published>
    <updated>2015-11-27T08:44:28.913Z</updated>
    <content type="html"><![CDATA[<p>在聊大的这两年半，或许只是人生一个很小的片段，但是对于我们每一个人都是不可或缺，好似娘胎里带来的胎记。</p>
<p>这是一群普通的人在一所年轻的高校一起走过的两年半，如青春的岁月并没有多少区别，时间也是如流水一样逝去。但在我们的内心，这是一个驿站，一个青春的驿站，一个梦想的驿站，一个不只是学更是问的驿站。</p>
<p>我们原本并不熟悉，但并没有妨碍我们走在一起。现在，我们已经不是十八九的年纪，也少了许多激情与活力，但我们在思考人生的同时，也努力留住关于青春所有的记忆。<br>年龄让我们背负了更多的责任，这让我们更多的是努力规划自己人生的轨迹。虽然，我们并不能全部做主，但是我们也绝不能任其随意。</p>
<p>这不是名校，也并非是一片神奇的土地。但是，勤劳的我们依然欣喜和努力，因为今天的每一个劳作总能期待一个丰收的美丽。因为，我们知道：不是每一个付出都有收获，但每一个收获都必须付出。这就是人生，这更是真谛。</p>
<p>我们没有名师讲授，更没有外界推崇的华丽，但并没有阻碍朴实的老师和我们一起努力，或许他们正在培育未来的名师，更或许我们正在和未来的名师在一起。我们可能不能收获美丽，但是未来收获的每一份美丽都有我们拼搏的气息。</p>
<p>这仅仅是江北一块平实的土地，我们也只是这块土地的过客，尝试着耕耘与收获，也经历挫折与失意。但是，我们不抛弃，因为我们正努力使这块土地镌刻我们所有的记忆。</p>
<p>巍峨的光岳楼留给我们的并不仅是壮丽，更多的是这个城市关于历史的记忆；柔情的胭脂湖留给我们的并不仅是护城湖的遗迹，更多的是这个城市关于平和民风的一种写意；我们可能对这个城市说不上爱，但我们必须承认它留给了我们不可更替的记忆。</p>
<p>长长的彩虹桥带来的并不仅是学习与生活的便利，更多的是品味我们走在上面时青春豪气；西校高高白桦树带来的并不仅是夏日的惬意，而是一个逐渐成长的校园关于学问的诸多墨迹；孔雀的鸣叫并不是多么悦耳，但是我们依然在旁边期待它开屏的美丽。</p>
<p>我们可能对这个学校还不是很满意，甚至有些时候还有些怨气，我们可以不说爱，但我们确实很在意。也正是因为我们很在意，所以我们对这个学校是如此的苛求，就像眼里容不得沙粒。</p>
<p>离开，并不是我们的本意，但这就是人生的轨迹。伤别的季节好像看不到我们的朝气，并不是我们在逃避与消极，而是希望凭借一些酒精保存更多关于这个学校的记忆。<br>背起行囊，我们就要远离，并努力带走这里一切的气息，何处是终点尚需再议。但每一个人生歇息的驿站，都连着聊城大学长长的记忆。<br>我不说爱你，更不说恨你，因为语言是如此的乏力。我只是告诉你，我永远记得你！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在聊大的这两年半，或许只是人生一个很小的片段，但是对于我们每一个人都是不可或缺，好似娘胎里带来的胎记。</p>
<p>这是一群普通的人在一所年轻的高校一起走过的两年半，如青春的岁月并没有多少区别，时间也是如流水一样逝去。但在我们的内心，这是一个驿站，一个青春的驿站，一个梦想]]>
    </summary>
    
      <category term="聊城大学" scheme="http://sphenginx.github.io/tags/%E8%81%8A%E5%9F%8E%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="人生百态" scheme="http://sphenginx.github.io/categories/%E4%BA%BA%E7%94%9F%E7%99%BE%E6%80%81/"/>
    
  </entry>
  
</feed>
