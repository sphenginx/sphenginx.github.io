<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[平常心]]></title>
  <subtitle><![CDATA[独立之精神, 自由之思想！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sphenginx.github.io/"/>
  <updated>2015-11-27T04:33:48.649Z</updated>
  <id>http://sphenginx.github.io/</id>
  
  <author>
    <name><![CDATA[Sphenginx Cui]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://sphenginx.github.io/2015/11/27/hello-world/"/>
    <id>http://sphenginx.github.io/2015/11/27/hello-world/</id>
    <published>2015-11-27T04:33:48.649Z</published>
    <updated>2015-11-27T04:33:48.649Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的两年半聊大生活]]></title>
    <link href="http://sphenginx.github.io/2014/11/13/PHP%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Composer%E5%85%A5%E9%97%A8/"/>
    <id>http://sphenginx.github.io/2014/11/13/PHP依赖管理工具Composer入门/</id>
    <published>2014-11-13T06:43:25.000Z</published>
    <updated>2015-11-27T08:57:24.148Z</updated>
    <content type="html"><![CDATA[<p><strong>介绍</strong></p>
<p>Composer是PHP中的一个依赖管理工具. 它可以让你声明自己项目所依赖的库，然后它将会在项目中为你安装这些库。</p>
<p><strong>依赖管理</strong></p>
<p>Composer不是包管理器。是的，它实际上和”包”或者库打交道，但是它是以项目为单位进行管理，把它们安装到你项目中的一个目录（例如vendor）。默认情况下它不会以全局的方式安装任何东西。因此，它是一个依赖管理器。</p>
<p>这个想法并不新鲜，Composer的灵感是来自于node的npm和ruby的bundler。但是目前PHP还没有一个这样的工具。<br><code>Composer</code>解决的问题是：</p>
<ul>
<li>你有一个依赖N多库的项目。</li>
<li>这些库中一些又依赖于其他的库。</li>
<li>你声明你所依赖的库。</li>
<li>Composer找出哪些包的哪个版本将会被安装，然后安装它们（也就是把它们下载到你的项目中）。</li>
</ul>
<p><strong>声明依赖关系</strong></p>
<p>假设你正在创建一个项目，然后你需要一个日志操作的库。你决定使用monolog。为了把它加入到你的项目中，你需要做的就是创建一个名为composer.json的文件，其描述这个项目的依赖关系。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#10;    &#34;require&#34;: &#123;&#10;        &#34;monolog/monolog&#34;: &#34;1.2.*&#34;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们简单的描述说我们的项目依赖某个monolog/monolog包，版本只要是以1.2开头的就行。</p>
<p><strong>系统要求</strong></p>
<p>Composer需要PHP <strong>5.3.2+</strong> 才能运行。一些灵敏的PHP设置和编译选项也是必须的，不过安装程序 <code>installer</code> 会警告你任何不兼容的地方。<br>如果想要从源码而不是简单的从zip压缩包中安装软件包的话，你将需要git，svn或者hg，这依赖于软件包是通过什么进行版本控制的。<br>Composer是兼容多平台的，并且我们力争使其在Windows，Linux和OSX上的运行无差异。<br>安装 - *nix下载Composer可执行程序局部安装<br>为了获取Composer，我们需要做两件事。第一个是安装Composer（前面说过了，这意味下载它到你的项目中）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="operator">-s</span>S https://getcomposer.org/installer | php</span><br></pre></td></tr></table></figure></p>
<p>这只会检查一些PHP设置，然后下载<strong>composer.phar</strong>到你的工作目录中。这个文件是Composer二进制文件。它是一个PHAR <code>PHP archive</code>，PHP的归档格式，也可以像其他命令一样在命令行上运行。<br>你可以使用<code>--install-dir</code>选项，并且提供一个目标目录（可以是绝对或者相对路径）从而把Composer安装到一个指定的目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="operator">-s</span>S https://getcomposer.org/installer | php -- --install-dir=bin</span><br></pre></td></tr></table></figure></p>
<p>你可以把这个文件放到任何你想放的地方。如果你把它放到你的PATH中，你就可以全局访问它了。在类unix系统中你甚至可以使它可执行，并且调用的时候不需要php。<br>你可以执行这些命令从而能够在你的系统上简单的访问composer：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="operator">-s</span>S https://getcomposer.org/installer | php</span><br><span class="line">$ sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure></p>
<p>然后，只需要执行composer命令来运行Composer，而不是php composer.phar。</p>
<p><strong>Windows使用安装程序</strong></p>
<p>这是在你的机器上安装Composer最简单的方法。<br>下载并运行<a href="https://getcomposer.org/Composer-Setup.exe" target="_blank" rel="external">Composer-Setup.exe</a>，它将会安装最新的Composer版本并且设置好PATH，然后你就可以在命令中的任何目录下调用composer了。<br>手动安装<br>切换到一个存在于PATH环境变量中的目录，然后执行安装代码片段来下载composer.phar：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username&#62;cd C:\bin&#10;C:\bin&#62;php -r &#34;eval(&#39;?&#62;&#39;.file_get_contents(&#39;https://getcomposer.org/installer&#39;));&#34;</span><br></pre></td></tr></table></figure></p>
<p>创建一个新的以.bat结尾的composer文件:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\bin&#62;echo @php &#34;%~dp0composer.phar&#34; %*&#62;composer.bat</span><br></pre></td></tr></table></figure></p>
<p>关闭你当前的终端。打开一个新的终端测试一下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username&#62;composer -V&#10;Composer version 27d8904&#10; &#10;C:\Users\username&#62;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用Composer</strong></p>
<p>我们接下来要使用Composer来安装项目的依赖。如果你在当前目录下没有一个叫作<strong>composer.json</strong>的文件，请跳到基本使用章节。<br>为了解决并下载依赖，运行install命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php composer.phar install</span><br></pre></td></tr></table></figure></p>
<p>如果你是全局安装，并且目录下没有phar文件，那么运行这个：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer install</span><br></pre></td></tr></table></figure></p>
<p>如果是上面的例子，这个操作将会下载monolog到vendor/monolog/monolog目录。<br>自动加载<br>除了下载库之外，Composer也会创建一个自动加载文件，这个文件能够自动加载Composer下载的库中所有的类。如果想使用它，只需要在你代码启动的地方加上如下代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require &#39;vendor/autoload.php&#39;;</span><br></pre></td></tr></table></figure></p>
<p>哇哦！现在开始使用monolog吧! 如果想进一步学习Composer，继续阅读「基本使用」章节。 如果想要找需要的package，到Packagist。</p>
<p>参考  英文原文：<a href="http://getcomposer.org/doc/00-intro.md" target="_blank" rel="external">http://getcomposer.org/doc/00-intro.md</a></p>
<p>(完)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>介绍</strong></p>
<p>Composer是PHP中的一个依赖管理工具. 它可以让你声明自己项目所依赖的库，然后它将会在项目中为你安装这些库。</p>
<p><strong>依赖管理</strong></p>
<p>Composer不是包管理器。]]>
    </summary>
    
      <category term="composer" scheme="http://sphenginx.github.io/tags/composer/"/>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="日新月异" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E6%96%B0%E6%9C%88%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面试成功有感]]></title>
    <link href="http://sphenginx.github.io/2011/03/09/%E9%9D%A2%E8%AF%95%E6%9C%89%E6%84%9F/"/>
    <id>http://sphenginx.github.io/2011/03/09/面试有感/</id>
    <published>2011-03-09T08:29:00.000Z</published>
    <updated>2015-11-27T08:46:15.650Z</updated>
    <content type="html"><![CDATA[<p>自2011年一月25号培训毕业以来，我参加的大大小小的面试（不包括远程的）也有将近二十多次了，在这二十多次的面试中，我不知不觉当了一次‘面霸’，也发现了面试的一些好处，特作文以记之，也希望对即将参加工作的童鞋有一些帮助吧。</p>
<p>首先，多次的面试可以很好的锻炼体力，在这么多次的面试中，我记得最长的一次是从北京的最北边到北京的最南边，那次面试从上午十一点出门到下午六点回家，很好的锻炼了我的‘艰苦奋斗’精神，我的抗疲劳能力也大大增强。</p>
<p>其次，多次的面试可以加深对行业的了解，每次面试前，我都会上网查找面试企业的相关信息，以及该企业的优势与发展空间，甚至是我面试的岗位的发展空间，通过多次的面试，对网站开发行业有了更深层次的了解，对自己的职业定位更加明确。</p>
<p>再次，多次的面试可以更好的巩固职业相关知识，每次的面试题中，或多或少的都会出一些自己没有涉及到的知识面，通过面试可以更好的认识自己的不足，从而加深自己的知识储备，以备将来知识的升级换代起到很好的承上启下作用。</p>
<p>再再次，多次面试可以很好的锻炼口才，由开始的内向不敢说到最后的侃侃而谈，甚至是主动挑起话题；这些都是面试时意想不到的收获；</p>
<p>另外面试最重要的一点，就是认清自己的能力、价值和升值空间，不要因为怕没工作而不知所措的降低自己的身价，坚持自己的薪金要求，不仅仅是对自己能力的肯定，有时候还会换来HR的青睐有加，获得意想不到的收获。</p>
<p>呵呵，以上都是一些经验心得，在我看来，面霸其实是最了解行业的人之一。</p>
<p>最后，预祝我和童鞋们都能找到一份称心如意的工作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自2011年一月25号培训毕业以来，我参加的大大小小的面试（不包括远程的）也有将近二十多次了，在这二十多次的面试中，我不知不觉当了一次‘面霸’，也发现了面试的一些好处，特作文以记之，也希望对即将参加工作的童鞋有一些帮助吧。</p>
<p>首先，多次的面试可以很好的锻炼体力，]]>
    </summary>
    
      <category term="面试" scheme="http://sphenginx.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="人生百态" scheme="http://sphenginx.github.io/categories/%E4%BA%BA%E7%94%9F%E7%99%BE%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[写在年后的第一场雪，写在年后的第一次面试]]></title>
    <link href="http://sphenginx.github.io/2011/02/16/%E5%86%99%E5%9C%A8%E5%B9%B4%E5%90%8E%E7%9A%84%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9B%AA%EF%BC%8C%E5%86%99%E5%9C%A8%E5%B9%B4%E5%90%8E%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/"/>
    <id>http://sphenginx.github.io/2011/02/16/写在年后的第一场雪，写在年后的第一次面试/</id>
    <published>2011-02-16T08:01:00.000Z</published>
    <updated>2015-11-27T08:44:46.945Z</updated>
    <content type="html"><![CDATA[<p>洋洋洒洒，还未过晌，就草草的结束了你的2011年第一次人间之旅！恰如我的这次远程面试，也只有短短的十几分钟。</p>
<p>毕业在即，记得余秋雨《文化苦旅》自序中说：“人生的年少轻狂是以尚未唔得自己的历史定位为前提的。”三个月的实训，让我有了自己的定位。所以，这算是毕业前最后的年少轻狂吧！。。。。。。</p>
<p>去年十月份，离开学校来到达内培训！记得当时开班是十月十号，因大学前三年的日子太自由了，所以，开班伊始，我就决定，这次一定要好好学习，不辜负那一万三千八百块钱！而我也是这么做的。所以，我基本上是一个通晓php开发的网络开发人员！然而，等到达内毕业时，因性格使然，面试也是尽不如意！可是这已经是第七次远程面试了，可是结果仍然未知。这就是一个电子商务市场占有率70%的公司的办事效率吗？还是你们的办公理念仍停留在第三次工业革命以前？这让我苦思未果~~~</p>
<p>倘若这次面试之后仍然有面试，那你们这个定制公司就给我见鬼去吧！还有，某辅导员，在培训过程中，你多次为无关事情催命回校，你也跟爷见鬼去吧。“此处不留爷，自有留爷处，处处不留爷，老子去铁路！”我就不信在这个网络经济时代，网络编程人才大量需求的市场，没有我这个网络开发人员的一席之地！！！</p>
<p>因定制公司多次面试未果，一时怒起，临机诉苦，不知所云。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>洋洋洒洒，还未过晌，就草草的结束了你的2011年第一次人间之旅！恰如我的这次远程面试，也只有短短的十几分钟。</p>
<p>毕业在即，记得余秋雨《文化苦旅》自序中说：“人生的年少轻狂是以尚未唔得自己的历史定位为前提的。”三个月的实训，让我有了自己的定位。所以，这算是毕业前最]]>
    </summary>
    
      <category term="面试" scheme="http://sphenginx.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="人生百态" scheme="http://sphenginx.github.io/categories/%E4%BA%BA%E7%94%9F%E7%99%BE%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的两年半聊大生活]]></title>
    <link href="http://sphenginx.github.io/2010/09/24/%E6%88%91%E7%9A%84%E4%B8%A4%E5%B9%B4%E5%8D%8A%E8%81%8A%E5%A4%A7%E7%94%9F%E6%B4%BB/"/>
    <id>http://sphenginx.github.io/2010/09/24/我的两年半聊大生活/</id>
    <published>2010-09-24T07:15:00.000Z</published>
    <updated>2015-11-27T08:44:28.913Z</updated>
    <content type="html"><![CDATA[<p>在聊大的这两年半，或许只是人生一个很小的片段，但是对于我们每一个人都是不可或缺，好似娘胎里带来的胎记。</p>
<p>这是一群普通的人在一所年轻的高校一起走过的两年半，如青春的岁月并没有多少区别，时间也是如流水一样逝去。但在我们的内心，这是一个驿站，一个青春的驿站，一个梦想的驿站，一个不只是学更是问的驿站。</p>
<p>我们原本并不熟悉，但并没有妨碍我们走在一起。现在，我们已经不是十八九的年纪，也少了许多激情与活力，但我们在思考人生的同时，也努力留住关于青春所有的记忆。<br>年龄让我们背负了更多的责任，这让我们更多的是努力规划自己人生的轨迹。虽然，我们并不能全部做主，但是我们也绝不能任其随意。</p>
<p>这不是名校，也并非是一片神奇的土地。但是，勤劳的我们依然欣喜和努力，因为今天的每一个劳作总能期待一个丰收的美丽。因为，我们知道：不是每一个付出都有收获，但每一个收获都必须付出。这就是人生，这更是真谛。</p>
<p>我们没有名师讲授，更没有外界推崇的华丽，但并没有阻碍朴实的老师和我们一起努力，或许他们正在培育未来的名师，更或许我们正在和未来的名师在一起。我们可能不能收获美丽，但是未来收获的每一份美丽都有我们拼搏的气息。</p>
<p>这仅仅是江北一块平实的土地，我们也只是这块土地的过客，尝试着耕耘与收获，也经历挫折与失意。但是，我们不抛弃，因为我们正努力使这块土地镌刻我们所有的记忆。</p>
<p>巍峨的光岳楼留给我们的并不仅是壮丽，更多的是这个城市关于历史的记忆；柔情的胭脂湖留给我们的并不仅是护城湖的遗迹，更多的是这个城市关于平和民风的一种写意；我们可能对这个城市说不上爱，但我们必须承认它留给了我们不可更替的记忆。</p>
<p>长长的彩虹桥带来的并不仅是学习与生活的便利，更多的是品味我们走在上面时青春豪气；西校高高白桦树带来的并不仅是夏日的惬意，而是一个逐渐成长的校园关于学问的诸多墨迹；孔雀的鸣叫并不是多么悦耳，但是我们依然在旁边期待它开屏的美丽。</p>
<p>我们可能对这个学校还不是很满意，甚至有些时候还有些怨气，我们可以不说爱，但我们确实很在意。也正是因为我们很在意，所以我们对这个学校是如此的苛求，就像眼里容不得沙粒。</p>
<p>离开，并不是我们的本意，但这就是人生的轨迹。伤别的季节好像看不到我们的朝气，并不是我们在逃避与消极，而是希望凭借一些酒精保存更多关于这个学校的记忆。<br>背起行囊，我们就要远离，并努力带走这里一切的气息，何处是终点尚需再议。但每一个人生歇息的驿站，都连着聊城大学长长的记忆。<br>我不说爱你，更不说恨你，因为语言是如此的乏力。我只是告诉你，我永远记得你！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在聊大的这两年半，或许只是人生一个很小的片段，但是对于我们每一个人都是不可或缺，好似娘胎里带来的胎记。</p>
<p>这是一群普通的人在一所年轻的高校一起走过的两年半，如青春的岁月并没有多少区别，时间也是如流水一样逝去。但在我们的内心，这是一个驿站，一个青春的驿站，一个梦想]]>
    </summary>
    
      <category term="聊城大学" scheme="http://sphenginx.github.io/tags/%E8%81%8A%E5%9F%8E%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="人生百态" scheme="http://sphenginx.github.io/categories/%E4%BA%BA%E7%94%9F%E7%99%BE%E6%80%81/"/>
    
  </entry>
  
</feed>
