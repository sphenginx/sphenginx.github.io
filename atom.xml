<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[小崔随想录]]></title>
  <subtitle><![CDATA[独立之精神, 自由之思想！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sphenginx.github.io/"/>
  <updated>2016-11-08T09:38:00.061Z</updated>
  <id>http://sphenginx.github.io/</id>
  
  <author>
    <name><![CDATA[Sphenginx]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何高效率的工作]]></title>
    <link href="http://sphenginx.github.io/2016/10/14/how-to-work/"/>
    <id>http://sphenginx.github.io/2016/10/14/how-to-work/</id>
    <published>2016-10-14T12:03:01.000Z</published>
    <updated>2016-11-08T09:38:00.061Z</updated>
    <content type="html"><![CDATA[<h2 id="u4F60_u4E0D_u52AA_u529B_uFF0C_u8C01_u4E5F_u7ED9_u4E0D_u4E86_u4F60_u60F3_u8981_u7684_u751F_u6D3B"><a href="#u4F60_u4E0D_u52AA_u529B_uFF0C_u8C01_u4E5F_u7ED9_u4E0D_u4E86_u4F60_u60F3_u8981_u7684_u751F_u6D3B" class="headerlink" title="你不努力，谁也给不了你想要的生活"></a>你不努力，谁也给不了你想要的生活</h2><p>近被朋友圈刷屏了，简单的两个聊天记录，拿2000工资与20000工资的有什么区别？<strong>不论做什么，走心最重要！</strong></p>
<p>很多时候，我们失败都不是因为“硬件”不行，而是“软实力”欠佳。</p>
<p>若都是刚进公司的新人，大家能力是差不多的，随着时间的推移，情商高的往往都会比情商低的更容易得到赏识或提拔；所以，在技能相对稳定的情况下，我们一定要努力优化自己的处事方法。</p>
<p><strong>机会是留给有准备的人的，要别人推一把你才走一步，那你跟猪又有什么区别。</strong></p>
<hr>
<p>如图所示：3张图揭示人与人之间的差别！</p>
<h3 id="u60C5_u666F_u4E00"><a href="#u60C5_u666F_u4E00" class="headerlink" title="情景一"></a>情景一</h3><p><img src="http://sphenginx.github.io/images/work/1.png" alt="普通员工1"><br><img src="http://sphenginx.github.io/images/work/2.png" alt="普通员工2"></p>
<h3 id="u60C5_u666F_u4E8C"><a href="#u60C5_u666F_u4E8C" class="headerlink" title="情景二"></a>情景二</h3><p><img src="http://sphenginx.github.io/images/work/3.png" alt="优秀员工"></p>
<p>那么问题来了，</p>
<p>你能看出老员工和新员工之间的差别吗？</p>
<p><strong>如果你是老板，你更愿意聘用哪一个？</strong></p>
<h2 id="u4F18_u79C0_u5458_u5DE5_VS__u666E_u901A_u5458_u5DE5"><a href="#u4F18_u79C0_u5458_u5DE5_VS__u666E_u901A_u5458_u5DE5" class="headerlink" title="优秀员工 VS 普通员工"></a>优秀员工 VS 普通员工</h2><h3 id="u5173_u4E8E_u521A_u5165_u804C"><a href="#u5173_u4E8E_u521A_u5165_u804C" class="headerlink" title="关于刚入职"></a>关于刚入职</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>看重工资的高低，在一无所长的前提下，没有想过学习丰富的工作经验和职业技能。</td>
<td>更看重宝贵的工作经验，踏踏实实的去学习业务技能，他相信只要有丰富的经验，以后无论到哪都能赢得高薪。</td>
</tr>
</tbody>
</table>
<h3 id="u5173_u4E8E_u5BF9_u5F85_u95EE_u9898"><a href="#u5173_u4E8E_u5BF9_u5F85_u95EE_u9898" class="headerlink" title="关于对待问题"></a>关于对待问题</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>在工作中会发现各种各样的问题，对于问题他们往往以抱怨的态度去对待，而没有想方法去解决</td>
<td>在工作过程中，碰到问题会冷静的分析原因，并通过各种手段去解决，慢慢培养了一种解决问题的能力。</td>
</tr>
</tbody>
</table>
<h3 id="u5173_u4E8E_u6267_u884C_u529B"><a href="#u5173_u4E8E_u6267_u884C_u529B" class="headerlink" title="关于执行力"></a>关于执行力</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>对于上司交代的问题本着能做就做，不能做就慢慢磨，执行效果较差。</td>
<td>上司交代的事情积极去解决，遇到问题会积极与上司沟通请示，执行效果好。</td>
</tr>
</tbody>
</table>
<h3 id="u5173_u4E8E_u4E2A_u6027"><a href="#u5173_u4E8E_u4E2A_u6027" class="headerlink" title="关于个性"></a>关于个性</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>个性张扬，以自我为中心，不善于处理自己与同事领导的关系，往往给人一种很浮躁的感觉。</td>
<td>为人谦虚低调，能协调好与领导同事的关系，人际关系非常好。</td>
</tr>
</tbody>
</table>
<h3 id="u5173_u4E8E_u4E0B_u73ED_u540E"><a href="#u5173_u4E8E_u4E0B_u73ED_u540E" class="headerlink" title="关于下班后"></a>关于下班后</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>下班后往往通过看电视、打打游戏等方式，度过一段休闲时光。</td>
<td>下班后会抽出时间回顾今天一天的工作内容，反思不足之处，并规划好第二天的工作内容。</td>
</tr>
</tbody>
</table>
<h3 id="u5173_u4E8E_u5DE5_u4F5C_u91CD_u70B9"><a href="#u5173_u4E8E_u5DE5_u4F5C_u91CD_u70B9" class="headerlink" title="关于工作重点"></a>关于工作重点</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>工作杂乱无章，搞不清楚工作的核心内容，工作往往忙起来手足无措。</td>
<td>能很好的做好工作规划，找准核心工作内容，即使忙起来也能井然有序。</td>
</tr>
</tbody>
</table>
<h3 id="u5173_u4E8E_u5BA2_u6237_u6C9F_u901A"><a href="#u5173_u4E8E_u5BA2_u6237_u6C9F_u901A" class="headerlink" title="关于客户沟通"></a>关于客户沟通</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>和客户沟通仅局限于单纯的送货收款，没有考虑到客户的实际需求，往往工作很辛苦，但是成效却很低。</td>
<td>能很好的处理与客户的客情关系，准确的找到客户实际需求，并结合客户需求达成销售。往往事半功倍。</td>
</tr>
</tbody>
</table>
<h3 id="u5173_u4E8E_u89C6_u754C"><a href="#u5173_u4E8E_u89C6_u754C" class="headerlink" title="关于视界"></a>关于视界</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>缺乏宏观思考，经常纠结于某个终端问题，有时为了应对单个终端问题不惜提高政策从而影响了整个市场价格体系。</td>
<td>从市场整体角度出发，能很好的协调好各个渠道之间的市场问题，对于违反市场规律的个别终端坚决予以治理。</td>
</tr>
</tbody>
</table>
<h3 id="u5173_u4E8E_u6279_u8BC4"><a href="#u5173_u4E8E_u6279_u8BC4" class="headerlink" title="关于批评"></a>关于批评</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>对忠言逆耳理解的不透彻，总认为自己想的是对的，把上司或资深前辈的意见或建议不当一回事，我行我素。</td>
<td>能谦虚的接受批评，认识到自己所犯错误在哪，并积极改正！</td>
</tr>
</tbody>
</table>
<h3 id="u5173_u4E8E_u804C_u4E1A_u89C4_u5212"><a href="#u5173_u4E8E_u804C_u4E1A_u89C4_u5212" class="headerlink" title="关于职业规划"></a>关于职业规划</h3><table>
<thead>
<tr>
<th>普通员工</th>
<th>优秀员工</th>
</tr>
</thead>
<tbody>
<tr>
<td>没有职业规划，对自己想要什么没概念，能做多久算多久，风风光光是一辈子，窝窝囊囊也是一辈子，得过且过。</td>
<td>有自己的职业规划，知道自己想要什么，也知道如何去努力。</td>
</tr>
</tbody>
</table>
<p><img src="http://sphenginx.github.io/images/work/0.png" alt="你不努力，谁也给不了你想要的生活"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4F60_u4E0D_u52AA_u529B_uFF0C_u8C01_u4E5F_u7ED9_u4E0D_u4E86_u4F60_u60F3_u8981_u7684_u751F_u6D3B"><a href="#u4F60_u4E0D_u52AA_u529B_u]]>
    </summary>
    
      <category term="work" scheme="http://sphenginx.github.io/tags/work/"/>
    
      <category term="工作" scheme="http://sphenginx.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="涨薪" scheme="http://sphenginx.github.io/tags/%E6%B6%A8%E8%96%AA/"/>
    
      <category term="人生百态" scheme="http://sphenginx.github.io/categories/%E4%BA%BA%E7%94%9F%E7%99%BE%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL 中的 SELECT FOR UPDATE]]></title>
    <link href="http://sphenginx.github.io/2016/09/18/select-for-update/"/>
    <id>http://sphenginx.github.io/2016/09/18/select-for-update/</id>
    <published>2016-09-18T08:03:01.000Z</published>
    <updated>2016-09-19T03:20:05.418Z</updated>
    <content type="html"><![CDATA[<h2 id="MySQL__u4F7F_u7528SELECT__u2026_FOR_UPDATE__u505A_u4E8B_u52A1_u5199_u5165_u524D_u7684_u786E_u8BA4"><a href="#MySQL__u4F7F_u7528SELECT__u2026_FOR_UPDATE__u505A_u4E8B_u52A1_u5199_u5165_u524D_u7684_u786E_u8BA4" class="headerlink" title="MySQL  使用SELECT … FOR UPDATE 做事务写入前的确认"></a>MySQL  使用SELECT … FOR UPDATE 做事务写入前的确认</h2><p>以MySQL 的InnoDB 为例，预设的Tansaction isolation level 为REPEATABLE READ，在SELECT 的读取锁定主要分为两种方式:</p>
<p><code>SELECT ... LOCK IN SHARE MODE</code>  、  <code>SELECT ... FOR UPDATE</code></p>
<p>这两种方式在事务(Transaction) 进行当中SELECT 到同一个数据表时，都必须等待其它事务数据被提交(Commit)后才会执行。而主要的不同在于LOCK IN SHARE MODE 在有一方事务要Update 同一个表单时很容易造成死锁 。</p>
<p>简单的说，如果SELECT 后面若要UPDATE 同一个表单，最好使用SELECT … UPDATE。</p>
<p>举个例子: 假设商品表单products 内有一个存放商品数量的quantity ，在订单成立之前必须先确定quantity 商品数量是否足够(quantity&gt;0) ，然后才把数量更新为1。</p>
<p>不安全的做法:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT quantity FROM products WHERE id=3;  &#10;UPDATE products SET quantity = 1 WHERE id=3;</span><br></pre></td></tr></table></figure></p>
<p>为什么不安全呢?</p>
<p>少量的状况下或许不会有问题，但是大量的数据存取「铁定」会出问题。</p>
<p>如果我们需要在quantity&gt;0 的情况下才能扣库存，假设程序在第一行SELECT 读到的quantity 是2 ，看起来数字没有错，但是当MySQL 正准备要UPDATE 的时候，可能已经有人把库存扣成0 了，但是程序却浑然不知，将错就错的UPDATE 下去了。</p>
<font color="red"><strong>因此必须透过的事务机制来确保读取及提交的数据都是正确的。</strong></font>

<p>于是我们在MySQL 就可以这样测试: (注1)<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET AUTOCOMMIT=0;  &#10;BEGIN WORK;  &#10;SELECT quantity FROM products WHERE id=3 FOR UPDATE; //&#27492;&#26102;products &#25968;&#25454;&#20013;id=3 &#30340;&#25968;&#25454;&#34987;&#38145;&#20303;(&#27880;3)&#65292;&#20854;&#23427;&#20107;&#21153;&#24517;&#39035;&#31561;&#24453;&#27492;&#27425;&#20107;&#21153; &#25552;&#20132;&#21518;&#25165;&#33021;&#25191;&#34892;  &#10;SELECT * FROM products WHERE id=3 FOR UPDATE;  //(&#27880;2) &#22914;&#27492;&#21487;&#20197;&#30830;&#20445;quantity &#22312;&#21035;&#30340;&#20107;&#21153;&#35835;&#21040;&#30340;&#25968;&#23383;&#26159;&#27491;&#30830;&#30340;&#12290;  &#10;UPDATE products SET quantity = &#39;1&#39; WHERE id=3;  &#10;COMMIT WORK;</span><br></pre></td></tr></table></figure></p>
<p>提交(Commit)写入数据库，products 解锁。</p>
<p>注1: BEGIN/COMMIT 为事务的起始及结束点，可使用二个以上的MySQL Command 视窗来交互观察锁定的状况。<br>注2: 在事务进行当中，只有SELECT … FOR UPDATE 或LOCK IN SHARE MODE 同一笔数据时会等待其它事务结束后才执行，一般SELECT … 则不受此影响。<br>注3: 由于InnoDB 预设为Row-level Lock，数据列的锁定可参考这篇。<br>注4: InnoDB 表单尽量不要使用LOCK TABLES 指令，若情非得已要使用，请先看官方对于InnoDB 使用LOCK TABLES 的说明，以免造成系统经常发生死锁。  </p>
<h2 id="MySQL_SELECT__u2026_FOR_UPDATE__u7684Row_Lock__u4E0ETable_Lock"><a href="#MySQL_SELECT__u2026_FOR_UPDATE__u7684Row_Lock__u4E0ETable_Lock" class="headerlink" title="MySQL SELECT … FOR UPDATE 的Row Lock 与Table Lock"></a>MySQL SELECT … FOR UPDATE 的Row Lock 与Table Lock</h2><blockquote>
<p>   上面介绍过SELECT … FOR UPDATE 的用法，不过锁定(Lock)的数据是判别就得要注意一下了。由于InnoDB 预设是Row-Level Lock，所以只有「明确」的指定主键，MySQL 才会执行Row lock (只锁住被选取的数据) ，否则MySQL 将会执行Table Lock (将整个数据表单给锁住)。</p>
</blockquote>
<p>举个例子:</p>
<p>假设有个表单products ，里面有id 跟name 二个栏位，id 是主键。</p>
<p>例1: (明确指定主键，并且有此数据，row lock)<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE id=&#39;3&#39; FOR UPDATE;</span><br></pre></td></tr></table></figure></p>
<p>例2: (明确指定主键，若查无此数据，无lock)<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE id=&#39;-1&#39; FOR UPDATE;</span><br></pre></td></tr></table></figure></p>
<p>例2: (无主键，table lock)<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE name=&#39;Mouse&#39; FOR UPDATE;</span><br></pre></td></tr></table></figure></p>
<p>例3: (主键不明确，table lock)<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE id&#60;&#62;&#39;3&#39; FOR UPDATE;</span><br></pre></td></tr></table></figure></p>
<p>例4: (主键不明确，table lock)<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE id LIKE &#39;3&#39; FOR UPDATE;</span><br></pre></td></tr></table></figure></p>
<p>注1: FOR UPDATE 仅适用于InnoDB，且必须在事务区块(BEGIN/COMMIT)中才能生效。<br>注2: 要测试锁定的状况，可以利用MySQL 的Command Mode ，开二个视窗来做测试。  </p>
<h2 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h2><p><a href="http://www.cnblogs.com/chenwenbiao/archive/2012/06/06/2537508.html" target="_blank" rel="external">转自 http://www.cnblogs.com/chenwenbiao/archive/2012/06/06/2537508.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="MySQL__u4F7F_u7528SELECT__u2026_FOR_UPDATE__u505A_u4E8B_u52A1_u5199_u5165_u524D_u7684_u786E_u8BA4"><a href="#MySQL__u4F7F_u7528SELEC]]>
    </summary>
    
      <category term="SELECT" scheme="http://sphenginx.github.io/tags/SELECT/"/>
    
      <category term="Transaction" scheme="http://sphenginx.github.io/tags/Transaction/"/>
    
      <category term="UPDATE" scheme="http://sphenginx.github.io/tags/UPDATE/"/>
    
      <category term="mysql" scheme="http://sphenginx.github.io/tags/mysql/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[没有自制力的人有什么资格谈努力]]></title>
    <link href="http://sphenginx.github.io/2016/08/08/do-not-work-hard-without-self-control/"/>
    <id>http://sphenginx.github.io/2016/08/08/do-not-work-hard-without-self-control/</id>
    <published>2016-08-08T01:27:40.000Z</published>
    <updated>2016-08-09T01:45:49.596Z</updated>
    <content type="html"><![CDATA[<h2 id="u4E00"><a href="#u4E00" class="headerlink" title="一"></a>一</h2><p>在周鱼的微博上看到他的一段话 <code>你可以追剧追一晚，只要你可以按时交上论文。你可以有丰富的夜生活，只要第二天你还能精神饱满的做好本职工作。放纵究竟是不是错，取决于你能不能为你的放纵负责。还是那句话，没有自制力的人不足以谈人生。</code></p>
<p>简直一语戳中，微博底下留言的人，无一不在哀嚎：<strong>膝盖中箭。</strong></p>
<p>自制力并不是什么新鲜词，说白了就是能够自觉控制自己的行动和情绪，集中注意力去达成自己原本的目标，而不受其他事情的干扰。</p>
<p>可是说起来容易，做起来真是太难了。</p>
<p>对大多数人来说，论文通常都是在deadline来临时，才匆匆忙忙拼凑完成的，而在这之前，是逍遥地看剧打游戏，约会逛街.</p>
<p>工作也是，今天做不完那就明天再做咯，反正工作永远也做不完，但聊天八卦要跟上、剁手购物不能错过秒杀，就连无效的朋友聚餐打着“社交”的旗号也不能不去……</p>
<p>每天冲击我们的信息太多，要做的事情也太多，我们的时间也被分割成碎片，然后被鸡零狗碎所侵占，自制力一点一点丧失。</p>
<p>我们每天好像做了很多事，但为什么最后又好像什么都没做？</p>
<p>每天好像忙得团团转，焦头烂额，但为什么最后还是顾此失彼？</p>
<p>我们立下一堆目标和计划，最后一个也没完成，我们急吼吼地说要多么努力，我们甚至还曾以为自己很努力，原来不过就是看上去很努力而已，最后的结果是，想要做的事，和本应该完成的事，都没有完成。</p>
<p>丧失自制力的后果是让我们对自己愤怒和质疑:我们有什么资格谈努力？</p>
<h2 id="u4E8C"><a href="#u4E8C" class="headerlink" title="二"></a>二</h2><p>我一个朋友，她的出版资格考试报了三回，可一次也没去，是的，她连考场都没进。</p>
<p>最后她生生从考初级熬到了可以考中级资格（毕业五年可以直接考中级），她无所谓地说：“哎呀，大不了我直接考中级不就得了。”</p>
<p>其实在我看来，她这话无异于自欺欺人，没有个三五年，她中级一样考不下来。</p>
<p>还记得我们一起报名考初级的情景。</p>
<p>她特别豪言壮语地立下学习目标，用多长时间复习《著作权法》，用多长时间学习出版实操知识点……时间规划得特别详细，如实按照这个计划来，备考的时间完全充足，甚至还可以在一轮复习完了后，再进行重点知识二轮复习。</p>
<p>但我们相约一起复习的第一个周末她就缺席了。原因是，她们公司不久后要组织去某著名山庄泡温泉，开季度总结会，她想买一套新的泳衣，顺便去商场逛街，趁着打折买买换季的新衣服。</p>
<p>她打电话邀我作陪，“乔乔，这个礼拜你陪我逛街，下个礼拜我们再开始学习好不好？”</p>
<p>我回她一个微信：“你这个行为就像口口声声喊着要减肥，却大吃大喝一顿，还美其名曰‘没有吃饱怎么有力气减肥呢’？”</p>
<p>让我意外，其实也意料之中的是，第二个周末，第三个周末，她总是有事，最后我只好独自一个人把最初定下的学习计划执行下去。</p>
<p>起初，她还有些负罪感，但次数多了也就轻易地，自我放纵了。</p>
<p>时间好像还有很多，所以眼前的诱惑，相比很久以后的考试来说，总是更有吸引力一些，也更重要一些。甚至，还会偶尔劝诫自己“人生苦短，不如快活”。</p>
<p>到最后，临到考前一个月，她才开始急了，临时抱佛脚各种狂背，可是那些法律条款和实操的内容，真不是一时半会儿就能背下来的。</p>
<p>压力太大，她一焦虑，效率低下，就又没有学习的动力了。最后索性连考场也没去。</p>
<p>是的，自制力差的人，永远都有最后一道护身符：大不了重头再来咯。</p>
<p>第二年，她一个人报考，考前依旧信誓旦旦：“去年没完成的计划，今年誓死也要完成。”</p>
<p>然而，第二年依旧，乃至第三年。</p>
<p>没有自制力的人，往往容易拖延症爆发，总是觉得时间还有，偶尔开个小差做点别的并不影响大局，直到deadline逼近时才乱了阵脚，才意识到自己过高地估计了自己hold住场面的能力。</p>
<p>其实我们没有完成的那些事，并不如我们放弃的那么轻松，它们在我们看来其实很重要，没写完的论文，没做完的工作，没有看完的书，没有认真听的报告，没有背的单词，而我们在开小差的时候，也并不是心无旁骛地快乐，心好像被悬着，我们真的有负罪感，没法好好地玩耍。</p>
<h2 id="u4E09"><a href="#u4E09" class="headerlink" title="三"></a>三</h2><p>真正地有自制力，是一种怎样的体验？<br>　　<br>学生时期，我们身边都有这样的学霸，他好像从来不用做作业，上课也不是埋头苦做笔记，下了课更不会呆在座位上，他们可以跟学渣一起聊热门的电视剧，讨论流行的八卦，他们……好像真的没有认真地学习，但我们永远不知道的是: 他们在家专注地写作业和复习，一个小时的学习效率顶别人两三个小时。自制力强，所以效率高；自制力强，所以学得快，玩儿得也嗨。<br>　　<br>毕业后，职场上我们身边也有这样的同事，他们好像上班也跟你一起聊天八卦，也偶尔偷偷淘宝刷微博，做PPT的时候也一样抱怨，赶不出方案时也一样抓狂，可是，和你不同的是，在最后他们好像总是被上天眷顾了一样，ppt做得比你好看，方案创意比你厉害，销售单子拿的比你多……你气不过，暗自嘟囔“他凭什么？”<br>　　<br>是啊，你刷微博是在看娱乐八卦和搞笑图片，别人是在找创意灵感；你抱怨这不行那不行的时候是在发脾气，别人却是在寻找解决问题的办法；你跟别人闲聊是真的在撩骚，而别人是通过聊天找到对方的销售需求……<br>　　<br><strong>自制力强的人，永远分得清楚主次，拎得清什么是本职，什么是玩乐。Deadline在没有自制力的人那里，是压力；在有自制力的人那里，是动力。这就是本质的区别。</strong></p>
<h2 id="u56DB"><a href="#u56DB" class="headerlink" title="四"></a>四</h2><p>你是不是也有这样的经历：<br>　　<br>家里书架上都摆满了你想看的书，可是一两个月前，你兴冲冲翻开的那本，现在还是停留在最初的几页；<br>　　<br>你下载了背英语单词的App扇贝，你原本是踌躇满志地制订了背考研单词的计划，一天背100个单词，几十天就搞定，可是单词你背了又忘，忘了又背，中间断了N天。<br>　　<br>你办了健身卡说是要去学游泳，可是别人的健身卡都要续费了，你的健身卡套餐却是在不用就要过期了……<br>　　<br>为什么开始的开始，我们本来是兴冲冲要去做的事，到后来总是不了了之地烂尾？<br>　　<br>或许，我们缺乏自制力的原因之一就是，其实你内心深处，就是不在意，不那么想做，所以才会动力缺缺，一直拖延，一旦有什么别的事情干扰，你的专注力就无法维持。<br>　　<br>而什么是努力？吃喝玩乐睡，用不着努力，这些事是本能，是消遣。<br>　　<br>称得上努力的事，都是反本能反人性的：为了完成一个课题，你会起早贪黑；为了做那份你最想做的工作，上下班路上四五个小时你也无所谓；为了看完你想看的书，你会放弃参加无效的社交聚会……<br>　　<br><strong>亦舒曾说过，爱得不够，才借口多多。简直真理，套用过来，你不想做一件事，才会给自己找这样那样的理由。</strong><br>　　<br>所以，当我们在谈努力的时候，请扪心自问一下，你到底有多想做那件事？到底有多想成功？为了做成那件事，你到底能做到怎样的付出和拼命？<br>　　<br>因为没有自制力的人是没有资格谈努力的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4E00"><a href="#u4E00" class="headerlink" title="一"></a>一</h2><p>在周鱼的微博上看到他的一段话 <code>你可以追剧追一晚，只要你可以按时交上论文。你可以有丰富的夜生活，只要第二天你还能精神饱满的]]>
    </summary>
    
      <category term="努力" scheme="http://sphenginx.github.io/tags/%E5%8A%AA%E5%8A%9B/"/>
    
      <category term="自制力" scheme="http://sphenginx.github.io/tags/%E8%87%AA%E5%88%B6%E5%8A%9B/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何用管理的思维，规划好自己的人生？]]></title>
    <link href="http://sphenginx.github.io/2016/07/18/self-management/"/>
    <id>http://sphenginx.github.io/2016/07/18/self-management/</id>
    <published>2016-07-18T10:03:01.000Z</published>
    <updated>2016-07-19T07:35:27.072Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8BB0"><a href="#u524D_u8BB0" class="headerlink" title="前记"></a>前记</h2><p>如果要我选出大学最应该掌握的一项技能，毫无疑问，一定是做规划的能力。</p>
<p>为什么这么说呢？</p>
<p>我在之前的一篇文章里说过，不要以为进入了大学就可以放松了，大学只是另一条起跑线，而且，比高中要严峻得多。</p>
<p>原因很简单：不同于高中，大学里的一切，完全靠自己的主动性和驱动力。优秀的人，早在大一、大二，就已经清楚自己想要什么，开始集中精力往规划好的方向冲刺了。如果你等到大四才开始行动，其实就已经晚了。</p>
<p>举个栗子，有些朋友想进广告公司，但如果你等到毕业才去投简历，你会发现：广告公司根本不要没有经验的人，尤其是国际4A。那么，你不得不先到其他行业曲线救国，或者干脆放弃这个方向——你看，比起大二、大三就在4A里面实习，毕业后顺利成章留下来的，你比别人晚了多少？</p>
<p>再比如，有个朋友想进咨询行业（真事），结果到了临近毕业，才发现：优秀的咨询公司，不但对专业有着非常狭窄的要求（金融、计算机等），最低学历也是硕士，普通本科连面试的可能都没有，怎么办？如果早几年知道这件事，一早就可以转专业了，再不济，也可以提前准备考个研。</p>
<p>所以，为什么要做好规划？<strong>因为，我们人生当中的许多决策和选择，都要点满许多前置技能才会出</strong>现。如果你没有事先做好准备，你要么就只能花更多的时间去弥补，要么就只能像所有平庸的人一样，在那些门槛最低的选择中挑选和徘徊。</p>
<p>更进一步的是，很多时候，我们遇到的许多困境，乃至于使我们的人生变得平庸乏味的罪魁祸首，<strong>其实，都是因为我们活得太过随意。</strong></p>
<p>比如，我经常收到这样的私信：</p>
<ul>
<li><p>「大学学了个不喜欢的专业，一直很抵触，毕业之后也不知道做什么，就这样晃荡了一年，好无奈……」</p>
</li>
<li><p>「是不是我太眼高手低了？一年里换了好几份工作，每一份都待不久，现在很焦虑……」</p>
</li>
<li><p>「我一点都不喜欢现在的工作，但是又没有能力跳出来，每天都很忙，觉得未来的日子好迷茫……」</p>
</li>
</ul>
<p>其实，不满意现状并不可怕，可怕的是我们不知道该往什么方向改变。</p>
<p>这样的后果是什么？就像身在一个巨大的迷宫里，看不见周围的路线，日复一日地活在焦虑和迷茫之中，不断地往左往右试探着迈出步子，到头来却发现兜了一个巨大的圈子。就算能走出去，也是靠着运气，回过头看，更不知道走了多少冤枉路。</p>
<p>所以，每当遇到这种情况，我总会告诉他们，先尽最大的时间和精力，想清楚方向和规划。</p>
<p>在你没有一个清晰的——至少是初步的规划之前，一切的努力都是无意义的。它们只会成为大量的试错成本，成为在迷宫里一次次兜圈子的脚印，徒耗精力。</p>
<p>这篇文章，会结合项目管理的思维，谈谈如何做好人生里面，每一个阶段的规划。</p>
<h2 id="u4E00_u3001_u613F_u666F_uFF1A_u6211_u60F3_u6210_u4E3A_u4EC0_u4E48_u6837_u7684_u4EBA_uFF1F"><a href="#u4E00_u3001_u613F_u666F_uFF1A_u6211_u60F3_u6210_u4E3A_u4EC0_u4E48_u6837_u7684_u4EBA_uFF1F" class="headerlink" title="一、愿景：我想成为什么样的人？"></a>一、愿景：我想成为什么样的人？</h2><p>讲一个故事吧。</p>
<blockquote>
<p>   「我在店里吃早餐，看见有个女人跟店主起了争执。好像是店主少放了一颗蛋，她要求退钱，店主不肯。旁边有个女人，估计是她的朋友，一直在劝解。</p>
<p>   吵着吵着，那个女人突然坐下，捂住脸，哭了出来。</p>
<p>   她朋友吓了一跳，忙不迭地跟她说：不就一个蛋嘛，哭什么，咱们不要就是了。</p>
<p>   她抽泣着说，我不是哭这个，我是伤心，为什么我都30多了，却还要为了一个蛋跟别人吵架？这不是我想要的生活。」</p>
</blockquote>
<p>尽管作者的笔调多少带着一点促狭和调侃，但却给我留下了非常深刻的印象。</p>
<p>有多少人就像这样，曾对生活怀着各种各样的梦想和憧憬，却被现实一次又一次地迎头棒击，磨蚀锐气，最终成为自己以前最讨厌的那种人？</p>
<p>如果你不希望这样，如果你希望能够自己掌控自己的生活，那么，你可以先问自己这个问题：</p>
<p><strong>10年以后，我想成为一个什么样的人？</strong></p>
<p>你是想成为时尚前沿的焦点，出入时装周、酒会；还是想拥有自己的一间小店，一家工作室，享受充实而快节奏的事业；抑或是成为一名旅行美食撰稿人，天天飞往各地寻觅美食；又或者，是想安稳下来，拥有一间不大的房子，享受恬静的家庭生活？</p>
<p>无须进行过多的思考，相信自己的内心，捕捉住第一时间浮现出来的碎片——可能是一些形容词，一个场景，一种氛围，一些物质——将它们写在纸上，作为主干，然后，填充进必要的脉络、骨架，慢慢完善，直至将这种生活状态勾勒完整。</p>
<p>这个过程可能会花上几天，不要急，尽量遵从自己的内心。尽量写得更具体一些。</p>
<p>然后，准备一本空白的笔记本，打开第一页，将它写上去。</p>
<p>它将成为你往后一切努力的方向和根源。</p>
<h2 id="u4E8C_u3001_u95E8_u69DB_uFF1A_u6211_u8BE5_u6EE1_u8DB3_u4EC0_u4E48_u6837_u7684_u6761_u4EF6_uFF1F"><a href="#u4E8C_u3001_u95E8_u69DB_uFF1A_u6211_u8BE5_u6EE1_u8DB3_u4EC0_u4E48_u6837_u7684_u6761_u4EF6_uFF1F" class="headerlink" title="二、门槛：我该满足什么样的条件？"></a>二、门槛：我该满足什么样的条件？</h2><p>第一步的结果，只是帮助我们梳理出了自己想达到的生活状态。需要将它明确下来，进行分解，才能落实到后续的行动之中。</p>
<p>请打开笔记本，在第二页尽可能地罗列出你所知道的、达成目标需要满足的条件。</p>
<p>以开一间咖啡店为例，你需要满足的条件，可能是这样的：（未必准确，只是一个参考）</p>
<ul>
<li><p>一笔至少30万元的启动资金（视城市和地段而定。包括租金、装修以及前几个月的必要开支等）。</p>
</li>
<li><p>咖啡的相关知识。</p>
</li>
<li><p>店铺运营、资金管理、会计等基本商业知识。</p>
</li>
<li><p>市场营销及推广的基本知识。</p>
</li>
<li><p>平面设计、空间设计的基本知识（店面、LOGO设计和店内布局）。</p>
</li>
<li><p>有竞争优势的媒体资源和人脉关系。</p>
</li>
<li><p>稳定可靠的供货渠道。</p>
</li>
<li><p>大量的成熟案例参考资料。</p>
</li>
<li><p>……</p>
</li>
</ul>
<p>这样一来，你需要做什么，就非常清晰了。「能否在10年内开一家咖啡馆」，就变成「能否在10年内满足这些条件」。</p>
<p>不要急于求成，一开始你列出的条件，可能很不完整、不严谨，慢慢来。有疑问的地方，就去网上搜索资料，去知乎提问，或者请教对这方面比较熟悉的人，对这一页反复修改、增补，直到趋于完善为止。</p>
<h2 id="u4E09_u3001_u8DEF_u5F84_uFF1A_u6211_u8BE5_u5982_u4F55_u6EE1_u8DB3_u8FD9_u4E9B_u6761_u4EF6_uFF1F"><a href="#u4E09_u3001_u8DEF_u5F84_uFF1A_u6211_u8BE5_u5982_u4F55_u6EE1_u8DB3_u8FD9_u4E9B_u6761_u4EF6_uFF1F" class="headerlink" title="三、路径：我该如何满足这些条件？"></a>三、路径：我该如何满足这些条件？</h2><p>这是整个规划里面最重要的一步。</p>
<p>第二步列出的条件中，每一个问题，都有不同的解决方法。比如：</p>
<ul>
<li><p>会计和账目管理是一项非常繁琐的工作，你可以自己来，也可以跟朋友合伙、由他来负责这部分，也可以雇佣一位员工帮你分担；</p>
</li>
<li><p>店面设计、LOGO设计，你可以请朋友帮忙，也可以委托给专业的设计公司；</p>
</li>
<li><p>一开始的启动资金，你可以向家里人求助，可以向银行贷款，也可以自己一步步攒齐</p>
</li>
</ul>
<p>诸如此类。</p>
<p>不同的解决方法，会有不同的要求，要根据你的实际情况来处理。</p>
<ul>
<li><p>如果你家境良好，没有太多资金方面的压力，那显然，你就可以挑选一份比较轻松的工作，把省下来的时间和精力，去看市场营销方面的书籍，学习推广和运营知识，甚至到咖啡馆里面打工、积累经验，都可以。</p>
</li>
<li><p>如果你家境一般，打算靠自己攒齐启动资金，那你可能就得选择比较辛苦、加班较多，但收入也相对较高的工作。或者在业余时间接一些外包和私单，平时也多注意开源节流，以攒齐存款为第一优先级。</p>
</li>
<li><p>如果你的朋友里面有管理和财务方面的专业人才，关系也足够好，你就可以把这一块完全交给他，把自己的精力聚集在其他方面。</p>
</li>
<li><p>又或者，如果你打算在推广上面花大力气，那是不是可以选择新媒体相关的行业，积累这方面的经验和人际资源，为将来打好铺垫？</p>
</li>
<li><p>……</p>
</li>
</ul>
<p>翻开笔记本的第三页，把你的这些思考过程，详细地写下来。</p>
<ul>
<li><p>我拥有什么样的资源和优势？</p>
</li>
<li><p>我需要聚焦和关注哪些最核心的条件？</p>
</li>
<li><p>我可以采取什么方法解决它们？</p>
</li>
</ul>
<p>仔细思考这些问题，大量地去查找信息，在这个基础上，提炼出一份概要的「计划」，并对它反复进行打磨。</p>
<p>这一步的意义在于，<strong>只做那些对长远规划有益的事情。</strong></p>
<p>比如，我在之前的文章里提过，不要把时间浪费在低回报的兼职上。但是，如果你的长远目标是开一家咖啡店，那么到咖啡店里兼职有何不可呢？这个时候，它的回报就不是简单的金钱了，而是成为你整个规划必不可少的一环。</p>
<p>再比如，许多人一到周末，要么睡一天，要么逛街、玩游戏，这样没有什么问题，但是，如果你有一个长远的规划和方案，你是一定不会容忍自己这样的。你会去图书馆看书，会去练习技能，会早起去健身。</p>
<p>因为你清楚地知道，按照你的计划，只有这样，才能离你的梦想更近一步。</p>
<h2 id="u56DB_u3001_u91CF_u5316_uFF1A_u6211_u8981_u5B9E_u73B0_u4EC0_u4E48_u8FDB_u5EA6_uFF1F"><a href="#u56DB_u3001_u91CF_u5316_uFF1A_u6211_u8981_u5B9E_u73B0_u4EC0_u4E48_u8FDB_u5EA6_uFF1F" class="headerlink" title="四、量化：我要实现什么进度？"></a>四、量化：我要实现什么进度？</h2><p>为什么有些人制订了计划，却总是得不到落实，有些人却可以一步步朝着计划前进？</p>
<p>很大程度上，是由于计划本身的「有效性」。</p>
<p>什么是有效的计划呢？有一个通用的原则，叫做<strong>SMART原则</strong>。亦即<strong>「具体、可衡量、有可行性、有相关性、有时间期限」</strong>。</p>
<p>刨去可行性和相关性这两个显而易见的原则（目标必须有可能实现、目标必须与整体规划和其他目标相关），可以看出，最核心的部分，就是「量化」。用一句话来概括就是：<strong>我需要在什么时间点，达成什么样的进度？</strong></p>
<p>举个最简单的例子：</p>
<ul>
<li><p>「我要写一部小说」就不是一个计划；</p>
</li>
<li><p>「我要在3个月内完成一部60万字的小说，平均每周不少于5000字。」 就是一个初步的计划；</p>
</li>
<li><p>「我要在半年内完成一部小说，前3个月用于构思和准备素材，后3个月专注写作，平均每周不少于5000字，总字数不少于60万字。发布之后，在1个月内获得100个订阅，并且总体评价中好评需要超过60%。」 就是一个很完善的计划了。</p>
</li>
</ul>
<p>同样，「我要学习市场营销知识」只是一句空洞的话，如果要使之成为计划，可以这样设置：</p>
<blockquote>
<p>   「我要在1年内读完20本市场营销相关的专业书籍；每晚至少读30页书，学习1-3个知识点；每周至少写一篇不少于3000字的学习心得。」</p>
</blockquote>
<p>这样，就是一份有效、可执行的计划了。</p>
<p>请在笔记本上，翻开下一页，把确定下来的计划一条条列上去。</p>
<p>如果你有兴趣，可以做一份表格：横轴是每一项计划，纵轴是每一天的日期，再标出相应的进度和时间点。然后，每一天按照计划去「打卡」：今天读了25页书，就写上25；今天背了30个单词，就写上30。诸如此类。让自己对自己的执行情况、进度实现情况都能一目了然。</p>
<p>原则上，计划确立之后，不要频繁地去改动它。所以，一开始制订的时候，要根据实际情况控制好强度，最好设置在「需要付出一定努力就能够达到」的程度。这样才能对自己起到鞭策和激励的作用。</p>
<h2 id="u4E94_u3001_u53CD_u9988_uFF1A_u6211_u7684_u89C4_u5212_u5408_u7406_u5417_uFF1F"><a href="#u4E94_u3001_u53CD_u9988_uFF1A_u6211_u7684_u89C4_u5212_u5408_u7406_u5417_uFF1F" class="headerlink" title="五、反馈：我的规划合理吗？"></a>五、反馈：我的规划合理吗？</h2><p>人毕竟不是全知全能的，不可能一蹴而就。所以，在按照计划执行的时候，做好每一天的记录。试行一段时间之后，再根据这段时间的实际情况，对下一段时间的计划进行调整。</p>
<p>一般来说，1-3个月重新制订一次计划比较常见。以背单词为例，如果第一个月你给自己规定的计划是每天50个单词，1个月之后，你发现没有一天能达到目标，最多也不过30个单词，那么第二个月你就可以将目标设置为30，类似这样。</p>
<p>同样，在实行前文所说的长远规划时，如果你发现规划有误，或者有更好的方式可以满足条件，都可以及时对规划进行修改和调整。</p>
<p>末了，再多说几点。</p>
<p>首先，这是一个思维方式，亦即<strong>「规划-列出条件-找出方案-分解量化-反馈检查」</strong>。你可以把它应用到生活中的方方面面。比如，10年能不能变成1年、3年、5年，甚至半年？当然都可以。按照你想解决的实际问题来调整就好。</p>
<p>然后，如果你不知道开咖啡店需要多少钱，需要学习什么知识，怎么办？你可以在网上搜索资料，实在找不到的，去问身边的人（或者通过他们去问他们的朋友），去知乎和在行上找专业人士请教，或者，直接找一家咖啡店，跟老板搞好关系，跟他闲聊，都可以。获得信息的方法无穷无尽，不要止步于这个障碍上。</p>
<p>最后，讲个故事，给大家一点信心吧。</p>
<p>我有个朋友，大学的时候，每天回到宿舍就是玩游戏，周末也一直宅着。大四的时候，他去了一家游戏公司实习，做了两个月就辞职了。</p>
<p>「我不喜欢那种环境。」他说。「团队，同事，办公室，每天做的事情，我都不喜欢。太混乱，太low。」</p>
<p>后来呢？他回家休息了两年，学英语，考雅思，两年后，考进英国某排名前五的大学，读了个管理学硕士。回国之后，参加某跨国IT咨询公司的面试，在一片计算机专业的海归硕士和专业人士之中杀出重围，顺利拿到了助理顾问的职位。现在已经是某个team的leader。</p>
<p><strong>种一棵树最好的时间是十年前，其次就是现在。</strong></p>
<p>本文转自知乎专栏<a href="https://zhuanlan.zhihu.com/p/21627399" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21627399</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8BB0"><a href="#u524D_u8BB0" class="headerlink" title="前记"></a>前记</h2><p>如果要我选出大学最应该掌握的一项技能，毫无疑问，一定是做规划的能力。</p>
<p>为什么这么说呢？</]]>
    </summary>
    
      <category term="plan" scheme="http://sphenginx.github.io/tags/plan/"/>
    
      <category term="管理" scheme="http://sphenginx.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 底层的运行机制与原理]]></title>
    <link href="http://sphenginx.github.io/2016/07/11/php-theory/"/>
    <id>http://sphenginx.github.io/2016/07/11/php-theory/</id>
    <published>2016-07-11T01:27:40.000Z</published>
    <updated>2016-07-12T03:20:46.147Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>PHP说简单，但是要精通也不是一件简单的事。我们除了会使用之外，还得知道它底层的工作原理。</p>
<p>PHP是一种适用于web开发的动态语言。具体点说，就是一个用C语言实现包含大量组件的软件框架。更狭义点看，可以把它认为是一个强大的UI框架。</p>
<p>了解PHP底层实现的目的是什么？动态语言要像用好首先得了解它，内存管理、框架模型值得我们借鉴，通过扩展开发实现更多更强大的功能，优化我们程序的性能。</p>
<h2 id="PHP_u7684_u8BBE_u8BA1_u7406_u5FF5_u53CA_u7279_u70B9"><a href="#PHP_u7684_u8BBE_u8BA1_u7406_u5FF5_u53CA_u7279_u70B9" class="headerlink" title="PHP的设计理念及特点"></a>PHP的设计理念及特点</h2><ul>
<li>多进程模型：由于PHP是多进程模型，不同请求间互不干涉，这样保证了一个请求挂掉不会对全盘服务造成影响，当然，随着时代发展，PHP也早已支持多线程模型。</li>
<li>弱类型语言：和C/C++、Java、C#等语言不同，PHP是一门弱类型语言。一个变量的类型并不是一开始就确定不变，运行中才会确定并可能发生隐式或显式的类型转换，这种机制的灵活性在web开发中非常方便、高效，具体会在后面PHP变量中详述。</li>
<li>引擎(Zend)+组件(ext)的模式降低内部耦合。</li>
<li>中间层(sapi)隔绝web server和PHP。</li>
<li>语法简单灵活，没有太多规范。缺点导致风格混杂，但再差的程序员也不会写出太离谱危害全局的程序。</li>
</ul>
<h2 id="PHP_u7684_u56DB_u5C42_u4F53_u7CFB"><a href="#PHP_u7684_u56DB_u5C42_u4F53_u7CFB" class="headerlink" title="PHP的四层体系"></a>PHP的四层体系</h2><p>PHP的核心架构如下图：</p>
<p><img src="http://sphenginx.github.io/images/php/theory.jpg" alt="PHP 核心架构图"></p>
<p>从图上可以看出，PHP从下到上是一个4层体系：</p>
<ul>
<li>Zend引擎：Zend整体用纯C实现，是PHP的内核部分，它将PHP代码翻译（词法、语法解析等一系列编译过程）为可执行opcode的处理并实现相应的处理方法、实现了基本的数据结构（如hashtable、oo）、内存分配及管理、提供了相应的api方法供外部调用，是一切的核心，所有的外围功能均围绕Zend实现。</li>
<li>Extensions：围绕着Zend引擎，extensions通过组件式的方式提供各种基础服务，我们常见的各种内置函数（如array系列）、标准库等都是通过extension来实现，用户也可以根据需要实现自己的extension以达到功能扩展、性能优化等目的（如贴吧正在使用的PHP中间层、富文本解析就是extension的典型应用）。</li>
<li>Sapi：Sapi全称是Server Application Programming Interface，也就是服务端应用编程接口，Sapi通过一系列钩子函数，使得PHP可以和外围交互数据，这是PHP非常优雅和成功的一个设计，通过sapi成功的将PHP本身和上层应用解耦隔离，PHP可以不再考虑如何针对不同应用进行兼容，而应用本身也可以针对自己的特点实现不同的处理方式。</li>
<li>上层应用：这就是我们平时编写的PHP程序，通过不同的sapi方式得到各种各样的应用模式，如通过webserver实现web应用、在命令行下以脚本方式运行等等。</li>
</ul>
<p>如果PHP是一辆车，那么车的框架就是PHP本身，Zend是车的引擎（发动机），Ext下面的各种组件就是车的轮子，Sapi可以看做是公路，车可以跑在不同类型的公路上，而一次PHP程序的执行就是汽车跑在公路上。因此，我们需要：性能优异的引擎+合适的车轮+正确的跑道。</p>
<h2 id="Sapi"><a href="#Sapi" class="headerlink" title="Sapi"></a>Sapi</h2><p>如前所述，Sapi通过通过一系列的接口，使得外部应用可以和PHP交换数据并可以根据不同应用特点实现特定的处理方法，我们常见的一些sapi有：</p>
<ul>
<li>apache2handler：这是以apache作为webserver，采用mod_PHP模式运行时候的处理方式，也是现在应用最广泛的一种。</li>
<li>cgi：这是webserver和PHP直接的另一种交互方式，也就是大名鼎鼎的fastcgi协议，在最近今年fastcgi+PHP得到越来越多的应用，也是异步webserver所唯一支持的方式。</li>
<li>cli：命令行调用的应用模式</li>
</ul>
<h2 id="PHP_u7684_u6267_u884C_u6D41_u7A0B_26amp_3Bopcode"><a href="#PHP_u7684_u6267_u884C_u6D41_u7A0B_26amp_3Bopcode" class="headerlink" title="PHP的执行流程&amp;opcode"></a>PHP的执行流程&amp;opcode</h2><p>我们先来看看PHP代码的执行所经过的流程。</p>
<p><img src="http://sphenginx.github.io/images/php/opcode.jpg" alt="opcode"></p>
<p>从图上可以看到，PHP实现了一个典型的动态语言执行过程：拿到一段代码后，经过词法解析、语法解析等阶段后，源程序会被翻译成一个个指令(opcodes)，然后ZEND虚拟机顺次执行这些指令完成操作。PHP本身是用C实现的，因此最终调用的也都是C的函数，实际上，我们可以把PHP看做是一个C开发的软件。</p>
<p>PHP的执行的核心是翻译出来的一条一条指令，也即opcode。</p>
<p>Opcode是PHP程序执行的最基本单位。一个opcode由两个参数(op1,op2)、返回值和处理函数组成。PHP程序最终被翻译为一组opcode处理函数的顺序执行。</p>
<p>常见的几个处理函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZEND_ASSIGN_SPEC_CV_CV_HANDLER : 变量分配 （<span class="variable">$a</span>=<span class="variable">$b</span>）</span><br><span class="line">ZEND_DO_FCALL_BY_NAME_SPEC_HANDLER：函数调用</span><br><span class="line">ZEND_CONCAT_SPEC_CV_CV_HANDLER：字符串拼接 <span class="variable">$a</span>.<span class="variable">$b</span></span><br><span class="line">ZEND_ADD_SPEC_CV_CONST_HANDLER: 加法运算 <span class="variable">$a</span>+<span class="number">2</span></span><br><span class="line">ZEND_IS_EQUAL_SPEC_CV_CONST：判断相等 <span class="variable">$a</span>==<span class="number">1</span></span><br><span class="line">ZEND_IS_IDENTICAL_SPEC_CV_CONST：判断相等 <span class="variable">$a</span>===<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h2 id="HashTable__u2014__u6838_u5FC3_u6570_u636E_u7ED3_u6784"><a href="#HashTable__u2014__u6838_u5FC3_u6570_u636E_u7ED3_u6784" class="headerlink" title="HashTable — 核心数据结构"></a>HashTable — 核心数据结构</h2><p>HashTable是zend的核心数据结构，在PHP里面几乎并用来实现所有常见功能，我们知道的PHP数组即是其典型应用，此外，在zend内部，如函数符号表、全局变量等也都是基于hash table来实现。</p>
<p>PHP的hash table具有如下特点：</p>
<ul>
<li>支持典型的key-&gt;value查询</li>
<li>可以当做数组使用</li>
<li>添加、删除节点是O（1）复杂度</li>
<li>key支持混合类型：同时存在关联数组合索引数组</li>
<li>Value支持混合类型：array (“string”,2332)</li>
<li>支持线性遍历：如foreach</li>
</ul>
<p>Zend hash table实现了典型的hash表散列结构，同时通过附加一个双向链表，提供了正向、反向遍历数组的功能。其结构如下图：<br><img src="http://sphenginx.github.io/images/php/hashtable.jpg" alt="hashTable"></p>
<ul>
<li>可以看到，在hash table中既有key-&gt;value形式的散列结构，也有双向链表模式，使得它能够非常方便的支持快速查找和线性遍历。<br>散列结构：Zend的散列结构是典型的hash表模型，通过链表的方式来解决冲突。需要注意的是zend的hash table是一个自增长的数据结构，当hash表数目满了之后，其本身会动态以2倍的方式扩容并重新元素位置。初始大小均为8。另外，在进行key-&gt;value快速查找时候，zend本身还做了一些优化，通过空间换时间的方式加快速度。比如在每个元素中都会用一个变量nKeyLength标识key的长度以作快速判定。</li>
<li>双向链表：Zend hash table通过一个链表结构，实现了元素的线性遍历。理论上，做遍历使用单向链表就够了，之所以使用双向链表，主要目的是为了快速删除，避免遍历。Zend hash table是一种复合型的结构，作为数组使用时，即支持常见的关联数组也能够作为顺序索引数字来使用，甚至允许2者的混合。</li>
<li><p>PHP关联数组：关联数组是典型的hash_table应用。一次查询过程经过如下几步（从代码可以看出，这是一个常见的hash查询过程并增加一些快速判定加速查找。）：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getKeyHashValue h;</span><br><span class="line">index = n &amp; nTableMask;</span><br><span class="line">Bucket *p = arBucket[index];</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">	<span class="keyword">if</span> ((p-&gt;h == h) &amp;&amp; (p-&gt;nKeyLength == nKeyLength)) &#123;</span><br><span class="line">		<span class="keyword">RETURN</span> p-&gt;data;   </span><br><span class="line">	&#125;</span><br><span class="line">	p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">RETURN</span> FALTURE;</span><br></pre></td></tr></table></figure>
</li>
<li><p>PHP索引数组：索引数组就是我们常见的数组，通过下标访问。例如 \$arr[0]，Zend HashTable内部进行了归一化处理，对于index类型key同样分配了hash值和nKeyLength(为0)。内部成员变量nNextFreeElement就是当前分配到的最大id，每次push后自动加一。正是这种归一化处理，PHP才能够实现关联和非关联的混合。由于push操作的特殊性，索引key在PHP数组中先后顺序并不是通过下标大小来决定，而是由push的先后决定。例如 \$arr[1] = 2; \$arr[2] = 3;对于double类型的key，Zend HashTable会将他当做索引key处理。</p>
</li>
</ul>
<h2 id="PHP_u53D8_u91CF"><a href="#PHP_u53D8_u91CF" class="headerlink" title="PHP变量"></a>PHP变量</h2><p>PHP是一门弱类型语言，本身不严格区分变量的类型。PHP在变量申明的时候不需要指定类型。PHP在程序运行期间可能进行变量类型的隐示转换。和其他强类型语言一样，程序中也可以进行显示的类型转换。PHP变量可以分为简单类型(int、string、bool)、集合类型(array resource object)和常量(const)。以上所有的变量在底层都是同一种结构 zval。</p>
<p>Zval是zend中另一个非常重要的数据结构，用来标识并实现PHP变量，其数据结构如下：<br><img src="http://sphenginx.github.io/images/php/zval.jpg" alt="zval"></p>
<p>Zval主要由三部分组成：</p>
<ul>
<li>type：指定了变量所述的类型（整数、字符串、数组等）</li>
<li>refcount&amp;is_ref：用来实现引用计数(后面具体介绍)</li>
<li>value：核心部分，存储了变量的实际数据</li>
</ul>
<p>Zvalue是用来保存一个变量的实际数据。因为要存储多种类型，所以zvalue是一个union，也由此实现了弱类型。</p>
<p>PHP变量类型和其实际存储对应关系如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IS_LONG   -&gt; lvalue</span><br><span class="line">IS_DOUBLE -&gt; dvalue</span><br><span class="line">IS_ARRAY  -&gt; ht</span><br><span class="line">IS_STRING -&gt; str</span><br><span class="line">IS_RESOURCE -&gt; lvalue</span><br></pre></td></tr></table></figure></p>
<p>引用计数在内存回收、字符串操作等地方使用非常广泛。PHP中的变量就是引用计数的典型应用。Zval的引用计数通过成员变量is_ref和ref_count实现，通过引用计数，多个变量可以共享同一份数据。避免频繁拷贝带来的大量消耗。</p>
<p>在进行赋值操作时，zend将变量指向相同的zval同时ref_count++，在unset操作时，对应的ref_count-1。只有ref_count减为0时才会真正执行销毁操作。如果是引用赋值，则zend会修改is_ref为1。</p>
<p>PHP变量通过引用计数实现变量共享数据，那如果改变其中一个变量值呢？当试图写入一个变量时，Zend若发现该变量指向的zval被多个变量共享，则为其复制一份ref_count为1的zval，并递减原zval的refcount，这个过程称为“zval分离”。可见，只有在有写操作发生时zend才进行拷贝操作，因此也叫copy-on-write(写时拷贝)</p>
<p>对于引用型变量，其要求和非引用型相反，引用赋值的变量间必须是捆绑的，修改一个变量就修改了所有捆绑变量。</p>
<p>整数、浮点数是PHP中的基础类型之一，也是一个简单型变量。对于整数和浮点数，在zvalue中直接存储对应的值。其类型分别是long和double。</p>
<p>从zvalue结构中可以看出，对于整数类型，和c等强类型语言不同，PHP是不区分int、unsigned int、long、long long等类型的，对它来说，整数只有一种类型也就是long。由此，可以看出，在PHP里面，整数的取值范围是由编译器位数来决定而不是固定不变的。</p>
<p>对于浮点数，类似整数，它也不区分float和double而是统一只有double一种类型。</p>
<p>在PHP中，如果整数范围越界了怎么办？这种情况下会自动转换为double类型，这个一定要小心，很多trick都是由此产生。</p>
<p>和整数一样，字符变量也是PHP中的基础类型和简单型变量。通过zvalue结构可以看出，在PHP中，字符串是由由指向实际数据的指针和长度结构体组成，这点和c++中的string比较类似。由于通过一个实际变量表示长度，和c不同，它的字符串可以是2进制数据（包含\0），同时在PHP中，求字符串长度strlen是O(1)操作。</p>
<p>在新增、修改、追加字符串操作时，PHP都会重新分配内存生成新的字符串。最后，出于安全考虑，PHP在生成一个字符串时末尾仍然会添加\0</p>
<p>常见的字符串拼接方式及速度比较：</p>
<p>假设有如下4个变量：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$strA</span> = <span class="string">'123'</span>; </span><br><span class="line"><span class="variable">$strB</span> = <span class="string">'456'</span>; </span><br><span class="line"><span class="variable">$intA</span> = <span class="number">123</span>; </span><br><span class="line"><span class="variable">$intB</span> = <span class="number">456</span>;</span><br></pre></td></tr></table></figure></p>
<p>现在对如下的几种字符串拼接方式做一个比较和说明：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="variable">$strA</span>.<span class="variable">$strB</span>和<span class="variable">$res</span> = “<span class="variable">$strA</span><span class="variable">$strB</span>”</span><br><span class="line">这种情况下，zend会重新malloc一块内存并进行相应处理，其速度一般</span><br><span class="line"><span class="variable">$strA</span> = <span class="variable">$strA</span>.<span class="variable">$strB</span></span><br><span class="line">这种是速度最快的，zend会在当前strA基础上直接relloc，避免重复拷贝</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$intA</span>.<span class="variable">$intB</span></span><br><span class="line">这种速度较慢，因为需要做隐式的格式转换，实际编写程序中也应该注意尽量避免</span><br><span class="line"><span class="variable">$strA</span> = sprintf (“%s%s”,<span class="variable">$strA</span>.<span class="variable">$strB</span>);</span><br><span class="line">这会是最慢的一种方式，因为sprintf在PHP中并不是一个语言结构，本身对于格式识别和处理就需要耗费比较多时间，另外本身机制也是malloc。不过sprintf的方式最具可读性，实际中可以根据具体情况灵活选择。</span><br></pre></td></tr></table></figure></p>
<p>PHP的数组通过Zend HashTable来天然实现。</p>
<p>foreach操作如何实现？对一个数组的foreach就是通过遍历hashtable中的双向链表完成。对于索引数组，通过foreach遍历效率比for高很多，省去了key-&gt;value的查找。count操作直接调用HashTable-&gt;NumOfElements，O(1)操作。对于’123’这样的字符串，zend会转换为其整数形式。\$arr[‘123’]和\$arr[123]是等价的</p>
<p>资源类型变量是PHP中最复杂的一种变量，也是一种复合型结构。</p>
<p>PHP的zval可以表示广泛的数据类型，但是对于自定义的数据类型却很难充分描述。由于没有有效的方式描绘这些复合结构，因此也没有办法对它们使用传统的操作符。要解决这个问题，只需要通过一个本质上任意的标识符（label）引用指针，这种方式被称为资源。</p>
<p>在zval中，对于resource，lval作为指针来使用，直接指向资源所在的地址。Resource可以是任意的复合结构，我们熟悉的mysqli、fsock、memcached等都是资源。</p>
<p>如何使用资源：</p>
<ul>
<li>注册：对于一个自定义的数据类型，要想将它作为资源。首先需要进行注册，zend会为它分配全局唯一标示。</li>
<li>获取一个资源变量：对于资源，zend维护了一个id-&gt;实际数据的hash_tale。对于一个resource，在zval中只记录了它的id。fetch的时候通过id在hash_table中找到具体的值返回。</li>
<li>资源销毁：资源的数据类型是多种多样的。Zend本身没有办法销毁它。因此需要用户在注册资源的时候提供销毁函数。当unset资源时，zend调用相应的函数完成析构。同时从全局资源表中删除它。</li>
</ul>
<p>资源可以长期驻留，不只是在所有引用它的变量超出作用域之后，甚至是在一个请求结束了并且新的请求产生之后。这些资源称为持久资源，因为它们贯通SAPI的整个生命周期持续存在，除非特意销毁。很多情况下，持久化资源可以在一定程度上提高性能。比如我们常见的mysql_pconnect ,持久化资源通过pemalloc分配内存，这样在请求结束的时候不会释放。 对zend来说，对两者本身并不区分。</p>
<p>PHP中的局部变量和全局变量是如何实现的？对于一个请求，任意时刻PHP都可以看到两个符号表(symbol_table和active_symbol_table)，其中前者用来维护全局变量。后者是一个指针，指向当前活动的变量符号表，当程序进入到某个函数中时，zend就会为它分配一个符号表x同时将active_symbol_table指向a。通过这样的方式实现全局、局部变量的区分。</p>
<p>获取变量值：PHP的符号表是通过hash_table实现的，对于每个变量都分配唯一标识，获取的时候根据标识从表中找到相应zval返回。</p>
<p>函数中使用全局变量：在函数中，我们可以通过显式申明global来使用全局变量。在active_symbol_table中创建symbol_table中同名变量的引用，如果symbol_table中没有同名变量则会先创建。</p>
<h2 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h2><p>原文转自：<a href="http://www.nowamagic.net/librarys/veda/detail/102" target="_blank" rel="external">http://www.nowamagic.net/librarys/veda/detail/102</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>PHP说简单，但是要精通也不是一件简单的事。我们除了会使用之外，还得知道它底层的工作原理。</p>
<p]]>
    </summary>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="theory" scheme="http://sphenginx.github.io/tags/theory/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为了项目上线而加班，真有必要吗？]]></title>
    <link href="http://sphenginx.github.io/2016/05/05/why-overtime-doesnt-work/"/>
    <id>http://sphenginx.github.io/2016/05/05/why-overtime-doesnt-work/</id>
    <published>2016-05-05T07:05:01.000Z</published>
    <updated>2016-05-05T06:54:08.569Z</updated>
    <content type="html"><![CDATA[<p><img src="http://sphenginx.github.io/images/overtime.jpg" alt="I has to work overtime again today"></p>
<p>大家都知道：软件项目的加班可能真是有百害而无一利，但总还有些时候，有些人有侥幸心理，或是现实情况实在无法让步，比如项目必须在某个日期上线； 在这些情况下，应该跟团队沟通些什么？Quora资深软件工程师Edmond Lau在自己的一篇博客中，给出了自己的看法。这篇博客名为<a href="http://www.theeffectiveengineer.com/blog/why-overtime-doesnt-work" target="_blank" rel="external">《为了满足项目上线日期要求，我该怎么告诉我的团队工作更多时间？》</a>。</p>
<p>文章一开始，Edmond指出：</p>
<blockquote>
<p>在试图告诉团队要加班之前，一定要确保一点：为了保证上线日期，你有一个切实可行的计划。否则，从长远来看的最佳策略是：根据团队当前开发能力和效率，重新定义要上线的功能；或者将截止日期重新调整为更现实的时间。</p>
</blockquote>
<p>接下来，Edmond列举了自己的亲身经验。他曾参与过两个持续多月大型项目，而且团队成员都是高手，专注投入在这两个项目上。为了在某个日期之前上线，工程经理要求团队加班工作，每周60到70个小时。可是项目最后还是没有按时完成。Edmond这样回顾项目的后果：</p>
<blockquote>
<p>这样的方式让一些团队成员筋疲力尽，有些人后来离开了，其他人用了很久才恢复过来。这两个项目的情况都无法判断：加班是否真能加快进度，加班的决策在当时也许很合理，但是长远来看，两只团队都深受其害。我们从这两个项目中学到惨痛的教训：<code>不管你多么希望项目在某个日期前完成，都对它能否做到这一点毫无帮助。不要将积极思考与现实的乐观主义混为一谈。</code></p>
</blockquote>
<p>Edmond列举了几个加班无助于项目尽快交付的原因：</p>
<ul>
<li>工作更多时间，每小时的效率将会降低。</li>
</ul>
<blockquote>
<p>如果你的团队已经习惯了每周40小时工作的生活节奏，而且一年来都是如此，那么很可能他们加班的效率会低于平常，甚至可能产生负面影响。疲累和睡眠减少会伤害认知功能，而且降低工作质量。</p>
</blockquote>
<p>他还列举了150年以来的研究文献，证明这一点，而且有些文献甚至说明：如果加班过多，</p>
<blockquote>
<p>有问题的工作累计带来的负面影响，会导致项目完成日期延迟，甚至比同样的团队按照每周40小时的工作节奏完成得还要晚。</p>
</blockquote>
<ul>
<li>很可能你现在落后的时间进度比你以为的还要多。</li>
</ul>
<blockquote>
<p>在工程中，做出准确的项目估算非常难以做到。进度已经晚了，说明上个月的工作就估算得不够。所以，可能过去的工作估算少了，更有可能的是：整个项目都估算少了，包括剩下几个月的工作。</p>
<p>我们在项目开始时估算得要比项目结束时准确，因为开始时的工作重点放在可以深入理解的工作之上；到结束时，团队常常低估整合测试用去的时间&gt; ，而且每个没有预料到的问题都会让进度延后一周甚至更多。这些效应叠加起来会产生更多延迟。</p>
</blockquote>
<p>他引用了《人月神话》里面的话：</p>
<blockquote>
<p>特别是没有为系统测试留出足够时间，这会带来灾难性后果。因为延迟是在项目日程结束时来临的，除非交付日期快到了，没人会意识到进度上的问题。</p>
</blockquote>
<ul>
<li>额外的工作时间会让团队精疲力竭。<br>Edmond引用了《人件》中的一个症状：“undertime”，也就是说：跟随加班而来的，常常是员工为了要补偿生活方面的损失，而在工作中耗费时间去做与工作无关之事。</li>
</ul>
<blockquote>
<p>我们的经验指出：额外工作时间的积极影响被大大夸大了，而其负面影响却从未有人考量。负面影响可能十分严重：错误、倦怠、失误不断增多、补偿用的“undertime”等等。</p>
</blockquote>
<ul>
<li><p>额外的工作时间会伤害团队士气。<br>在Edmond看来，加班之前，可能团队每个人都有自己的方式来完成每周40小时的工作，而且还能保证团队的凝聚力。一旦要加班，可能某些人就要多完成一些不能多加班的人要做的事情，这会影响彼此之间的关系，以前开心的团队，现在可能就不开心了。</p>
</li>
<li><p>管理向截止日期的冲刺，需要耗费更多管理开销。</p>
</li>
</ul>
<blockquote>
<p>为了管理额外工作而举行更多站立会议和其他会议，这很常见，因为你希望团队要彼此沟通，保证每个人都在做正确的事情。然而，这种额外的沟通开销常常不会放在工作估算中。</p>
</blockquote>
<ul>
<li>向截止日期的冲刺，会刺激产生更多技术债务。<br>Edmond认为：为了赶进度而加班，几乎不可避免地会令得团队找捷径。而且在面临更多项目压力的情况下，这些技术债务很可能越积越多，将来一定要付出更多成本偿还。</li>
</ul>
<p>不过，总有些现实情况不可避免，真到那时候，Edmond建议在沟通时要强调一下因素。</p>
<ul>
<li>要理解为什么进度落了这么远，找出根本原因，还要与团队沟通。</li>
</ul>
<blockquote>
<p>没赶上进度，是因为人们偷懒，还是因为项目要比想象的复杂，要占用更多时间？如果不能理解根本原因，也就不能有信心同样的问题不会在未来几个月出现。</p>
</blockquote>
<ul>
<li>向团队说明更可行的项目计划和时间进度，说明为什么要加班才能真正赶上上线日期，还要说明怎么做。</li>
</ul>
<blockquote>
<p>仅仅告诉团队他们落后了还不够，如果不能得出更详细、更明确的计划达成目标，这就是一个警告信号，说明你比你以为的情况更落后。</p>
</blockquote>
<ul>
<li>确保团队每个人都能理解、认同你的新进度安排。</li>
</ul>
<blockquote>
<p>如果关键成员不相信你的时间表可行，那就得好好想想：你可能无法在新的指定日期前完成你想完成的工作。要是无法做到所有人都认可，那么可能只有某些人认同加班，除了团队中会有不公平的感觉之外，可能你还是无法达成最后完成日期。</p>
</blockquote>
<ul>
<li>重点放在项目、团队或是组织的整体工作目标上，说明为什么按时上线如此重要。</li>
</ul>
<blockquote>
<p>如果你无法把团队融合在一起，这就是另一个警讯：说明不是所有人都像你这么有动力去加班。</p>
</blockquote>
<p>最后，Edmond指出：</p>
<blockquote>
<p>如果，在接下来冲刺的两个月时间里，你发现实际进度比修正后的还要延迟，那就准备放弃这个冲刺吧。接受现实，知道你可能是在马拉松的半程发起了冲刺，而终点线比你想的要远得多。不再可能让团队更努力去解决问题了。减少损失，不妨想想怎么制订一个应急计划应对后续问题。</p>
<p>错过截止日期很糟糕，但要是错过了截止日期，而且让团队精疲力尽，而且没有应急计划，这就更糟糕了。</p>
</blockquote>
<p>译文出处: <a href="http://www.infoq.com/cn/news/2013/08/how-to-tell-team-to-overtime" target="_blank" rel="external">InfoQ</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://sphenginx.github.io/images/overtime.jpg" alt="I has to work overtime again today"></p>
<p>大家都知道：软件项目的加班可能真是有百害而无一利，但总还有些]]>
    </summary>
    
      <category term="上线" scheme="http://sphenginx.github.io/tags/%E4%B8%8A%E7%BA%BF/"/>
    
      <category term="加班" scheme="http://sphenginx.github.io/tags/%E5%8A%A0%E7%8F%AD/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编程能力层次模型]]></title>
    <link href="http://sphenginx.github.io/2016/01/05/code-ability/"/>
    <id>http://sphenginx.github.io/2016/01/05/code-ability/</id>
    <published>2016-01-05T07:03:01.000Z</published>
    <updated>2016-01-10T02:32:41.614Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>程序员的编程技能随着经验的积累，会逐步提高。我认为编程能力可以分为一些层次。<br>下面通过两个维度展开编程能力层次模型的讨论。<br>一个维度是编程技能层次，另一个维度是领域知识层次。  </p>
<h2 id="u7F16_u7A0B_u6280_u80FD_u5C42_u6B21"><a href="#u7F16_u7A0B_u6280_u80FD_u5C42_u6B21" class="headerlink" title="编程技能层次"></a>编程技能层次</h2><p>编程技能层次，指的程序员设计和编写程序的能力。这是程序员的根本。</p>
<h3 id="0_u6BB5_u2014_u975E_u7A0B_u5E8F_u5458_uFF1A"><a href="#0_u6BB5_u2014_u975E_u7A0B_u5E8F_u5458_uFF1A" class="headerlink" title="0段—非程序员："></a>0段—非程序员：</h3><p>初学编程者，遇到问题，完全是懵懵懂懂，不知道该怎么编程解决问题。也就是说，还是门外汉，还不能称之为“程序员”。计算机在他面前还是一个神秘的黑匣子。</p>
<h3 id="1_u6BB5_u2014_u57FA_u7840_u7A0B_u5E8F_u5458_uFF1A"><a href="#1_u6BB5_u2014_u57FA_u7840_u7A0B_u5E8F_u5458_uFF1A" class="headerlink" title="1段—基础程序员："></a>1段—基础程序员：</h3><p>学习过一段时间编程后，接到任务，可以编写程序完成任务。<br>编写出来的代码，正常情况下是能够工作的，但在实际运行中，碰到一些特殊条件就会出现各类BUG。也就是说，具备了开发Demo软件的能力，但开发的软件真正交付给客户使用，恐怕会被客户骂死。<br>程序员程序是写好了，但到底为什么它有时能正常工作，有时又不行，程序员自己也不知道。<br>运行中遇到了bug，或者需求改变，需要修改代码或者添加代码，很快程序就变得结构混乱，代码膨胀，bug丛生。很快，就连最初的开发者自己也不愿意接手维护这个程序了。  </p>
<h3 id="2_u6BB5_u2014_u6570_u636E_u7ED3_u6784_uFF1A"><a href="#2_u6BB5_u2014_u6570_u636E_u7ED3_u6784_uFF1A" class="headerlink" title="2段—数据结构："></a>2段—数据结构：</h3><p>经过一段时间的编程实践后，程序员会认识到“数据结构+算法=程序”这一古训的含义。他们会使用算法来解决问题。进而，他们会认识到，算法本质上是依附于数据结构的，好的数据结构一旦设计出来，那么好的算法也会应运而生。<br>设计错误的数据结构，不可能生长出好的算法。<br>记得某一位外国先贤曾经说过：“给我看你的数据结构！”  </p>
<h3 id="3_u6BB5_u2014_u9762_u5411_u5BF9_u8C61_uFF1A"><a href="#3_u6BB5_u2014_u9762_u5411_u5BF9_u8C61_uFF1A" class="headerlink" title="3段—面向对象："></a>3段—面向对象：</h3><p>再之后，程序员就会领略面向对象程序设计的强大威力。大多数现代编程语言都是支持面向对象的。但并不是说，你使用面向对象编程语言编程，你用上了类，甚至继承了类，你就是在写面向对象的代码了。<br>我曾经见过很多用Java,Python,Ruby写的面向过程的代码。<br>只有你掌握了接口，掌握了多态，掌握了类和类，对象和对象之间的关系，你才真正掌握了面向对象编程技术。<br>就算你用的是传统的不支持面向对象的编程语言，只要你心中有“对象”，你依然可以开发出面向对象的程序。<br>如，我用C语言编程的时候，会有意识的使用面向对象的技巧来编写和设计程序。用struct来模拟类，把同一类概念的函数放在一起模拟类。如果你怀疑用C语言是否能编写出面向对象的代码，你可以看一下Linux内核，它是用C语言编写的，但你也可以看到它的源代码字里行间散发出的浓浓的“对象”的味道。  </p>
<p><strong>真正掌握面向对象编程技术并不容易。</strong></p>
<p>在我的技术生涯中，有两个坎让我最感头疼。  </p>
<ol>
<li><p>一个坎是Dos向Windows开发的变迁过程中，框架的概念，很长一段时间我都理解不了。Dos时代，都是对函数库的调用，你的程序主动调用函数。Windows时代，则换成了框架。就算是你的main程序，其实也是被框架调用的。UI线程会从操作系统获取消息，然后发送给你的程序来处理。Java程序员熟悉的Spring框架，也是这样一个反向调用的框架。<br>现在因为“框架”这个术语显得很高大上，因此很多“类库”/“函数库”都自称为“框架”。在我看来这都是名称的滥用。<br>“类库”/“函数库”就是我写的代码调用它们。<br>“框架”就是我注册回调函数到框架，框架来调用我写的函数。  </p>
</li>
<li><p>另一个坎就是面向对象。很长一段时间我都不知道应该怎么设计类和类之间的关系，不能很好的设计出类层次结构来。<br>我记得当时看到一本外国大牛的书，他讲了一个很简单、很实用的面向对象设计技巧：“叙述问题。然后把其中的名词找出来，用来构建类。把其中的动词找出来，用来构建类的方法”。虽然这个技巧挺管用的，但也太草根了点，没有理论依据，也不严谨。如果问题叙述的不好，那么获得的类系统就会是有问题的。  </p>
</li>
</ol>
<p>掌握面向对象思想的途径应该有很多种，我是从关系数据库中获得了灵感来理解和掌握面向对象设计思想的。<br>在我看来，关系数据库的表，其实就是一个类，每一行记录就是一个类的实例，也就是对象。表之间的关系，就是类之间的关系。O-Rmapping技术（如Hibernate），用于从面向对象代码到数据库表之间的映射，这也说明了类和表确实是逻辑上等价的。<br>既然数据库设计和类设计是等价的，那么要设计面向对象系统，只需要使用关系数据库的设计技巧即可。<br>关系数据库表结构设计是很简单的：  </p>
<ol>
<li>识别表和表之间的关系，也就是类和类之间的关系。是一对一，一对多，多对一，还是多对多。这就是类之间的关系。</li>
<li>识别表的字段。一个对象当然有无数多的属性（如，人：身高，体重，性别，年龄，姓名，身份证号，驾驶证号，银行卡号，护照号，港澳通行证号，工号，病史，婚史etc），我们写程序需要记录的只是我们关心的属性。这些关心的属性，就是表的字段，也就是类的属性。“弱水三千，我取一瓢饮”！</li>
</ol>
<h3 id="4_u6BB5_u2014_u8BBE_u8BA1_u6A21_u5F0F_uFF1A"><a href="#4_u6BB5_u2014_u8BBE_u8BA1_u6A21_u5F0F_uFF1A" class="headerlink" title="4段—设计模式："></a>4段—设计模式：</h3><p>曾经在网上看到这样一句话：“没有十万行代码量，就不要跟我谈什么设计模式”。深以为然。<br>记得第一次看Gof的设计模式那本书的时候，发现虽然以前并不知道设计模式，但在实际编程过程中，其实还是自觉使用了一些设计模式。设计模式是编程的客观规律，不是谁发明的，而是一些早期的资深程序员首先发现的。<br>不用设计模式，你也可以写出满足需求的程序来。但是，一旦后续需求变化，那么你的程序没有足够的柔韧性，将难以为继。而真实的程序，交付客户后，一定会有进一步的需求反馈。而后续版本的开发，也一定会增加需求。这是程序员无法回避的现实。  </p>
<p><strong>写UI程序，不论是Web,Desktop,Mobile,Game，一定要使用MVC设计模式。否则你的程序面对后续变化的UI需求，将无以为继。</strong></p>
<p><strong>设计模式，最重要的思想就是解耦，通过接口来解耦。</strong>这样，如果将来需求变化，那么只需要提供一个新的实现类即可。<br>主要的设计模式，其实都是面向对象的。因此，可以认为设计模式是面向对象的高级阶段。只有掌握了设计模式，才能认为是真正彻底掌握了面向对象设计技巧。  </p>
<p>我学习一门新语言时（包括非面向对象语言，如函数式编程语言），总是会在了解了其语法后，看一下各类设计模式在这门语言中是如何实现的。这也是学习编程语言的一个窍门。</p>
<h3 id="5_u6BB5_u2013_u8BED_u8A00_u4E13_u5BB6_uFF1A"><a href="#5_u6BB5_u2013_u8BED_u8A00_u4E13_u5BB6_uFF1A" class="headerlink" title="5段–语言专家："></a>5段–语言专家：</h3><p>经过一段时间的编程实践，程序员对某一种常用的编程语言已经相当精通了。有些人还成了“语言律师”，擅长向其他程序员讲解语言的用法和各种坑。<br>这一阶段的程序员，常常是自己所用语言的忠实信徒，常在社区和论坛上和其他语言的使用者争论哪一种语言是最好的编程语言。他们认为自己所用的语言是世界上最好的编程语言，没有之一。他们认为，自己所用的编程语言适用于所有场景。他们眼中，只有锤子，因此会把所有任务都当成是钉子。</p>
<h3 id="6_u6BB5_u2013_u591A_u8BED_u8A00_u4E13_u5BB6_uFF1A"><a href="#6_u6BB5_u2013_u591A_u8BED_u8A00_u4E13_u5BB6_uFF1A" class="headerlink" title="6段–多语言专家："></a>6段–多语言专家：</h3><p>这一个阶段的程序员，因为工作关系，或者纯粹是因为对技术的兴趣，已经学习和掌握了好几种编程语言。已经领略了不同编程语言不同的设计思路，对每种语言的长处和短处有了更多的了解。<br>他们现在认为，编程语言并不是最重要的，编程语言不过是基本功而已。<br>他们现在会根据不同的任务需求，或者不同的资源来选择不同的编程语言来解决问题，不再会因为没有使用某一种喜爱的编程语言开发而埋怨。  </p>
<p>编程语言有很多种流派和思想，有一些编程语言同时支持多种编程范式。</p>
<h4 id="u9759_u6001_u7C7B_u578B_u7F16_u7A0B_u8303_u5F0F"><a href="#u9759_u6001_u7C7B_u578B_u7F16_u7A0B_u8303_u5F0F" class="headerlink" title="静态类型编程范式"></a>静态类型编程范式</h4><p>采用静态类型编程范式的编程语言，其变量需要明确指定类型。代表语言：<code>C,C++,Pascal,Objective-C,Java,C#,VB.NET,Swif,Golang</code>。</p>
<p><strong>这样做的好处是：</strong>  </p>
<ol>
<li>编译器可以在编译时就能找出类型错误。  </li>
<li>编译器编译时知道类型信息，就可以提高性能。  </li>
</ol>
<p>这种范式认为，程序员肯定知道变量的类型，你丫要是不知道变量的类型，那你就别混了！编译时，程序会报错。<br>Swift和Go语言都是静态类型编程语言，但它们都不需要明确指定类型，而是可以通过推断由编译器自动确定其类型。  </p>
<h4 id="u52A8_u6001_u7C7B_u578B_u7F16_u7A0B_u8303_u5F0F"><a href="#u52A8_u6001_u7C7B_u578B_u7F16_u7A0B_u8303_u5F0F" class="headerlink" title="动态类型编程范式"></a>动态类型编程范式</h4><p>采用静态类型编程范式的编程语言，其变量不需要明确指定类型。任意变量，可以指向任意类型的对象。代表语言：<code>Python,Ruby,JavaScript</code>。  </p>
<p>动态类型的哲学可以用鸭子类型（英语：ducktyping）这个概念来概括。JamesWhitcombRiley提出的鸭子测试可以这样表述：“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p>
<p>这种范式认为，程序员肯定知道变量的类型和它支持的方法和属性，你丫要是不知道变量的类型，那你就别混了！运行时程序会崩溃！程序崩溃怨谁？怨你自己呗，你不是合格的程序员！</p>
<p><strong>动态类型的好处是：</strong><br>不需要明确定义接口和抽象类型。只要一个类型支持需要的方法和属性，那么就OK。程序会相当灵活和简单。C++,Java,C#视之为命脉的接口/基类，在动态语言这里都视如无物！</p>
<p><strong>缺点是：</strong>  </p>
<ol>
<li>如果类型不对，编译器也无法找到错误，而是运行时程序崩溃。</li>
<li>因为编译器不知道变量的类型，因此无法优化性能。</li>
</ol>
<h4 id="u9762_u5411_u5BF9_u8C61_u7F16_u7A0B_u8303_u5F0F"><a href="#u9762_u5411_u5BF9_u8C61_u7F16_u7A0B_u8303_u5F0F" class="headerlink" title="面向对象编程范式"></a>面向对象编程范式</h4><p>面向对象编程范式，从上世纪70年代末开始兴起。它支持类和类的实例作为封装代码的模块。代表语言：<code>Smalltalk,C++,Objective-C,Java,C#,VB.NET,Swift,Go,Python,Ruby,ActionScritp,OCaml</code>.</p>
<p>早期编程语言都是面向过程的。就是顺序，条件，循环，构成一个个函数。随着代码规模的增大，人们发现有必要对代码进行模块化。一个概念对应的代码放在一个文件中，这样便于并发开发和进行代码管理。</p>
<p>人们还发现了“程序=数据结构+算法”的规律。因此，一个概念对应的数据结构和函数应该放在一个文件中。这就是类的概念。</p>
<p>面向对象编程范式，确实极大地提高了生产效率，因此得到了广泛的应用，因此在语言层面支持面向对象编程范式的语言是极多的。</p>
<p>C语言尽管在语言层面上并不支持面向对象编程范式，但现代的C语言开发都会应用面向对象的模块化思想，把同一类的数据结构和函数放在一个文件中，采用类似的命名方式。</p>
<p>毕竟C语言没有在语言层面上支持面向对象，因此就有很多程序员想给C语言添加面向对象支持。其中的代表是C++和Objective-C。</p>
<p>C++是一种新的语言，但大部分语言元素是和C兼容的。</p>
<p>Objective-C是完全兼容的C的。Objective-C是给C添加了薄薄的一层语法糖以支持接口（就是其他语言的类）和协议（就是其他语言的接口）。甚至，Objective-C一开始的实现，就是一个C语言的预编译器。Objective-C坦白讲，除了添加的语法不太符合C流外，实际上其面向对象系统设计是相当精妙的。乔布斯早年慧眼识珠，把Objective-C收人囊中，因为封闭于Apple/NextStep系统内，因此少有人知。随着iOs系统的普及，Objective-C近几年才名满天下。</p>
<h4 id="u51FD_u6570_u5F0F_u7F16_u7A0B_u8303_u5F0F"><a href="#u51FD_u6570_u5F0F_u7F16_u7A0B_u8303_u5F0F" class="headerlink" title="函数式编程范式"></a>函数式编程范式</h4><p>函数式编程范式，是一些数学家发明的编程语言，他们认为程序就是数学函数嘛。代表语言：<code>Lisp,Erlang,JavaScript,OCaml,Prog</code>。</p>
<p>有很多大牛极力鼓吹过函数式编程语言，认为其极具革命性。但我认为他们过高估计了函数式编程范式的威力，我并不认为函数式编程范式相对于面向对象编程范式有何高明之处。</p>
<p>函数式编程语言，核心就是函数，它们没有Class类的概念。但它的函数又不是传统面向过程语言的函数，它的函数支持“闭包”的概念。</p>
<p>在我看来，函数式编程语言的函数，也就是“闭包”，说白了，其实就是“类”。编程语言发展到今天，就是需要模块化，就是需要把“数据结构”和“算法”结合起来。不论何种语言，不把它们结合起来的编程方式，都是没有出路的。</p>
<p>面向对象编程语言，用类把“数据结构”和“算法”结合起来。类的核心是“数据结构”，也就是其“属性”，而不是“算法”，其“函数”。在类中，是函数依附于属性。</p>
<p>而函数式编程语言，用闭包把“数据结构”和“算法”结合起来。是函数能够抓取外部的字段。是“属性”依附于“函数”。</p>
<p>“类”本质上和“闭包”是等价的。现在很多面向对象编程语言都加上了对闭包的支持。观察其代码，我们可以发现，它们实际上都是用“类”来实现“闭包”的。</p>
<p>“类”和“闭包”谁更易用？明显是“类”。</p>
<p>而“闭包”更简洁一些，因此“闭包”在面向对象编程语言中常用来替换匿名类。只有一个函数的类，写成一个类太麻烦，不如写成闭包，更加简洁。</p>
<p>吐槽一下OCaml语言，其前身Caml语言本身是一种挺好的函数式语言，硬生生添加了一套完整的面向对象机制，同时支持面向对象和函数式编程范式，很容易像C++一样脑裂的。</p>
<p>也有很多面向对象语言控看着JavaScript嫌烦，总是想把面向对象支持添加到JavaScript上。ActionScript就是其中一种尝试。我用过，真的是和Java没多少区别了。</p>
<p>再吐槽一下ExtJS。当初选型Web前端开发框架时比较了ExtJS和JQuery。</p>
<p>ExtJS明显是Java高手开发的，硬生生用JavaScript模拟Swing的设计思想，搞了一套UI库。</p>
<p>JQuery开发者明显是领悟了JavaScript的函数式编程范式，依据JavaScript的动态函数式编程语言的特点打造了一套UI库，立刻秒杀ExtJS。</p>
<p>由ExtJS和JQuery的故事，我们可以看到多语言编程能力是多么的重要。ExtJS的作者精通并喜爱Java，因此他把手术刀JavaScript当做锤子Java使，一通乱敲，费力不讨好。</p>
<p>函数式编程语言，还有尾递归等一些小技巧。尾递归可以不用栈，防止递归调用时栈溢出。</p>
<h4 id="u6A21_u677F_u7F16_u7A0B_u8303_u5F0F"><a href="#u6A21_u677F_u7F16_u7A0B_u8303_u5F0F" class="headerlink" title="模板编程范式"></a>模板编程范式</h4><p>模板编程，就是把类型作为参数，一套函数可以支持任意多种类型。代表语言：<code>C++</code>。</p>
<p>模板编程的需求，是在C++开发容器库的时候发明的。因为容器需要保存任意类型的对象，因此就有了泛型的需求。</p>
<p>C++的模板编程，是在编译时，根据源码中的使用情况，创建对应类型的代码。除了C++这种方式，Java，C#也有类似的机制，叫做“泛型”，但它们的实现方式和C++的模板很不同。它们的编译器不会生成新的代码，而是使用强制类型转换的方式实现。</p>
<p>在没有模板/泛型的编程语言中，怎样在容器中存放对象呢？存取公共基类类型（Java,C#）的对象，或者void*指针（C）即可，取出时自己强制类型转换为实际类型。动态类型语言，不关心类型，更是无所谓了，随便什么对象直接往容器里扔进去，取出来直接用即可。</p>
<p>一些C++高手又在模板的基础上搞出了“模板元编程”。因为模板编程，就是C++的编译器搞定的嘛，模板元编程就是让编译器运算，编译完结果也就算出来了。我不知道除了研究和炫技，这玩意有啥用？</p>
<h4 id="u5C0F_u7ED3"><a href="#u5C0F_u7ED3" class="headerlink" title="小结"></a>小结</h4><p>一门语言是否值得学习，我认为有几个标准：</p>
<ol>
<li>是否要用，要用就得学，这么没有疑问的。毕竟我们都要吃饭的嘛。  </li>
<li>其语言特性是否给你耳目一新的感觉。如果是，那就值回票价了。如Go语言废掉了异常，改用返回多值。我深以为然。我其实已经主动不用异常好多年了。因为，我觉得既然C不支持异常也活得很好，为什么需要异常呢？出错了，返回错误码。无法挽回的错误，直接Abort程序就可以嘛！而且，异常实际上是违反面向过程编程原则的。一个函数应该只有一个入口一个出口。抛出异常就多了出口了。  </li>
<li>是否擅长某一个领域。如果你手里只有一把锤子，那么你就只能把所有任务都当做钉子猛锤一通。但如果工具箱里有多种工具，那面对不同的任务就得心应手多了。  </li>
</ol>
<h3 id="7_u6BB5_u2014_u67B6_u6784_u8BBE_u8BA1"><a href="#7_u6BB5_u2014_u67B6_u6784_u8BBE_u8BA1" class="headerlink" title="7段—架构设计"></a>7段—架构设计</h3><p>还需要掌握架构设计的能力，才能设计出优秀的软件。架构设计有一些技巧：</p>
<h4 id="1_u3001_u5206_u5C42"><a href="#1_u3001_u5206_u5C42" class="headerlink" title="1、分层"></a>1、分层</h4><p>一个软件通常分为：  </p>
<blockquote>
<p>表现层–UI部分<br>接口层–后台服务的通讯接口部分<br>服务层–实际服务部分<br>存储层—持久化存储部分，存储到文件或者数据库。  </p>
</blockquote>
<p>分层的软件，可以解耦各个模块，支持并行开发，易于修改，易于提升性能。</p>
<h4 id="2_u3001SOA"><a href="#2_u3001SOA" class="headerlink" title="2、SOA"></a>2、SOA</h4><p>模块之间通过网络通讯互相连接，松耦合。每一个模块可以独立部署，可以增加部署实例从而提高性能。每一个模块可以使用不同的语言和平台开发，可以重用之前开发的服务。SOA，常用协议有WebService,REST,JSON-RPC等。</p>
<h4 id="3_u3001_u6027_u80FD_u74F6_u9888"><a href="#3_u3001_u6027_u80FD_u74F6_u9888" class="headerlink" title="3、性能瓶颈"></a>3、性能瓶颈</h4><p>1). 化同步为异步。<br>用内存队列（Redis），工作流引擎（JBpm）等实现。内存队列容易丢失数据，但是速度快。工作流引擎会把请求保存到数据库中。<br>通过化同步请求为异步请求，基本上99.99%的性能问题都可以解决。</p>
<p>2). 用单机并行硬件处理。<br>如，使用GPU，FPGA等硬件来处理，提高性能。</p>
<p>3). 用集群计算机来处理。<br>如，Hadoop集群，用多台计算机来并行处理数据。<br>自己的软件栈中，也可以把一个模块部署多份，并行处理。</p>
<p>4). 用cache来满足请求。常用的内容加热cache后，大量的用户请求都只是内存读取数据而已，性能会得到很大的提升。<br>cache是上帝算法，记得好像它的性能只比最佳性能低一些，就好像你是上帝，能够预见未来一样。现在X86CPU遇到了主频限制，CPU提升性能的主要途径就是增加高速Cache了。</p>
<h4 id="4_u3001_u5927_u7CFB_u7EDF_u5C0F_u505A"><a href="#4_u3001_u5927_u7CFB_u7EDF_u5C0F_u505A" class="headerlink" title="4、大系统小做"></a>4、大系统小做</h4><p>遇到大型系统不要慌，把它切分成多个模块，用多个小程序，通过SOA协作来解决。这秉承了Unix的设计思想。Unix上开发了大量单一目的的小程序，它主张用户通过管道来让多个小程序协作，解决用户的需求。当然，管道方式通讯限制太多，不够灵活。因此，现在我们可以通过URI,通过SOA的方式来让多个程序协作。Andorid和iOS上的应用程序，现在都是通过URI实现协作的。这也算是Unix设计思想的现代发展吧？！</p>
<h4 id="5_u3001Sharding_u5207_u7247"><a href="#5_u3001Sharding_u5207_u7247" class="headerlink" title="5、Sharding切片"></a>5、Sharding切片</h4><p>现在有一个潮流，就是去IOE。I-IBM大型机，O-Oracle数据库，E-EMC存储。之前，大型系统常用IOE去架构，在大型机上部署一个Oracle数据库，Oracle数据库用EMC存储保存数据。IOE是当今最强的计算机，数据库和存储。但他们面对海量系统也有抗不住的一天。</p>
<p>Oracle数据库是Shareeverything的，它可以在一个计算机集群（服务器节点不能超过16个）上运行。计算机集群都共用一个存储。</p>
<p>去IOE运动，标志着ShareEverything模式的破产。必须使用ShareNothing，系统才能无限扩展。</p>
<p>用MySQL数据库就可以应付任意规模的数据了。前提是，你会Sharding分片。把大系统切分成若干个小系统，切分到若干台廉价服务器和存储上。更Modern一些，就是切分到大量虚拟机上。</p>
<p>如，铁道部的12306网站。我们知道火车票都是从属于某一列列车的。那么我们把每一个列车作为一个单元来切分，就可以把12306网站切分成几千个模块。一台虚拟机可以承载若干个模块。当某些列车成为性能瓶颈之后，就可以把它们迁移到独立的虚拟机上。即使最终有部分列出服务不可用，系统也不会完全不可用。</p>
<p>12306网站，只有一个全局的部分，就是用户登录。这个可以交给第三方负责。如可以让用户用微信，微博，qq等账户登录。</p>
<p>也可以自己实现用户登录服务。还是用切片的方式用多台Redis服务器提供服务。Redis服务器存储每一个登录用户的sessionId和userId，角色，权限等信息。sessionId是随机生成的，可选择其部分bit用于标识它在哪一个Redis服务器上。用户登录后，把sessionId发给客户。用户每次请求时把sessionId发回给服务器。服务器把sessionId发给Redis服务器查询得到其用户信息，对用户请求进行处理。如果在redis服务器上找不到sessionId，则让用户去登录。即使所有注册用户同时登陆，也不需要太多的内存。而且，可以在session内存过多时，删除最早登陆的用户的session，强制他再次登陆。同时活跃的用户数不会太多。</p>
<h2 id="u9886_u57DF_u77E5_u8BC6_u5C42_u6B21"><a href="#u9886_u57DF_u77E5_u8BC6_u5C42_u6B21" class="headerlink" title="领域知识层次"></a>领域知识层次</h2><p>前面的所有层次，都是关注编程本身的技能，说白了，就是基本功，本身并不能产生太大的价值。但有太多的程序员浪费太多的时间在那些筑基的层次上。</p>
<p>有些程序员特别喜欢钻研编程语言，每有一种新的编程语言出来或者旧语言被热炒，就会投入精力进去研究。我就是其中之一，浪费了很多精力在编程语言上，在奇技淫巧上。</p>
<p>我觉得C++语言是一个特别大的坑。刚开始是作为面向对象的C被开发的。后来发现了模板编程，就大力鼓吹模板编程和进一步的模板元编程。最近又推出了C++11，C++14等新标准，进一步添加了很多新东西，函数式编程，类型推断等。C++过分复杂，太多的坑消耗了大量程序员的大量精力。我使用C++时，只使用面向对象部分和模板部分，其他过于精深的特性都不使用。</p>
<p>计算机科学是一个面相当广泛的学科，有很多领域知识需要和值得我们深入研究，我们才能写出有价值的程序来。软件必须要和行业结合起来，要落地才有价值。仅仅研究编程技巧，不懂领域知识是写不出有价值的程序的。</p>
<p><strong>计算机科学领域有很多，列举一些如下：</strong></p>
<ul>
<li><p>存储—-块设备，文件系统，集群文件系统，分布式文件系统，光纤SCSI，iSCSI，RAID等。</p>
</li>
<li><p>网络—-以太网，光纤网，蜂窝网络，WIFI，VLAN等。</p>
</li>
<li><p>计算机体系结构，主要就是CPU指令集。x86,ARM等。</p>
</li>
<li><p>USB协议。需要知道URB包。</p>
</li>
<li><p>PCI协议，PCI-E协议。现代计算机的外设都是PCI协议和PCI-E协议的。显卡现在全是通过 PCI-E协议连接到计算机上的。相对来说减少了很多需要学习的知识。搞虚拟化就需要深入掌握PCI协议。</p>
</li>
<li><p>图像处理–图像压缩，视频实时编码等。</p>
</li>
<li><p>3D游戏</p>
</li>
<li><p>关系数据库</p>
</li>
<li><p>NoSQL数据库</p>
</li>
<li><p>操作系统</p>
</li>
<li><p>分布式操作系统</p>
</li>
<li><p>编译原理</p>
</li>
<li><p>机器学习–现在大数据要用哦！</p>
</li>
</ul>
<p>了解这些领域知识，也包括了解该领域现有的商用硬件、商用软件和开源软件。很多时候，你要完成的工作，已经有现成的工具了。你只要使用现成的工具就可以完成任务，不需要进行开发。有时候，只需要组合现有的工具，写一些脚本就可以完成任务。</p>
<p>如，我一次要实现一个双向同步任务。找到了一个优秀的开源软件Unison，编写一下配置文件就圆满地完成了任务。不需要编写任何代码。</p>
<p>还有一次，要做高可用，用Python调用了几个开源软件就轻松实现了。</p>
<p>编写安装程序，定制操作系统，知道了操作系统的领域知识，写几行脚本就可以轻松搞定。</p>
<p>不具备领域知识的人，就可能不得不进行大量无谓的开发，甚至开发很久之后才发现，这根本就是一条死路。</p>
<p>另外，扎实的领域知识，可以大大提高编程调试、查错的能力。知道编译器和编程语言运行时工作原理，就能快速根据编译错误和警告信息修改代码。</p>
<p>知道操作系统底层运行机制，就能快速找到运行时错误的问题根源。如，有一次我编写一个windows升级服务程序。它是一个windows服务，需要执行dos脚本，这个脚本会替换掉这个windows服务本身。发现有时脚本执行无效，查了一晚上，发现当windows服务安装后，第一次启动就执行脚本时就会有权限问题，log都正确，但实际执行这个脚本没有任何效果。但一旦windows服务程序启动一次之后就ok。这必然是windows操作系统底层安全机制的问题，因为我对Windows内核了解不多，因此花了很长时间才发现这个问题，并对造成这个问题的根源并不清楚。</p>
<h3 id="0_u6BB5_u2014_u9886_u57DF_u77E5_u8BC6_u83DC_u9E1F"><a href="#0_u6BB5_u2014_u9886_u57DF_u77E5_u8BC6_u83DC_u9E1F" class="headerlink" title="0段—领域知识菜鸟"></a>0段—领域知识菜鸟</h3><p>对领域知识没有多少认知，通过搜索引擎找到一些该领域的软件和硬件的介绍性文章，按照文章指示配置和使用软件。勉强能够使用现有软硬件。</p>
<h3 id="1_u6BB5_u2014_u9886_u57DF_u77E5_u8BC6_u884C_u5BB6"><a href="#1_u6BB5_u2014_u9886_u57DF_u77E5_u8BC6_u884C_u5BB6" class="headerlink" title="1段—领域知识行家"></a>1段—领域知识行家</h3><p>了解领域内常用硬件，深入掌握领域内常用软件的配置和使用技巧。能够使用现有软硬件熟练搭建解决方案，能够解决实际工作中遇到的种种问题。</p>
<h3 id="2_u6BB5_u2014_u9886_u57DF_u77E5_u8BC6_u4E13_u5BB6"><a href="#2_u6BB5_u2014_u9886_u57DF_u77E5_u8BC6_u4E13_u5BB6" class="headerlink" title="2段—领域知识专家"></a>2段—领域知识专家</h3><p>当你不仅仅掌握了该领域的软件和工具，知道怎么用，还知道其原理，“知其然，也知其所以然”，就是该领域的知识专家了。</p>
<p>你知道网络协议的原理，你才能在网络出现问题时知道是哪里可能出现了问题。是mac冲突，ip冲突，还是网络环路？</p>
<p>你知道存储的原理，你才能知道为什么这种存储方式不适合虚拟化，那种存储方式适合虚拟化，另一种方式适合资料备份。</p>
<p>你知道PCI协议，你才能知道你怎样才能虚拟化一个硬件设备。</p>
<p>你知道网卡硬件协议，你才能模拟出一个虚拟机能正常使用的虚拟网卡。</p>
<p>你知道视频编码格式和原理，才能知道什么视频格式占用带宽最少，什么视频格式占用CPU最少。</p>
<p>你了解IntelVT/Amd V指令集，才能知道虚拟化是怎样实现的。</p>
<p>你明白工作流其实就是状态机，在遇到复杂工作流程时，你才能知道怎样设计满足要求的工作流引擎。</p>
<h3 id="3_u6BB5_u2014_u79D1_u5B66_u5BB6"><a href="#3_u6BB5_u2014_u79D1_u5B66_u5BB6" class="headerlink" title="3段—科学家"></a>3段—科学家</h3><p>你是领域知识专家，但你的知识都是来自于书本，来自于其他人的。</p>
<p>如果你满足于当领域知识专家，你只能拾人牙慧，永远别想超越。别人的研究成果，未必愿意告诉你。当别人告诉你的时候，它可能已经发现了更新的理论，并且新一代产品可能马上就要发布了。</p>
<p>科学家是探索未知，勇于创新的人，是推动人类社会进步的人。</p>
<p>传说，思科的一位高管曾经半开玩笑地说过：“如果思科停止了新技术的研发，华为就会找不着方向”。这是在嘲笑华为只是处在领域知识专家的水平，只能山寨无法超越。我不知道华为的实际情况，但希望现在的华为已经走到了领跑者的位置。</p>
<p>欧文·雅各布斯发现了CDMA码分多址的原理，并发现它在通讯上大有可为，组建了高通公司。高通公司主要以专利授权费为生，它雇佣了大量科学家在通讯领域展开研究。有人说高通是专利流氓。这些人不明白知识的价值。在他们眼里，Windows的合理价格就应该是5元钱，一张光盘的价格。iPhone就应该是1000多元裸机的价格。高通是专利流氓，那你也流氓一个CDMA，LTE出来给我看看！</p>
<p>X86芯片在设计上没有考虑虚拟化。因此会有所谓的“虚拟化漏洞”出现。就是说，一些CPU特权指令执行时，在虚拟机环境下不会抛出异常，因此就无法切换到Host。这样，X86芯片上就无法运行虚拟机。</p>
<p>VmWare公司是由美国的几位科学家在1998年创建的。他们发现可以使用二进制翻译的技术，在X86计算机上运行虚拟机。</p>
<p>Xen虚拟化软件也是几位科学家发明的。他们发现只要修改虚拟机操作系统和Host操作系统的内核，在需要执行“虚拟化漏洞”指令时直接调用Host的功能，就可以实现虚拟化，而且大大提高了虚拟机的运行性能。</p>
<p>后来，Intel为自己的芯片添加了IntelVT指令集，Amd为自己的芯片添加了AmdV指令集，弥补了“虚拟化漏洞”。于是就有了KVM虚拟机软件，它直接用CPU硬件指令实现虚拟化。</p>
<p>KVM在执行CPU指令时，是直接在物理CPU上运行的，因此效率极高。但是，虚拟机运行虚拟外设时，就必须用软件模拟，因此虚拟机的IO访问速度很慢。</p>
<p>IBM科学家RustyRussell，借鉴了Xen的研发经验，创建了VirtIO技术。就是在虚拟机中编写一套PCI虚拟设备和驱动，这套虚拟PCI设备有一块虚拟设备内存。这个虚拟设备内存Host是可以访问的，虚拟机通过VirtIO驱动程序也可以访问。也就是一块内存在虚拟机和Host中共享，这就解决了虚拟机的IO性能问题。</p>
<p><strong>再讲一个搜索引擎的故事：</strong></p>
<blockquote>
<p>很久以前，我要给一个程序添加搜索功能。刚开始使用sql查询实现，发现实在太慢了。后来找了开源的Lucene项目。它使用反向索引技术，通过在文件中创建反向索引，大大提高了搜索速度。</p>
<p>Google的两位创始人发现了html中link的秘密，他们发现可以通过html页面的link关系来为每一个html页面设置权重。也就是PageRank算法。于是，Google的自动搜索引擎击败了Yahoo人工分类的搜索引擎。</p>
<p>OK，利用反向索引技术和PageRank，以及一个简单的html爬虫机器人，我们就可以创建一个搜索引擎了。但是，互联网很大，每天产生大量新网页，要为整个互联网建立反向索引是很困难的。</p>
<p>若干年后Google又公开了三篇论文：Googlefs,Mapreduce,Bigtable。于是Lucene项目的开发者根据Google的Mapreduce论文开发了Hadoop项目。MapReduce就是使用大量计算机存储数据并计算，最后汇总结果。使用Hadoop+反向索引+PageRank，就可以创建搜索引擎了。Yahoo,Baidu等公司纷纷基于Hadoop开发了自己的搜索引擎。</p>
<p>但是，其他公司的搜索引擎效果还是没法和Google相比。这一点我们程序员最清楚。像我，就总是翻墙出去，只为了Google一下。</p>
<p>Google黑板报上发表了吴军博士的一些文章，其中介绍了很多机器学习方面的知识。从文中可以知道，Google其实使用机器学习来分析搜集到的页面。Google明显不会把这个公式公开出来。即使有一天Google真的公开了这个公式，那么可以想见Google肯定又研发出了更加犀利的秘籍，山寨货的搜索引擎效果还是比不上Google的。</p>
</blockquote>
<p>山寨是通向创新的必由之路。在成为领域的领头羊和领导者之前，必然要经过学习，模仿的阶段。但要成为行业的老大，成为Champion，必须勇于弯道超车，勇敢地走上创新之路，成为真正的科学家，真正的大牛！</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>编程能力可分为两个维度：一个是编程技能水平，另一个是领域知识水平。</p>
<p>有些程序员可能把精力都花在提升编程技能上了，领域知识知之甚少，这其实在日常工作中也是极其有害的。有些需求可能早已经有了现成、开源免费的解决方案，或者只需要组合几个现有软件就可以快速搞定，而他们却不得不自己花大量时间去开发。另外，缺少领域知识，在程序出现非预期状况时，很难快速定位到问题的根源，很难解决bug。</p>
<blockquote>
<p>来源：良少的博客（@虚拟化良少）<br>链接：<a href="http://blog.csdn.net/shendl/article/details/43835421" target="_blank" rel="external">http://blog.csdn.net/shendl/article/details/43835421</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>程序员的编程技能随着经验的积累，会逐步提高。我认为编程能力可以分为一些层次。<br>下面通过两个维度展开]]>
    </summary>
    
      <category term="编程能力" scheme="http://sphenginx.github.io/tags/%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在Lumen框架下写一个自己的Log类？]]></title>
    <link href="http://sphenginx.github.io/2015/12/18/ioc/"/>
    <id>http://sphenginx.github.io/2015/12/18/ioc/</id>
    <published>2015-12-18T08:03:01.000Z</published>
    <updated>2015-12-18T08:31:47.016Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8BB0"><a href="#u524D_u8BB0" class="headerlink" title="前记"></a>前记</h2><p>今天在使用<strong>lumen</strong>自带的类Log的时候，发现每次记录一个Log，总会在<code>storage/logs/lumen.log</code>文件末尾追加一条记录，那么问题来了，时间久了，lumen.log 这个文件就会非常大，而且也不利于管理，于是打算写一个自己的log类，在各位网友博客小伙伴的帮助下，终于完成了，记录一下写Log的历程，希望能帮助一些后来打算改造Log类的小伙伴吧。</p>
<h2 id="Lumen"><a href="#Lumen" class="headerlink" title="Lumen"></a>Lumen</h2><p>开始前，先让我们了解下lumen：</p>
<p>Lumen 是一个由 Laravel 元件搭建而成的微框架, 由 Laravel 官方维护. Lumen 为速度而生, 是当前最快的 PHP 框架之一, 甚至比类似的微框架 Silex 速度还要快.</p>
<p>Lumen 比其他微框架的优点是, 构建在 Laravel 之上, 使其具备 Laravel 强大的功能, 如 路由, 依赖注入, Eloquent ORM, 数据库迁移管理, 队列和计划任务等.</p>
<p>Laravel 本来就是一个功能齐全, 速度飞快的框架, 但是 Lumen 因为去除了很多 Laravel 的配置和可自定义的选项, 速度越加飞快, 毫秒必争.</p>
<p>飞快的速度, 再加上 Laravel 非常方便的功能, 使用 Lumen 开发应用会是非常愉悦的体验.</p>
<p>Lumen 专为微服务或者 API 设计, 举个例子, 如果你的应用里面有部分业务逻辑的请求频率比较高, 就可以单独把这部分业务逻辑拿出来, 使用 Lumen 来构建一个小 App.</p>
<p>因为 Lumen 是对 Laravel 优化了框架的加载机制, 所以 Lumen 对资源的要求少很多.</p>
<p>当然, 你可以使用 队列系统 与你的主 Laravel 应用进行交互. Laravel 和 Lumen 从一开始就是设计成能一起很好的工作, 并且, 配合使用, 允许你构架一个强大的, 以微服务为驱动的应用程序.</p>
<p>Lumen 同时也非常适用于构建 API 接口, 此类型的应用通常情况下不需要具备 全栈框架 的所有功能, 如 HTTP 会话管理, Cookies, 和模版系统.</p>
<h2 id="u5386_u7A0B"><a href="#u5386_u7A0B" class="headerlink" title="历程"></a>历程</h2><p>简单的了解了Lumen，那么接下来就来介绍Log的封装过程吧，在介绍前，各位看官如果对lumen的加载机制不清楚，不妨看下这篇文章：<a href="https://phphub.org/topics/769" target="_blank" rel="external">Laravel 架构中的 Container/ServiceProvider/Facade</a>。</p>
<h3 id="u4E86_u89E3_u7CFB_u7EDF_u7684Log_u7C7B"><a href="#u4E86_u89E3_u7CFB_u7EDF_u7684Log_u7C7B" class="headerlink" title="了解系统的Log类"></a>了解系统的Log类</h3><p>Lumen文档 <a href="http://laravelacademy.org/post/465.html" target="_blank" rel="external">错误和日志</a> 介绍了如何使用Lumen的错误和日志类，而且该日志记录器提供了<a href="http://tools.ietf.org/html/rfc5424" target="_blank" rel="external">RFC 5424</a>中定义的七种日志级别：<code>alert, critical, error,warning, notice, info 和 debug</code>。我们看到以下代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Log</span>;</span><br></pre></td></tr></table></figure></p>
<p>既然Log类可以直接应用，说明Lumen在初始化的时候就定义了 Log 的 <code>namespace</code> 或者 起了 Log的 <code>aliases</code>, 首先找namespace，没有找到定义Log 的 namespace的地方，那肯定是起了 Log 的别名，找了些资料，终于发现Log的加载流程：</p>
<ol>
<li>根目录下<code>bootstrap\app.php</code>文件有一行代码：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$app</span>-&gt;withFacades();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这一行是调用 <code>vendor\laravel\lumen-framework\src\Application-&gt;withFacades()</code> 方法，会加载Lumen的一些Facades，下面列了 application的几个方法：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Create a new Lumen application instance.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span>  string|null  $basePath</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$basePath</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    date_default_timezone_set(env(<span class="string">'APP_TIMEZONE'</span>, <span class="string">'Asia/Chongqing'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;basePath = <span class="variable">$basePath</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;bootstrapContainer();</span><br><span class="line">    <span class="variable">$this</span>-&gt;registerErrorHandling();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Bootstrap the application container.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrapContainer</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>::setInstance(<span class="variable">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;instance(<span class="string">'app'</span>, <span class="variable">$this</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;instance(<span class="string">'path'</span>, <span class="variable">$this</span>-&gt;path());</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;registerContainerAliases();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Register the facades for the application.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withFacades</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    Facade::setFacadeApplication(<span class="variable">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">static</span>::<span class="variable">$aliasesRegistered</span>) &#123;</span><br><span class="line">        <span class="keyword">static</span>::<span class="variable">$aliasesRegistered</span> = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\App'</span>, <span class="string">'App'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Auth'</span>, <span class="string">'Auth'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Bus'</span>, <span class="string">'Bus'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\DB'</span>, <span class="string">'DB'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Cache'</span>, <span class="string">'Cache'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Cookie'</span>, <span class="string">'Cookie'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Crypt'</span>, <span class="string">'Crypt'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Event'</span>, <span class="string">'Event'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Hash'</span>, <span class="string">'Hash'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Log'</span>, <span class="string">'Log'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Mail'</span>, <span class="string">'Mail'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Queue'</span>, <span class="string">'Queue'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Request'</span>, <span class="string">'Request'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Schema'</span>, <span class="string">'Schema'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Session'</span>, <span class="string">'Session'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Storage'</span>, <span class="string">'Storage'</span>);</span><br><span class="line">        class_alias(<span class="string">'Illuminate\Support\Facades\Validator'</span>, <span class="string">'Validator'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Register container bindings for the application.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerLogBindings</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;singleton(<span class="string">'Psr\Log\LoggerInterface'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Logger(<span class="string">'lumen'</span>, [<span class="variable">$this</span>-&gt;getMonologHandler()]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Get the Monolog handler for the application.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> \Monolog\Handler\AbstractHandler</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getMonologHandler</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> StreamHandler(storage_path(<span class="string">'logs/lumen.log'</span>), Logger::DEBUG))</span><br><span class="line">                        -&gt;setFormatter(<span class="keyword">new</span> LineFormatter(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Register the core container aliases.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerContainerAliases</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliases = [</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Foundation\Application'</span> =&gt; <span class="string">'app'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Auth\Guard'</span> =&gt; <span class="string">'auth.driver'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Auth\PasswordBroker'</span> =&gt; <span class="string">'auth.password'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Cache\Factory'</span> =&gt; <span class="string">'cache'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Cache\Repository'</span> =&gt; <span class="string">'cache.store'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Config\Repository'</span> =&gt; <span class="string">'config'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Container\Container'</span> =&gt; <span class="string">'app'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Container\Container'</span> =&gt; <span class="string">'app'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Cookie\Factory'</span> =&gt; <span class="string">'cookie'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Cookie\QueueingFactory'</span> =&gt; <span class="string">'cookie'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Encryption\Encrypter'</span> =&gt; <span class="string">'encrypter'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Events\Dispatcher'</span> =&gt; <span class="string">'events'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Filesystem\Factory'</span> =&gt; <span class="string">'filesystem'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Hashing\Hasher'</span> =&gt; <span class="string">'hash'</span>,</span><br><span class="line">        <span class="string">'log'</span> =&gt; <span class="string">'Psr\Log\LoggerInterface'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Mail\Mailer'</span> =&gt; <span class="string">'mailer'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Queue\Factory'</span> =&gt; <span class="string">'queue'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Queue\Queue'</span> =&gt; <span class="string">'queue.connection'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Redis\Database'</span> =&gt; <span class="string">'redis'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\Redis\Database'</span> =&gt; <span class="string">'redis'</span>,</span><br><span class="line">        <span class="string">'request'</span> =&gt; <span class="string">'Illuminate\Http\Request'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Session\SessionManager'</span> =&gt; <span class="string">'session'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Contracts\View\Factory'</span> =&gt; <span class="string">'view'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * The available container bindings and their respective load methods.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@var</span> array</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$availableBindings</span> = [</span><br><span class="line">    <span class="string">'auth'</span> =&gt; <span class="string">'registerAuthBindings'</span>,</span><br><span class="line">    <span class="string">'auth.driver'</span> =&gt; <span class="string">'registerAuthBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Auth\Guard'</span> =&gt; <span class="string">'registerAuthBindings'</span>,</span><br><span class="line">    <span class="string">'auth.password'</span> =&gt; <span class="string">'registerAuthBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Auth\PasswordBroker'</span> =&gt; <span class="string">'registerAuthBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Broadcasting\Broadcaster'</span> =&gt; <span class="string">'registerBroadcastingBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Bus\Dispatcher'</span> =&gt; <span class="string">'registerBusBindings'</span>,</span><br><span class="line">    <span class="string">'cache'</span> =&gt; <span class="string">'registerCacheBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Cache\Factory'</span> =&gt; <span class="string">'registerCacheBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Cache\Repository'</span> =&gt; <span class="string">'registerCacheBindings'</span>,</span><br><span class="line">    <span class="string">'config'</span> =&gt; <span class="string">'registerConfigBindings'</span>,</span><br><span class="line">    <span class="string">'composer'</span> =&gt; <span class="string">'registerComposerBindings'</span>,</span><br><span class="line">    <span class="string">'cookie'</span> =&gt; <span class="string">'registerCookieBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Cookie\Factory'</span> =&gt; <span class="string">'registerCookieBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Cookie\QueueingFactory'</span> =&gt; <span class="string">'registerCookieBindings'</span>,</span><br><span class="line">    <span class="string">'db'</span> =&gt; <span class="string">'registerDatabaseBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Database\Eloquent\Factory'</span> =&gt; <span class="string">'registerDatabaseBindings'</span>,</span><br><span class="line">    <span class="string">'encrypter'</span> =&gt; <span class="string">'registerEncrypterBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Encryption\Encrypter'</span> =&gt; <span class="string">'registerEncrypterBindings'</span>,</span><br><span class="line">    <span class="string">'events'</span> =&gt; <span class="string">'registerEventBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Events\Dispatcher'</span> =&gt; <span class="string">'registerEventBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Debug\ExceptionHandler'</span> =&gt; <span class="string">'registerErrorBindings'</span>,</span><br><span class="line">    <span class="string">'files'</span> =&gt; <span class="string">'registerFilesBindings'</span>,</span><br><span class="line">    <span class="string">'filesystem'</span> =&gt; <span class="string">'registerFilesBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Filesystem\Factory'</span> =&gt; <span class="string">'registerFilesBindings'</span>,</span><br><span class="line">    <span class="string">'hash'</span> =&gt; <span class="string">'registerHashBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Hashing\Hasher'</span> =&gt; <span class="string">'registerHashBindings'</span>,</span><br><span class="line">    <span class="string">'log'</span> =&gt; <span class="string">'registerLogBindings'</span>,</span><br><span class="line">    <span class="string">'Psr\Log\LoggerInterface'</span> =&gt; <span class="string">'registerLogBindings'</span>,</span><br><span class="line">    <span class="string">'mailer'</span> =&gt; <span class="string">'registerMailBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Mail\Mailer'</span> =&gt; <span class="string">'registerMailBindings'</span>,</span><br><span class="line">    <span class="string">'queue'</span> =&gt; <span class="string">'registerQueueBindings'</span>,</span><br><span class="line">    <span class="string">'queue.connection'</span> =&gt; <span class="string">'registerQueueBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Queue\Factory'</span> =&gt; <span class="string">'registerQueueBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\Queue\Queue'</span> =&gt; <span class="string">'registerQueueBindings'</span>,</span><br><span class="line">    <span class="string">'redis'</span> =&gt; <span class="string">'registerRedisBindings'</span>,</span><br><span class="line">    <span class="string">'request'</span> =&gt; <span class="string">'registerRequestBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Http\Request'</span> =&gt; <span class="string">'registerRequestBindings'</span>,</span><br><span class="line">    <span class="string">'session'</span> =&gt; <span class="string">'registerSessionBindings'</span>,</span><br><span class="line">    <span class="string">'session.store'</span> =&gt; <span class="string">'registerSessionBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Session\SessionManager'</span> =&gt; <span class="string">'registerSessionBindings'</span>,</span><br><span class="line">    <span class="string">'translator'</span> =&gt; <span class="string">'registerTranslationBindings'</span>,</span><br><span class="line">    <span class="string">'url'</span> =&gt; <span class="string">'registerUrlGeneratorBindings'</span>,</span><br><span class="line">    <span class="string">'validator'</span> =&gt; <span class="string">'registerValidatorBindings'</span>,</span><br><span class="line">    <span class="string">'view'</span> =&gt; <span class="string">'registerViewBindings'</span>,</span><br><span class="line">    <span class="string">'Illuminate\Contracts\View\Factory'</span> =&gt; <span class="string">'registerViewBindings'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<ol>
<li>通过看源码，我们发现有这么一个变量 <code>$availableBindings</code>, log最终是 <code>Monolog\Logger</code>类。如果看官不明白，可以参照上文中的<code>Facade</code>的原理链接，了解一下lumen的机制。</li>
</ol>
<h2 id="u96C6_u6210_u81EA_u5DF1_u7684Log_u7C7B"><a href="#u96C6_u6210_u81EA_u5DF1_u7684Log_u7C7B" class="headerlink" title="集成自己的Log类"></a>集成自己的Log类</h2><p>上文我们明白了Log既然是加载了 <code>Monolog\Logger</code> 类，那我们可以集成一个自己的Log类，最终代码如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * To change this license header, choose License Headers in Project Properties.</span><br><span class="line"> * To change this template file, choose Tools | Templates</span><br><span class="line"> * and open the template in the editor.</span><br><span class="line"> * default log directory is storage/api/</span><br><span class="line"> * default log name format is YYYY-mm-dd.log</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Sphenginx</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Logger</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Handler</span>\<span class="title">StreamHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Formatter</span>\<span class="title">LineFormatter</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * user defined Log class, with StreamHandler and LineFormatter </span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> Sphenginx</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//define static log instance.</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="variable">$_log_instance</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取log实例</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> obj</span><br><span class="line">     * <span class="doctag">@author</span> Sphenginx</span><br><span class="line">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLogInstance</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">static</span>::<span class="variable">$_log_instance</span> === <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">static</span>::<span class="variable">$_log_instance</span> = <span class="keyword">new</span> Logger(<span class="string">'Sphenginx'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::<span class="variable">$_log_instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Handle dynamic, static calls to the object.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span>  string  $method 可用方法: debug|info|notice|warning|error|critical|alert|emergency 可调用的方法详见 Monolog\Logger 类</span><br><span class="line">     * <span class="doctag">@param</span>  array   $args 调用参数</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     * <span class="doctag">@author</span> Sphenginx</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">(<span class="variable">$method</span>, <span class="variable">$args</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$instance</span> = <span class="keyword">static</span>::getLogInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组织参数信息</span></span><br><span class="line">        <span class="variable">$message</span> = <span class="variable">$args</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$context</span> = <span class="keyword">isset</span>(<span class="variable">$args</span>[<span class="number">1</span>]) ? <span class="variable">$args</span>[<span class="number">1</span>] : [];</span><br><span class="line">        <span class="variable">$path</span>    = <span class="keyword">isset</span>(<span class="variable">$args</span>[<span class="number">2</span>]) ? <span class="variable">$args</span>[<span class="number">2</span>] : <span class="string">'api/'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置日志处理手柄，默认为写入文件（还有mail、console、db、redis等方式，详见Monolog\handler 目录）</span></span><br><span class="line">        <span class="variable">$handler</span> = <span class="keyword">new</span> StreamHandler(storage_path(<span class="variable">$path</span>) . date(<span class="string">'Y-m-d'</span>).<span class="string">'.log'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置输出格式LineFormatter(Monolog\Formatter\LineFormatter)， ignore context and extra</span></span><br><span class="line">        <span class="variable">$handler</span>-&gt;setFormatter(<span class="keyword">new</span> LineFormatter(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$instance</span>-&gt;pushHandler(<span class="variable">$handler</span>);</span><br><span class="line">        <span class="variable">$instance</span>-&gt;<span class="variable">$method</span>(<span class="variable">$message</span>, <span class="variable">$context</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>说明下，<code>__callStatic</code>  方法是php5.3+以来 非常方便的一个魔术方法。</p>
<h2 id="More_Info"><a href="#More_Info" class="headerlink" title="More Info"></a>More Info</h2><ul>
<li><a href="http://laravelacademy.org/docs/lumen" target="_blank" rel="external">Lumen中文文档</a></li>
<li><a href="http://coolshell.cn/articles/9949.html" target="_blank" rel="external">IoC/DIP其实是一种管理思想</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8BB0"><a href="#u524D_u8BB0" class="headerlink" title="前记"></a>前记</h2><p>今天在使用<strong>lumen</strong>自带的类Log的时候，发现每次记录一个Log，总会]]>
    </summary>
    
      <category term="Log" scheme="http://sphenginx.github.io/tags/Log/"/>
    
      <category term="ioc" scheme="http://sphenginx.github.io/tags/ioc/"/>
    
      <category term="lumen" scheme="http://sphenginx.github.io/tags/lumen/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我眼里的架构师]]></title>
    <link href="http://sphenginx.github.io/2015/12/17/architect/"/>
    <id>http://sphenginx.github.io/2015/12/17/architect/</id>
    <published>2015-12-17T10:03:01.000Z</published>
    <updated>2015-12-18T01:46:07.186Z</updated>
    <content type="html"><![CDATA[<p><img src="http://sphenginx.github.io/images/architect.png" alt="architect"></p>
<p>攻城狮，美其名曰架构师。相信每家公司对架构师的定义和要求都不一样，今天我仅以我的角度，聊一聊我眼里的架构狮。</p>
<p>几年前，我对架构师的印象，停留在：画漂亮的设计图，研究高性能，技术攻关一把手。反正就是各种技术高手的标签都可以贴上去。最近两三年，和自己做的事情、职责多少有一点点关系，思路发生了一些变化，总结下来，我觉得架构师的关注点应该是：  </p>
<ul>
<li>架构团队</li>
<li>架构技术</li>
<li>架构流程规范</li>
<li>架构产品</li>
<li>架构客户</li>
</ul>
<h2 id="u67B6_u6784_u56E2_u961F"><a href="#u67B6_u6784_u56E2_u961F" class="headerlink" title="架构团队"></a>架构团队</h2><p>没有团队，就没有架构师。</p>
<h3 id="u67B6_u6784_u5E08_u9700_u8981_u5173_u6CE8_u5E76_u4E0D_u65AD_u4F18_u5316_u56E2_u961F_u7684_u7ED3_u6784_u3002"><a href="#u67B6_u6784_u5E08_u9700_u8981_u5173_u6CE8_u5E76_u4E0D_u65AD_u4F18_u5316_u56E2_u961F_u7684_u7ED3_u6784_u3002" class="headerlink" title="架构师需要关注并不断优化团队的结构。"></a>架构师需要关注并不断优化团队的结构。</h3><p>一个20几个人的开发团队，架构师作为团队的主角，需要能最大化团队的效率：包括把什么样的人放到什么样的位置和哪些人做哪方面的对接；根据团队成员的特点如何做技术配比和责任分工，如何组织好团队协助自己完成技术攻关、技术研究和选型。</p>
<h3 id="u67B6_u6784_u5E08_u8FD8_u9700_u8981_u65F6_u523B_u5173_u6CE8_u56E2_u961F_u7684_u6210_u957F_u8DEF_u7EBF_u3002"><a href="#u67B6_u6784_u5E08_u8FD8_u9700_u8981_u65F6_u523B_u5173_u6CE8_u56E2_u961F_u7684_u6210_u957F_u8DEF_u7EBF_u3002" class="headerlink" title="架构师还需要时刻关注团队的成长路线。"></a>架构师还需要时刻关注团队的成长路线。</h3><p>对每个开发组的lead，帮助他们在最短的时间内达到他们的下一个技术制高点，同时帮助他们筛选出组里的后备军，在合适的时间，给后备军独立攻关亦或带小团队成长的机会。</p>
<h2 id="u67B6_u6784_u6280_u672F"><a href="#u67B6_u6784_u6280_u672F" class="headerlink" title="架构技术"></a>架构技术</h2><p>做为架构师的看家本领，架构师需要做到的当然是技术过硬、视野够广。至少在某一个领域有一技之长，同时不失对当前流行技术的了解、深入把控。主要体现在：</p>
<h3 id="u6280_u672F_u9009_u578B"><a href="#u6280_u672F_u9009_u578B" class="headerlink" title="技术选型"></a>技术选型</h3><p>选择合适的技术，本身就是仁者见仁、智者见智。但是，对架构师的挑战，在于你是否是在任何项目、任何产品上都坚持只用自己熟悉的技术。接触过很多“架构师”，坚持的认为熟悉的就是最棒的、不管黑猫白猫抓到耗子就是好猫。这是我坚决反对的观点。既然是架构师，技术上必然有一技之长，要么编程牛逼可以从应用层写到内核层，要么对数据有很强的分析能力，要么对分布式高性能有很多的研究和经验，要么是客户端架构师对iOS/Android 有深入的研究，但是，不管是哪一个领域的高手，都不应该也不能够丢失对新技术的嗅觉敏感度。好的架构师，一定是在“老的技术”的保障下，逐步的研究、采用、推广当前流行的新技术，然后在合适的时间，完成新老技术方案的升级。同时，还需要考虑产品的特点、团队的结构以及自己对选用技术的把控能力。</p>
<h3 id="u5E73_u53F0_u9009_u578B"><a href="#u5E73_u53F0_u9009_u578B" class="headerlink" title="平台选型"></a>平台选型</h3><p>我把平台选型拎出来，是因为最近两三年云的快速的发展和变革。做为“有追求的架构师”，你是坚持创造一切，还是拥抱云服务？我是一个云服务的坚决拥护者，道理很简单，让合适的团队做合适的事情，同时，对于中小规模的互联网产品线，利用远比创造成本更低。所以，我们自己的产品，能托管于云端的，坚决不自己构建。目前我们在用的云服务：阿里云托管所有的主机，阿里云RDS托管数据，阿里云OSS数据备份，阿里云ODPS大数据计算，七牛云文件存储和文件CDN，云片发SMS短信，Send Cloud发送邮件通知。</p>
<h3 id="u6301_u7EED_u4EA4_u4ED8"><a href="#u6301_u7EED_u4EA4_u4ED8" class="headerlink" title="持续交付"></a>持续交付</h3><p>再牛的架构师，如果不能带领团队把产品交付出来，即使拥有再牛逼的技术、技术选型和平台选型再高大上，也于事无补。架构师需要平衡好架构设计、产品的交付周期、技术方案的难易程度。</p>
<h3 id="u67B6_u6784_u5E08_u5931_u4E1A_u8BBA"><a href="#u67B6_u6784_u5E08_u5931_u4E1A_u8BBA" class="headerlink" title="架构师失业论"></a>架构师失业论</h3><p>今天和团队聊天的时候，提到了“架构师失业论”。我一直认为，当今技术和平台的变革，不出几年，架构师们都可以统统失业了。公司付给架构狮们高额的薪水，可以完全足够用来支付给云平台。未来，云将主导一切，托管一切。你看看AWS的Lambda，你看看现在活起来的Mesos，已经可以让开发者忘记内存、CPU、磁盘的存在了，随着访问量自动无限扩容。你说，还要你架构师有何用呢？</p>
<h2 id="u67B6_u6784_u89C4_u8303"><a href="#u67B6_u6784_u89C4_u8303" class="headerlink" title="架构规范"></a>架构规范</h2><p>规范在很大程度上绝对了开发团队的开发效率、开发团队和产品团队的沟通效率。在我看来，规范包括但不限于：</p>
<h3 id="u5F00_u53D1_u89C4_u8303"><a href="#u5F00_u53D1_u89C4_u8303" class="headerlink" title="开发规范"></a>开发规范</h3><p>包括代码的目录结构规范，编码规范，SCM管理规范，包管理和工具规范等等。</p>
<h3 id="u53D1_u5E03_u89C4_u8303"><a href="#u53D1_u5E03_u89C4_u8303" class="headerlink" title="发布规范"></a>发布规范</h3><p>又包括代码版本管理规范，开发环境、测试环境、Staging环境以及生产环境要求，上线发布的流程等等。</p>
<h3 id="u6C9F_u901A_u89C4_u8303"><a href="#u6C9F_u901A_u89C4_u8303" class="headerlink" title="沟通规范"></a>沟通规范</h3><p>包括团队沟通的工具、形式，代码review的方式方法等。</p>
<p>我们目前在使用Git，同时，遵循 git flow，代码review走merge request，CI集成gitlab CI &amp; docker runner/Jenkins。合理利用工具，可以是开发效率事半功倍。</p>
<h2 id="u67B6_u6784_u4EA7_u54C1"><a href="#u67B6_u6784_u4EA7_u54C1" class="headerlink" title="架构产品"></a>架构产品</h2><p>产品和架构师有什么关系？架构师除了对产品有100%的了解，还需要了解竞争对手的产品、功能，以及技术能力。同时，架构师做为产品团队和开发团队的沟通枢纽，需要协调好团队沟通、合作中出现的问题。当然第一的需要避免的发生的就是 “开发工程师拿刀砍了产品经理”！…</p>
<h2 id="u5199_u5728_u6700_u540E"><a href="#u5199_u5728_u6700_u540E" class="headerlink" title="写在最后"></a>写在最后</h2><p>也有人问我，架构师有什么优秀的品质。</p>
<p>第一，品质是人特有的特性，所以，好的品质并不需要区分架构师和非架构师。所以，那些你知道的优秀品质，对架构师统统适用。</p>
<p>第二，我怎么知道，我又不是架构师……</p>
<p>转自<a href="http://mp.weixin.qq.com/s?__biz=MzI4MjA4ODU0Ng==&amp;mid=401373742&amp;idx=1&amp;sn=e27102eda726a2a56ee097013c2754ac" target="_blank" rel="external">大房说眼里的架构师</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://sphenginx.github.io/images/architect.png" alt="architect"></p>
<p>攻城狮，美其名曰架构师。相信每家公司对架构师的定义和要求都不一样，今天我仅以我的角度，聊一聊我眼里的架构狮。]]>
    </summary>
    
      <category term="架构师" scheme="http://sphenginx.github.io/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown学习笔记]]></title>
    <link href="http://sphenginx.github.io/2015/12/07/markdown/"/>
    <id>http://sphenginx.github.io/2015/12/07/markdown/</id>
    <published>2015-12-07T09:03:01.000Z</published>
    <updated>2015-12-11T04:58:31.391Z</updated>
    <content type="html"><![CDATA[<h2 id="Markdown_u6982_u8FF0"><a href="#Markdown_u6982_u8FF0" class="headerlink" title="Markdown概述"></a>Markdown概述</h2><h3 id="u5B97_u65E8"><a href="#u5B97_u65E8" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们 <code>使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档</code>。</p>
<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <em>Setext</em>、<em>atx</em>、<em>Textile</em>、<em>reStructuredText</em>、<em>Grutatext</em> 和 <em>EtText</em>，而最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
<h3 id="u517C_u5BB9HTML"><a href="#u517C_u5BB9HTML" class="headerlink" title="兼容HTML"></a>兼容HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>
<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
<p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p>
<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这是另一个普通段落。</span><br></pre></td></tr></table></figure></p>
<p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<em>强调</em>会没有效果。</p>
<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>
<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
<h2 id="Markdown_u57FA_u672C_u8BED_u6CD5"><a href="#Markdown_u57FA_u672C_u8BED_u6CD5" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><h3 id="u4EE3_u7801_u533A_u57DF"><a href="#u4EE3_u7801_u533A_u57DF" class="headerlink" title="代码区域"></a>代码区域</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 <font color="red">`function_name()`</font>  实现</p>
<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>
<p>支持的语言：<code>actionscript</code>, <code>apache</code>, <code>bash</code>, <code>clojure</code>, <code>cmake</code>, <code>coffeescript</code>, <code>cpp</code>, <code>cs</code>, <code>css</code>, <code>d</code>, <code>delphi</code>, <code>django</code>, <code>erlang</code>, <code>go</code>, <code>haskell</code>, <code>html</code>, <code>http</code>, <code>ini</code>, <code>java</code>, <code>javascript</code>, <code>json</code>, <code>lisp</code>, <code>lua</code>, <code>matlab</code>, <code>nginx</code>, <code>objectivec</code>, <code>perl</code>, <code>php</code>, <code>python</code>, <code>r</code>, <code>ruby</code>, <code>scala</code>, <code>smalltalk</code>, <code>sql</code>, <code>tex</code>, <code>vbscript</code>, <code>xml</code></p>
<pre><code>
	&#96`` javascript
	$(document).ready(function () {
	    alert('hello world');
	});
	&#96``
	
</code></pre><p><a href="https://github.com/hexojs/hexo/issues/1636" target="_blank" rel="external">谢谢hexo漩涡的帮助</a>!<br><a href="https://github.com/hexojs/site/blame/master/source/docs/tag-plugins.md#L135-L139" target="_blank" rel="external">详见hexo tag plugins</a></p>
<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果</p>
<pre>
    def g(x):
        yield from range(x, 0, -1)
    yield from range(x)
</pre>

<h3 id="u6807_u9898"><a href="#u6807_u9898" class="headerlink" title="标题"></a>标题</h3><p>Markdown提供了两种方式（Setext和Atx）来显示标题。<br>例:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Setext方式</span><br><span class="line"><span class="header">标题1</span><br><span class="line">=================</span></span><br><span class="line"><span class="header">标题2</span><br><span class="line">-----------------</span></span><br><span class="line"></span><br><span class="line">Atx方式</span><br><span class="line"># 标题1</span><br><span class="line">## 标题2</span><br><span class="line">###### 标题6</span><br></pre></td></tr></table></figure></p>
<h3 id="u6362_u884C"><a href="#u6362_u884C" class="headerlink" title="换行"></a>换行</h3><p>在文字的末尾使用两个或两个以上的空格来表示换行。</p>
<h3 id="u5F15_u7528"><a href="#u5F15_u7528" class="headerlink" title="引用"></a>引用</h3><p>行首使用<code>[大于号+空格]</code>表示引用段落，内部可以嵌套多个引用。</p>
<p>语法：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="blockquote">&gt; 这是一个引用，</span></span><br><span class="line"><span class="blockquote">&gt; 这里木有换行，</span></span><br><span class="line"><span class="blockquote">&gt; 在这里换行了。</span></span><br><span class="line"><span class="blockquote">&gt; &gt; 内部嵌套</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<blockquote>
<p>这是一个引用，<br>这里木有换行，<br>在这里换行了。</p>
<blockquote>
<p>内部嵌套</p>
</blockquote>
</blockquote>
<h3 id="u5217_u8868"><a href="#u5217_u8868" class="headerlink" title="列表"></a>列表</h3><ul>
<li>无序列表使用 *、 + 或 - 后面加上空格来表示。</li>
</ul>
<p>语法：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">Item </span><span class="number">1</span></span><br><span class="line">* <span class="keyword">Item </span><span class="number">2</span></span><br><span class="line">* <span class="keyword">Item </span><span class="number">3</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">Item </span><span class="number">1</span></span><br><span class="line">+ <span class="keyword">Item </span><span class="number">2</span></span><br><span class="line">+ <span class="keyword">Item </span><span class="number">3</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">Item </span><span class="number">1</span></span><br><span class="line">- <span class="keyword">Item </span><span class="number">2</span></span><br><span class="line">- <span class="keyword">Item </span><span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<ul>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ul>
<ul>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ul>
<ul>
<li>Item 1</li>
<li>Item 2</li>
<li><p>Item 3</p>
</li>
<li><p>有序列表使用数字加英文句号加空格表示。<br>语法：  </p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 列表前使用 [数字+空格]</span><br><span class="line"><span class="number">2.</span> 我们会自动帮你添加数字</span><br><span class="line"><span class="number">7.</span> 不用担心数字不对，显示的时候我们会自动把这行的 <span class="number">7</span> 纠正为 <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>效果：  </p>
<ol>
<li>列表前使用 [数字+空格]</li>
<li>我们会自动帮你添加数字</li>
<li>不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</li>
</ol>
<h3 id="u5F3A_u8C03"><a href="#u5F3A_u8C03" class="headerlink" title="强调"></a>强调</h3><p>Markdown使用 * 或 _ 表示强调。</p>
<p>语法：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">单星号 = <span class="keyword">*</span>斜体<span class="keyword">*</span></span><br><span class="line">单下划线 = _斜体_</span><br><span class="line">双星号 = <span class="keyword">*</span><span class="keyword">*</span>加粗<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">双下划线 = __加粗__</span><br><span class="line">删除线 = ~~加粗~~</span><br></pre></td></tr></table></figure></p>
<p>效果：<br>单星号 = <em>斜体</em><br>单下划线 = <em>斜体</em><br>双星号 = <strong>加粗</strong><br>双下划线 = <strong>加粗</strong><br>删除线 = <del>加粗</del></p>
<h3 id="u8868_u683C"><a href="#u8868_u683C" class="headerlink" title="表格"></a>表格</h3><p>语法：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> Tables        </span>|<span class="string"> Are           </span>|<span class="string"> Cool  </span>|</span><br><span class="line">|<span class="string"> ------------- </span>|<span class="string">:-------------:</span>|<span class="string"> -----:</span>|</span><br><span class="line">|<span class="string"> col 3 is      </span>|<span class="string"> right-aligned </span>|<span class="string"> $1600 </span>|</span><br><span class="line">|<span class="string"> col 2 is      </span>|<span class="string"> centered      </span>|<span class="string">   $12 </span>|</span><br><span class="line">|<span class="string"> zebra stripes </span>|<span class="string"> are neat      </span>|<span class="string">    $1 </span>|</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">dog |<span class="string"> bird </span>|<span class="string"> cat</span><br><span class="line">----</span>|<span class="string">------</span>|<span class="string">----</span><br><span class="line">foo </span>|<span class="string"> foo  </span>|<span class="string"> foo</span><br><span class="line">bar </span>|<span class="string"> bar  </span>|<span class="string"> bar</span><br><span class="line">baz </span>|<span class="string"> baz  </span>|<span class="string"> baz</span></span><br></pre></td></tr></table></figure></p>
<p>效果：  </p>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<p>或</p>
<table>
<thead>
<tr>
<th>dog</th>
<th>bird</th>
<th>cat</th>
</tr>
</thead>
<tbody>
<tr>
<td>foo</td>
<td>foo</td>
<td>foo</td>
</tr>
<tr>
<td>bar</td>
<td>bar</td>
<td>bar</td>
</tr>
<tr>
<td>baz</td>
<td>baz</td>
<td>baz</td>
</tr>
</tbody>
</table>
<h3 id="u94FE_u63A5"><a href="#u94FE_u63A5" class="headerlink" title="链接"></a>链接</h3><p>Markdown支持两种风格的链接：<code>Inline</code> 和 <code>Reference</code> 。</p>
<p>Inline ：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用空格加”title属性”。<br>Reference ：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为<a href="http://sphenginx.github.io" title="可选的title">链接文本</a>；定义部分可以出现在文本中的其他位置，格式为 <a href="http://sphenginx.github.io" title="可选的title">ref</a>: <a href="http://some/link/address" target="_blank" rel="external">http://some/link/address</a> (可选的标题)。<br>注：ref中不区分大小写。<br>语法：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个Inline[<span class="link_label">示例</span>](<span class="link_url">http://sphenginx.github.io "可选的title"</span>)。</span><br><span class="line">这是一个Reference[<span class="link_label">示例</span>][<span class="link_reference">ref</span>]。</span><br><span class="line">[<span class="link_reference">ref</span>]:<span class="link_url">http://sphenginx.github.io (可选的title)</span></span><br></pre></td></tr></table></figure></p>
<p>效果：<br>这是一个Inline<a href="http://sphenginx.github.io" title="可选的title">示例</a>。<br>这是一个Reference<a href="http://sphenginx.github.io" title="可选的title">示例</a>。  </p>
<h3 id="u56FE_u7247"><a href="#u56FE_u7247" class="headerlink" title="图片"></a>图片</h3><p>图片的使用方法基本上和链接类似，只是在中括号前加叹号。</p>
<p>语法:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="link_label">图片名称</span>](<span class="link_url">http://图片网址</span>)</span><br><span class="line">![<span class="link_label">GitHub头像</span>](<span class="link_url">https://avatars1.githubusercontent.com/u/1829395?v=3&amp;s=460</span>)</span><br></pre></td></tr></table></figure></p>
<p>效果:  </p>
<p><img src="https://avatars1.githubusercontent.com/u/1829395?v=3&amp;s=460" alt="GitHub头像"></p>
<p>注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记 <code>&lt;img&gt;</code>。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">img</span> src=<span class="string">"https://avatars1.githubusercontent.com/u/1829395?v=3&amp;s=460"</span> <span class="attribute">width</span>=<span class="string">"400"</span> <span class="attribute">height</span>=<span class="string">"100"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://avatars1.githubusercontent.com/u/1829395?v=3&s=460" width="400" height="100"></p>
<h3 id="u5206_u9694_u7EBF"><a href="#u5206_u9694_u7EBF" class="headerlink" title="分隔线"></a>分隔线</h3><p>在一行中使用三个或三个以上的*、-或_可以添加分隔线，其中可以有空白，但是不能有其他字符。</p>
<p>语法：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<hr>
<h3 id="u8F6C_u4E49_u5B57_u7B26"><a href="#u8F6C_u4E49_u5B57_u7B26" class="headerlink" title="转义字符"></a>转义字符</h3><p>Markdown中的转义字符为\，可以转义的有：<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="command">\\</span> 反斜杠</span><br><span class="line"><span class="command">\`</span> 反引号</span><br><span class="line"><span class="command">\*</span> 星号</span><br><span class="line"><span class="command">\_</span> 下划线</span><br><span class="line"><span class="command">\&#123;</span><span class="command">\&#125;</span> 大括号</span><br><span class="line"><span class="command">\[</span><span class="command">\]</span> 中括号</span><br><span class="line"><span class="command">\(</span><span class="command">\)</span> 小括号</span><br><span class="line"><span class="command">\#</span> 井号</span><br><span class="line"><span class="command">\+</span> 加号</span><br><span class="line"><span class="command">\-</span> 减号</span><br><span class="line"><span class="command">\.</span> 英文句号</span><br><span class="line"><span class="command">\!</span> 感叹号</span><br></pre></td></tr></table></figure></p>
<h3 id="u989C_u8272_u4E0E_u5B57_u4F53"><a href="#u989C_u8272_u4E0E_u5B57_u4F53" class="headerlink" title="颜色与字体"></a>颜色与字体</h3><p>markdown 不支持颜色和字体，所以如果想添加颜色或字体，只能使用 html 标签来实现这些需求了。</p>
<p>语法:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="attribute">font</span> <span class="attribute">color</span>=<span class="string">"red"</span>&gt;我是红色的&lt;/<span class="attribute">font</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>效果:  </p>
<font color="red">我是红色的</font>

<h2 id="u9AD8_u7EA7_u6280_u5DE7"><a href="#u9AD8_u7EA7_u6280_u5DE7" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="u5236_u4F5C_u4E00_u4EFD_u5F85_u529E_u4E8B_u5B9C_Todo__u5217_u8868"><a href="#u5236_u4F5C_u4E00_u4EFD_u5F85_u529E_u4E8B_u5B9C_Todo__u5217_u8868" class="headerlink" title="制作一份待办事宜 Todo 列表"></a>制作一份待办事宜 Todo 列表</h3><p>语法：  </p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> [ ] 支持以 <span class="constant">PDF</span> 格式导出文稿</span><br><span class="line"></span>-<span class="ruby"> [ ] 改进 <span class="constant">Cmd</span> 渲染算法，使用局部渲染技术提高渲染效率</span><br><span class="line"></span>-<span class="ruby"> [x] 新增 <span class="constant">Todo</span> 列表功能</span><br><span class="line"></span>-<span class="ruby"> [x] 修复 <span class="constant">LaTex</span> 公式渲染问题</span><br><span class="line"></span>-<span class="ruby"> [x] 新增 <span class="constant">LaTex</span> 公式编号功能</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="u9AD8_u6548_u7ED8_u5236_u6D41_u7A0B_u56FE_7C_u5E8F_u5217_u56FE"><a href="#u9AD8_u6548_u7ED8_u5236_u6D41_u7A0B_u56FE_7C_u5E8F_u5217_u56FE" class="headerlink" title="高效绘制流程图|序列图"></a>高效绘制流程图|序列图</h3><p>不知道为啥Git pages 不支持这种写法，可以copy在最新的Markdown语法解析器里面试试，或者点击 <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Markdown在线编辑器</a> 尝试</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: <span class="type">Start</span></span><br><span class="line"><span class="keyword">op</span>=&gt;operation: <span class="type">Your</span> <span class="type">Operation</span></span><br><span class="line">cond=&gt;condition: <span class="type">Yes</span> or <span class="type">No</span>?</span><br><span class="line">e=&gt;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">st-&gt;<span class="keyword">op</span>-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;<span class="keyword">op</span></span><br></pre></td></tr></table></figure>
<h3 id="u884C_u5185_HTML__u5143_u7D20"><a href="#u884C_u5185_HTML__u5143_u7D20" class="headerlink" title="行内 HTML 元素"></a>行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括 <code>&lt;kdb&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code> ，如</p>
<ul>
<li>键位显示<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="tag">&lt;<span class="title">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;<span class="title">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="title">kbd</span>&gt;</span>Alt<span class="tag">&lt;<span class="title">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="title">kbd</span>&gt;</span>Del<span class="tag">&lt;<span class="title">kbd</span>&gt;</span> 重启电脑</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>效果:<br>使用  <kbd>Ctrl<kbd>+<kbd>Alt<kbd>+<kbd>Del<kbd>  重启电脑</kbd></kbd></kbd></kbd></kbd></kbd></p>
<ul>
<li><p>代码块</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="tag">&lt;<span class="title">pre</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span> 元素同样可以形成代码块</span><br></pre></td></tr></table></figure>
</li>
<li><p>粗斜体</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;b&gt;</span> Markdown 在此处同样适用，如 <span class="keyword">*</span>加粗<span class="keyword">*</span> <span class="variable">&lt;/b&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="u6269_u5C55"><a href="#u6269_u5C55" class="headerlink" title="扩展"></a>扩展</h3><p>支持 jsfiddle、gist、runjs、优酷视频，直接填写 url，在其之后会自动添加预览点击会展开相关内容。<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="link_url">http://&#123;url_of_the_fiddle&#125;/embedded/</span>[<span class="link_label">&#123;tabs&#125;/[&#123;style&#125;</span>]]/</span><br><span class="line">https://gist.github.com/&#123;gist<span class="emphasis">_id&#125;</span><br><span class="line">http://runjs.cn/detail/&#123;id&#125;</span><br><span class="line">http://v.youku.com/v_</span>show/id<span class="emphasis">_&#123;video_</span>id&#125;.html</span><br></pre></td></tr></table></figure></p>
<h3 id="u516C_u5F0F"><a href="#u516C_u5F0F" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$$ x = &#123;-b \pm \<span class="built_in">sqrt</span>&#123;b^<span class="number">2</span>-<span class="number">4</span>ac&#125; \over <span class="number">2</span>a&#125;. $$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">x \href&#123;why-equal.html&#125;&#123;=&#125; y^<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p>
<p>效果如下：<br>$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. $$</p>
<p>$$<br>x \href{why-equal.html}{=} y^2 + 1<br>$$</p>
<h2 id="Markdown_u7F16_u8F91_u5668"><a href="#Markdown_u7F16_u8F91_u5668" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h2><ul>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">欢迎使用 Cmd Markdown 编辑阅读器</a></li>
</ul>
<p>Win平台</p>
<ul>
<li><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a></li>
<li><a href="http://pad.haroopress.com/" target="_blank" rel="external">Haroopad - The next document processor</a><br>进入首页之后，点击用户进入下载界面</li>
</ul>
<p>Linux平台</p>
<ul>
<li><a href="http://sourceforge.net/p/retext/home/ReText/" target="_blank" rel="external">ReText</a></li>
</ul>
<p>Mac平台</p>
<ul>
<li><a href="http://mouapp.com/" target="_blank" rel="external">Mou</a></li>
</ul>
<h2 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h2><p>以上几种格式是比较常用的格式，所以我们针对这些语法做了比较详细的说明。除这些之外，Markdown 还有其他语法，如想了解和学习更多，可以参考这篇<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">『Markdown 语法说明』</a>。:smile: (It seems the hexo does not support emoji)…… </p>
<h2 id="u9644"><a href="#u9644" class="headerlink" title="附"></a>附</h2><ul>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">Github markdown guide</a></li>
<li><a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external">emoji-cheat-sheet</a></li>
</ul>
<p>强烈建议您现在就立马用 Markdown 写一篇文章吧，体会一下 Markdown 的优雅之处！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Markdown_u6982_u8FF0"><a href="#Markdown_u6982_u8FF0" class="headerlink" title="Markdown概述"></a>Markdown概述</h2><h3 id="u5B97_u65E8">]]>
    </summary>
    
      <category term="markdown" scheme="http://sphenginx.github.io/tags/markdown/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP5.3、5.4、5.5、5.6新特性]]></title>
    <link href="http://sphenginx.github.io/2015/12/01/php-new-features/"/>
    <id>http://sphenginx.github.io/2015/12/01/php-new-features/</id>
    <published>2015-12-01T12:03:01.000Z</published>
    <updated>2015-12-17T06:43:42.796Z</updated>
    <content type="html"><![CDATA[<h2 id="u8BF4_u660E"><a href="#u8BF4_u660E" class="headerlink" title="说明"></a>说明</h2><p>最近公司要用lumen框架开发应用APP的接口，用到了PHP新版本，一些新特性必须要了解，且有些可以在开发时就使用，如果不使用，那么何必升级PHP版本呢，显得有些得不偿失了！<br>所以整理了一下 一些特性，有可能不全，待添加。</p>
<h2 id="PHP5-3_new_feature"><a href="#PHP5-3_new_feature" class="headerlink" title="PHP5.3 new feature"></a>PHP5.3 new feature</h2><h3 id="u652F_u6301_u547D_u540D_u7A7A_u95F4__uFF08Namespace_uFF09"><a href="#u652F_u6301_u547D_u540D_u7A7A_u95F4__uFF08Namespace_uFF09" class="headerlink" title="支持命名空间 （Namespace）"></a>支持命名空间 （Namespace）</h3><p>毫无疑问，命名空间是PHP5.3所带来的最重要的新特性。<code>在PHP5.3中，则只需要指定不同的命名空间即可，命名空间的分隔符为反斜杆\。</code><br>Demo:<br>在select.php 中定义命名空间<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>    </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Zend</span>\<span class="title">Db</span>\<span class="title">Table</span>;    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Select</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样即使其它命名空间下存在名为Select的类，程序在调用时也不会产生冲突。代码的可读性也有所增加。<br>调用方法<br>call.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>    </span><br><span class="line"><span class="comment">//namespace Zend\Db;    </span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'select.php'</span>);    </span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Zend\Db\Table\Select();</span><br><span class="line"><span class="variable">$s</span>-&gt;test();</span><br></pre></td></tr></table></figure></p>
<h3 id="u652F_u6301_u5EF6_u8FDF_u9759_u6001_u7ED1_u5B9A_uFF08Late_Static_Binding_uFF09"><a href="#u652F_u6301_u5EF6_u8FDF_u9759_u6001_u7ED1_u5B9A_uFF08Late_Static_Binding_uFF09" class="headerlink" title="支持延迟静态绑定（Late Static Binding）"></a>支持延迟静态绑定（Late Static Binding）</h3><p>在PHP5中，我们可以在类中通过self关键字或者<strong>CLASS</strong>来判断或调用当前类。但有一个问题，如果我们是在子类中调用，得到的结果将是父类。因为在继承父类的时候，静态成员就已经被绑定了。 例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">self</span>::who();    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line">B::test();</span><br></pre></td></tr></table></figure></p>
<p>以上代码输出的结果是：<br>A </p>
<p>这和我们的预期不同，我们原来想得到子类的相应结果。<br><code>PHP 5.3.0中增加了一个static关键字来引用当前类，即实现了延迟静态绑定：</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">static</span>::who(); <span class="comment">// 这里实现了延迟的静态绑定    </span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">         <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line">    </span><br><span class="line">B::test();</span><br></pre></td></tr></table></figure></p>
<p>以上代码输出的结果是：<br>B </p>
<h3 id="u652F_u6301goto_u8BED_u53E5"><a href="#u652F_u6301goto_u8BED_u53E5" class="headerlink" title="支持goto语句"></a>支持goto语句</h3><p>多数计算机程序设计语言中都支持无条件转向语句goto，当程序执行到goto语句时，即转向由goto语句中的标号指出的程序位置继续执行。尽管goto语句有可能会导致程序流程不清晰，可读性减弱，但在某些情况下具有其独特的方便之处，例如中断深度嵌套的循环和 if 语句。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>    </span><br><span class="line"><span class="keyword">goto</span> a;    </span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Foo'</span>;    </span><br><span class="line">a:    </span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Bar'</span>;    </span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>,<span class="variable">$j</span>=<span class="number">50</span>; <span class="variable">$i</span>&lt;<span class="number">100</span>; <span class="variable">$i</span>++) &#123;    </span><br><span class="line">  <span class="keyword">while</span>(<span class="variable">$j</span>--) &#123;    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$j</span>==<span class="number">17</span>) <span class="keyword">goto</span> end;    </span><br><span class="line">  &#125;     </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"i = $i"</span>;    </span><br><span class="line">end:    </span><br><span class="line"><span class="keyword">echo</span> <span class="string">'j hit 17'</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="u652F_u6301_u95ED_u5305_u3001Lambda/Anonymous_u51FD_u6570"><a href="#u652F_u6301_u95ED_u5305_u3001Lambda/Anonymous_u51FD_u6570" class="headerlink" title="支持闭包、Lambda/Anonymous函数"></a>支持闭包、Lambda/Anonymous函数</h3><p>闭包（Closure）函数和Lambda函数的概念来自于函数编程领域。例如JavaScript 是支持闭包和 lambda 函数的最常见语言之一。<br>在PHP中，我们也可以通过create_function()在代码运行时创建函数。但有一个问题：创建的函数仅在运行时才被编译，而不与其它代码同时被编译成执行码，因此我们无法使用类似APC这样的执行码缓存来提高代码执行效率。<br>在PHP5.3中，我们可以使用Lambda/匿名函数来定义一些临时使用（即用即弃型）的函数，以作为array_map()/array_walk()等函数的回调函数。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>    </span><br><span class="line"><span class="keyword">echo</span> preg_replace_callback(<span class="string">'~-([a-z])~'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$match</span>)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> strtoupper(<span class="variable">$match</span>[<span class="number">1</span>]);    </span><br><span class="line">&#125;, <span class="string">'hello-world'</span>);    </span><br><span class="line"><span class="comment">// 输出 helloWorld    </span></span><br><span class="line"><span class="variable">$greet</span> = <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$name</span>)</span>    </span><br><span class="line"></span>&#123;    </span><br><span class="line">    printf(<span class="string">"Hello %s\r\n"</span>, <span class="variable">$name</span>);    </span><br><span class="line">&#125;;    </span><br><span class="line"><span class="variable">$greet</span>(<span class="string">'World'</span>);    </span><br><span class="line"><span class="variable">$greet</span>(<span class="string">'PHP'</span>);    </span><br><span class="line"><span class="comment">//...在某个类中    </span></span><br><span class="line"><span class="variable">$callback</span> =      <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$quantity</span>, <span class="variable">$product</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$tax</span>, &amp;<span class="variable">$total</span>)</span>         </span>&#123;    </span><br><span class="line">   <span class="variable">$pricePerItem</span> = constant(<span class="keyword">__CLASS__</span> . <span class="string">"::PRICE_"</span> .  strtoupper(<span class="variable">$product</span>));    </span><br><span class="line">   <span class="variable">$total</span> += (<span class="variable">$pricePerItem</span> * <span class="variable">$quantity</span>) * (<span class="variable">$tax</span> + <span class="number">1.0</span>);    </span><br><span class="line"> &#125;;    </span><br><span class="line">array_walk(<span class="variable">$products</span>, <span class="variable">$callback</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="u65B0_u589E_u4E24_u4E2A_u9B54_u672F_u65B9_u6CD5__callStatic_28_29_u548C__invoke_28_29"><a href="#u65B0_u589E_u4E24_u4E2A_u9B54_u672F_u65B9_u6CD5__callStatic_28_29_u548C__invoke_28_29" class="headerlink" title="新增两个魔术方法<code>__callStatic()</code>和<code>__invoke()</code>"></a>新增两个魔术方法<code>__callStatic()</code>和<code>__invoke()</code></h3><p>PHP中原本有一个魔术方法<code>__call()</code>，当代码调用对象的某个不存在的方法时该魔术方法会被自动调用。新增的<code>__callStatic()</code>方法则只用于静态类方法。当尝试调用类中不存在的静态方法时，<code>__callStatic()</code>魔术方法将被自动调用。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">(<span class="variable">$name</span>, <span class="variable">$arguments</span>)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 参数 $name 大小写敏感    </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"调用对象方法 '$name' "</span>    </span><br><span class="line">             . implode(<span class="string">' -- '</span>, <span class="variable">$arguments</span>). <span class="string">"\n"</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">/**  PHP 5.3.0 以上版本中本类方法有效  */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">(<span class="variable">$name</span>, <span class="variable">$arguments</span>)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 参数 $name 大小写敏感    </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"调用静态方法 '$name' "</span>    </span><br><span class="line">             . implode(<span class="string">' -- '</span>, <span class="variable">$arguments</span>). <span class="string">"\n"</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line">  </span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> MethodTest;    </span><br><span class="line"><span class="variable">$obj</span>-&gt;runTest(<span class="string">'通过对象调用'</span>);    </span><br><span class="line">MethodTest::runTest(<span class="string">'静态调用'</span>);  <span class="comment">// As of PHP 5.3.0</span></span><br></pre></td></tr></table></figure></p>
<p>以上代码执行后输出如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用对象方法<span class="string">'runTest'</span> –- 通过对象调用</span><br><span class="line">调用静态方法<span class="string">'runTest'</span> –- 静态调用</span><br></pre></td></tr></table></figure></p>
<p>以函数形式来调用对象时，<code>__invoke()</code>方法将被自动调用。 </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">(<span class="variable">$name</span>, <span class="variable">$arguments</span>)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 参数 $name 大小写敏感    </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Calling object method '$name' "</span>    </span><br><span class="line">             . implode(<span class="string">', '</span>, <span class="variable">$arguments</span>). <span class="string">"\n"</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**  PHP 5.3.0 以上版本中本类方法有效  */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">(<span class="variable">$name</span>, <span class="variable">$arguments</span>)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 参数 $name 大小写敏感    </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Calling static method '$name' "</span>    </span><br><span class="line">             . implode(<span class="string">', '</span>, <span class="variable">$arguments</span>). <span class="string">"\n"</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> MethodTest;    </span><br><span class="line"><span class="variable">$obj</span>-&gt;runTest(<span class="string">'in object context'</span>);    </span><br><span class="line">MethodTest::runTest(<span class="string">'in static context'</span>);  <span class="comment">// As of PHP 5.3.0</span></span><br></pre></td></tr></table></figure>
<h3 id="u4E09_u5143_u8FD0_u7B97_u7B26_u589E_u52A0_u4E86_u4E00_u4E2A_u5FEB_u6377_u4E66_u5199_u65B9_u5F0F"><a href="#u4E09_u5143_u8FD0_u7B97_u7B26_u589E_u52A0_u4E86_u4E00_u4E2A_u5FEB_u6377_u4E66_u5199_u65B9_u5F0F" class="headerlink" title="三元运算符增加了一个快捷书写方式"></a>三元运算符增加了一个快捷书写方式</h3><p>原本格式为是(expr1) ? (expr2) : (expr3)<br>如果expr1结果为True，则返回expr2的结果。<br>PHP5.3新增一种书写方式，可以省略中间部分，书写为expr1 ?: expr3<br>如果expr1结果为True,则返回expr1的结果<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原格式  </span></span><br><span class="line"><span class="variable">$expr</span> = <span class="variable">$expr1</span> ? <span class="variable">$expr1</span>  :<span class="variable">$expr2</span>  </span><br><span class="line"><span class="comment">//新格式  </span></span><br><span class="line"><span class="variable">$expr</span> = <span class="variable">$expr1</span> ? : <span class="variable">$expr2</span></span><br></pre></td></tr></table></figure></p>
<h3 id="PHP5-3_u4E2D_u5176_u5B83_u503C_u5F97_u6CE8_u610F_u7684_u6539_u53D8"><a href="#PHP5-3_u4E2D_u5176_u5B83_u503C_u5F97_u6CE8_u610F_u7684_u6539_u53D8" class="headerlink" title="PHP5.3中其它值得注意的改变"></a>PHP5.3中其它值得注意的改变</h3><p>1.1.1.修复了大量bug<br>1.1.2. PHP性能提高<br>1.1.3. php.ini中可使用变量<br>1.1.4. mysqlnd进入核心扩展 理论上说该扩展访问mysql速度会较之前的MySQL 和 MySQLi 扩展快（参见<a href="http://dev.mysql.com/downloads/connector/php-mysqlnd/）" target="_blank" rel="external">http://dev.mysql.com/downloads/connector/php-mysqlnd/）</a><br>1.1.5. ext/phar、ext/intl、ext/fileinfo、ext/sqlite3和ext/enchant等扩展默认随PHP绑定发布。其中Phar可用于打包PHP程序，类似于Java中的jar机制。<br>1.1.6. ereg 正则表达式函数 不再默认可用，请使用速度更快的PCRE 正则表达式函数</p>
<h3 id="u5F03_u7528_u529F_u80FD"><a href="#u5F03_u7528_u529F_u80FD" class="headerlink" title="弃用功能"></a>弃用功能</h3><p>PHP 5.3.0 新增了两个错误等级: E_DEPRECATED 和 E_USER_DEPRECATED. 错误等级 E_DEPRECATED 被用来说明一个函数或者功能已经被弃用. E_USER_DEPRECATED 等级目的在于表明用户代码中的弃用功能, 类似于 E_USER_ERROR 和 E_USER_WARNING 等级.<br>下面是被弃用的 INI 指令列表. 使用下面任何指令都将导致 E_DEPRECATED 错误.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define_syslog_variables</span><br><span class="line">register_globals</span><br><span class="line">register_long_arrays</span><br><span class="line">safe_mode</span><br><span class="line">magic_quotes_gpc</span><br><span class="line">magic_quotes_runtime</span><br><span class="line">magic_quotes_sybase</span><br></pre></td></tr></table></figure></p>
<p>弃用 INI 文件中以 ‘#’ 开头的注释.<br>弃用函数:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">call_user_method() (使用 call_user_func() 替代)</span><br><span class="line">call_user_method_array() (使用 call_user_func_array() 替代)</span><br><span class="line">define_syslog_variables()</span><br><span class="line">dl()</span><br><span class="line">ereg() (使用 preg_match() 替代)</span><br><span class="line">ereg_replace() (使用 preg_replace() 替代)</span><br><span class="line">eregi() (使用 preg_match() 配合 <span class="string">'i'</span> 修正符替代)</span><br><span class="line">eregi_replace() (使用 preg_replace() 配合 <span class="string">'i'</span> 修正符替代)</span><br><span class="line">set_magic_quotes_runtime() 以及它的别名函数 magic_quotes_runtime()</span><br><span class="line">session_register() (使用 <span class="variable">$_SESSION</span> 超全部变量替代)</span><br><span class="line">session_unregister() (使用 <span class="variable">$_SESSION</span> 超全部变量替代)</span><br><span class="line">session_is_registered() (使用 <span class="variable">$_SESSION</span> 超全部变量替代)</span><br><span class="line">set_socket_blocking() (使用 stream_set_blocking() 替代)</span><br><span class="line">split() (使用 preg_split() 替代)</span><br><span class="line">spliti() (使用 preg_split() 配合 <span class="string">'i'</span> 修正符替代)</span><br><span class="line">sql_regcase()</span><br><span class="line">mysql_db_query() (使用 mysql_select_db() 和 mysql_query() 替代)</span><br><span class="line">mysql_escape_string() (使用 mysql_real_escape_string() 替代)</span><br></pre></td></tr></table></figure></p>
<p>废弃以字符串传递区域设置名称. 使用 LC_* 系列常量替代.<br>mktime() 的 is_dst 参数. 使用新的时区处理函数替代.</p>
<p><strong>更多新特性，参加官网：<a href="http://php.net/manual/en/migration53.new-features.php" target="_blank" rel="external">http://php.net/manual/en/migration53.new-features.php</a></strong></p>
<h2 id="PHP_5-4_new_feature"><a href="#PHP_5-4_new_feature" class="headerlink" title="PHP 5.4 new feature"></a>PHP 5.4 new feature</h2><h3 id="Traits"><a href="#Traits" class="headerlink" title="Traits"></a>Traits</h3><p>Traits提供了一种灵活的代码重用机制，即不像interface一样只能定义方法但不能实现，又不能像class一样只能单继承。至于在实践中怎样使用，还需要深入思考。<br>魔术常量为<code>__TRAIT__</code><br>官网的一个例子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> SayWorld &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">parent</span>::sayHello();  </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"World!\n"</span>;  </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'ID:'</span> . <span class="variable">$this</span>-&gt;id . <span class="string">"\n"</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'Hello '</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$id</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="variable">$this</span>-&gt;id = <span class="number">123456</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">use</span> <span class="title">SayWorld</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> MyHelloWorld();  </span><br><span class="line"><span class="variable">$o</span>-&gt;sayHello();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*will output: </span><br><span class="line">Hello World! </span><br><span class="line">ID:123456 </span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Short_array_syntax__u6570_u7EC4_u7B80_u77ED_u8BED_u6CD5"><a href="#Short_array_syntax__u6570_u7EC4_u7B80_u77ED_u8BED_u6CD5" class="headerlink" title="Short array syntax 数组简短语法"></a>Short array syntax 数组简短语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="number">1</span>,<span class="string">'james'</span>, <span class="string">'james@fwso.cn'</span>];  </span><br><span class="line"><span class="variable">$array</span> = [  </span><br><span class="line">　　<span class="string">"foo"</span> =&gt; <span class="string">"bar"</span>,  </span><br><span class="line">　　<span class="string">"bar"</span> =&gt; <span class="string">"foo"</span>  </span><br><span class="line">　　];</span><br></pre></td></tr></table></figure>
<h3 id="Array_dereferencing__u6570_u7EC4_u503C"><a href="#Array_dereferencing__u6570_u7EC4_u503C" class="headerlink" title="Array dereferencing 数组值"></a>Array dereferencing 数组值</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunc</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="number">1</span>,<span class="string">'james'</span>, <span class="string">'james@fwso.cn'</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">#以前我们需要这样：</span></span><br><span class="line"><span class="variable">$arr</span> = myfunc();  </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">1</span>];  </span><br><span class="line"><span class="comment">#在PHP5.4中这样就行了：</span></span><br><span class="line"><span class="keyword">echo</span> myfunc()[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<p>本例要注意一个要点 <a href="http://www.laruence.com/2011/12/19/2409.html" target="_blank" rel="external">http://www.laruence.com/2011/12/19/2409.html</a></p>
<h3 id="u5B9E_u4F8B_u5316_u7C7B"><a href="#u5B9E_u4F8B_u5316_u7C7B" class="headerlink" title="实例化类"></a>实例化类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>&#123;  </span><br><span class="line">		<span class="keyword">return</span> <span class="string">'test'</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">new</span> test())-&gt;show();</span><br></pre></td></tr></table></figure>
<h3 id="u652F_u6301_Class_3A_3A_7Bexpr_7D_28_29__u8BED_u6CD5"><a href="#u652F_u6301_Class_3A_3A_7Bexpr_7D_28_29__u8BED_u6CD5" class="headerlink" title="支持 Class::{expr}() 语法"></a>支持 Class::{expr}() 语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ([<span class="keyword">new</span> Human(<span class="string">"Gonzalo"</span>), <span class="keyword">new</span> Human(<span class="string">"Peter"</span>)] <span class="keyword">as</span> <span class="variable">$human</span>) &#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$human</span>-&gt;&#123;<span class="string">'hello'</span>&#125;();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Callable_typehint"><a href="#Callable_typehint" class="headerlink" title="Callable typehint"></a>Callable typehint</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(callable <span class="variable">$callback</span>)</span> </span>&#123;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">foo(<span class="string">"false"</span>); <span class="comment">//错误，因为false不是callable类型  </span></span><br><span class="line">foo(<span class="string">"printf"</span>); <span class="comment">//正确  </span></span><br><span class="line">foo(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;); <span class="comment">//正确  </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;  </span><br><span class="line">　　<span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">foo(<span class="keyword">array</span>(<span class="string">"A"</span>, <span class="string">"show"</span>)); <span class="comment">//正确</span></span><br></pre></td></tr></table></figure>
<h3 id="u51FD_u6570_u7C7B_u578B_u63D0_u793A_u7684_u589E_u5F3A"><a href="#u51FD_u6570_u7C7B_u578B_u63D0_u793A_u7684_u589E_u5F3A" class="headerlink" title="函数类型提示的增强"></a>函数类型提示的增强</h3><p>由于php是弱类型的语言，因此在php 5.0后，引入了函数类型提示的功能，其含义为对于传入函数中的参数都进行类型检查，举个例子，有如下的类:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bar</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(bar <span class="variable">$foo</span>)</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//其中函数foo中的参数规定了传入的参数必须为bar类的实例，否则系统会判断出错。同样对于数组来说，也可以进行判断，比如：  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(array <span class="variable">$foo</span>)</span> </span>&#123;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">foo(<span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 正确，因为传入的是数组  </span></span><br><span class="line">foo(<span class="number">123</span>); <span class="comment">// 不正确，传入的不是数组</span></span><br></pre></td></tr></table></figure></p>
<h3 id="PHP_5-4-0__u6027_u80FD_u5927_u5E45_u63D0_u5347_uFF0C__u4FEE_u590D_u8D85_u8FC7100_u4E2Abug"><a href="#PHP_5-4-0__u6027_u80FD_u5927_u5E45_u63D0_u5347_uFF0C__u4FEE_u590D_u8D85_u8FC7100_u4E2Abug" class="headerlink" title="PHP 5.4.0 性能大幅提升， 修复超过100个bug."></a>PHP 5.4.0 性能大幅提升， 修复超过100个bug.</h3><p>废除了register_globals, magic_quotes以及安全模式。<br>另外值得一提的是多字节支持已经默认启用了，<br>default_charset从ISO-8859-1已经变为UTF-8.<br>默认发送“Content-Type: text/html; charset=utf-8”，<br>你再也不需要在HTML里写meta tag，也无需为UTF-8兼容而传送额外的header了。</p>
<p>删除的特性<br>最后，我们集中整理了几年来标记为已弃用的多个特性。这些特性包括 allow_call_time_pass_reference、define_syslog_variables、highlight.bg、register_globals、register_long_arrays、magic_quotes、safe_mode、zend.ze1_compatibility_mode、session.bug_compat42、session.bug_compat_warn 以及 y2k_compliance。<br>除了这些特性之外，magic_quotes 可能是最大的危险。在早期版本中，未考虑因 magic_quotes 出错导致的后果，简单编写且未采取任何举措使自身免受 SQL 注入攻击的应用程序都通过 magic_quotes 来保护。如果在升级到 PHP 5.4 时未验证已采取正确的 SQLi 保护措施，则可能导致安全漏洞。</p>
<p>其他改动和特性<br>有一种新的“可调用的”类型提示，用于某方法采用回调作为参数的情况。<br><code>htmlspecialchars()</code> 和 <code>htmlentities()</code> 现在可更好地支持亚洲字符，如果未在 php.ini 文件中显式设置 PHP default_charset，这两个函数默认使用 UTF-8 而不是 ISO-8859-1。<br><code>&lt;?=</code>（精简回显语法）现在始终可用，无论 short_tags ini 设置的值为何。这应该使模板化系统创建者感到满意。<br>会话 ID 现在默认通过 /dev/urandom（或等效文件）中的熵生成，而不是与早期版本一样成为必须显式启用的一个选项。<br>mysqlnd 这一捆绑的 MySQL 原生驱动程序库现在默认用于与 MySQL 通信的各种扩展，除非在编译时通过 ./configure 被显式覆盖。<br>可能还有 100 个小的改动和特性。从 PHP 5.3 升级到 5.4 应该极为顺畅，但请阅读迁移指南加以确保。如果您从早期版本升级，执行的操作可能稍多一些。请查看以前的迁移指南再开始升级。</p>
<p><strong>更多新特性，参照官网：<a href="http://php.net/manual/en/migration54.new-features.php" target="_blank" rel="external">http://php.net/manual/en/migration54.new-features.php</a></strong></p>
<h2 id="PHP5-5_new_feature"><a href="#PHP5-5_new_feature" class="headerlink" title="PHP5.5 new feature"></a>PHP5.5 new feature</h2><h3 id="u653E_u5F03_u5BF9Windows_XP_u548C2003__u7684_u652F_u6301"><a href="#u653E_u5F03_u5BF9Windows_XP_u548C2003__u7684_u652F_u6301" class="headerlink" title="放弃对Windows XP和2003 的支持"></a>放弃对Windows XP和2003 的支持</h3><h3 id="u5F03_u7528e_u4FEE_u9970_u7B26"><a href="#u5F03_u7528e_u4FEE_u9970_u7B26" class="headerlink" title="弃用e修饰符"></a>弃用e修饰符</h3><p>e修饰符是指示preg_replace函数用来评估替换字符串作为PHP代码，而不只是仅仅做一个简单的字符串替换。不出所料，这种行为会源源不断的出现安全问题。这就是为什么在PHP5.5 中使用这个修饰符将抛出一个弃用警告。作为替代，你应该使用preg_replace_callback函数。你可以从RFC找到更多关于这个变化相应的信息。</p>
<h3 id="u65B0_u589E_u51FD_u6570_u548C_u7C7B"><a href="#u65B0_u589E_u51FD_u6570_u548C_u7C7B" class="headerlink" title="新增函数和类"></a>新增函数和类</h3><p><strong>boolval()</strong><br>PHP已经实现了strval、intval和floatval的函数。为了达到一致性将添加boolval函数。它完全可以作为一个布尔值计算，也可以作为一个回调函数。<br><strong>hash_pbkdf2()</strong><br>PBKDF2全称“Password-Based Key Derivation Function 2”，正如它的名字一样，是一种从密码派生出加密密钥的算法。这就需要加密算法，也可以用于对密码哈希。更广泛的说明和用法示例<br><strong>array_column()</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从数据库获取一列，但返回是数组。  </span></span><br><span class="line"><span class="variable">$userNames</span> = [];  </span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>) &#123;  </span><br><span class="line">    <span class="variable">$userNames</span>[] = <span class="variable">$user</span>[<span class="string">'name'</span>];  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//以前获取数组某列值，现在如下  </span></span><br><span class="line"><span class="variable">$userNames</span> = array_column(<span class="variable">$users</span>, <span class="string">'name'</span>);</span><br></pre></td></tr></table></figure></p>
<p><strong>intl 扩展 </strong><br>将有许多改进 intl的扩展。例如，将会有新的IntlCalendar,IntlGregorianCalendar,IntlTimeZone,IntlBreakIterator,IntlRuleBasedBreakIterator,IntlCodePointBreakIterator类。之前，我竟然不知道有这么多关于intl扩展，如果你想知道更多，我建议你去最新公告里找 Calendar和 BreakIterator。 </p>
<h3 id="u4E00_u4E2A_u7B80_u5355_u7684_u5BC6_u7801_u6563_u5217API"><a href="#u4E00_u4E2A_u7B80_u5355_u7684_u5BC6_u7801_u6563_u5217API" class="headerlink" title="一个简单的密码散列API"></a>一个简单的密码散列API</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="string">"foo"</span>;    </span><br><span class="line"><span class="comment">// creating the hash    </span></span><br><span class="line"><span class="variable">$hash</span> = password_hash(<span class="variable">$password</span>, PASSWORD_BCRYPT);    </span><br><span class="line"><span class="comment">// verifying a password    </span></span><br><span class="line"><span class="keyword">if</span> (password_verify(<span class="variable">$password</span>, <span class="variable">$hash</span>)) &#123;    </span><br><span class="line">    <span class="comment">// password correct!    </span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">    <span class="comment">// password wrong!    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u65B0_u7684_u8BED_u8A00_u7279_u6027_u548C_u589E_u5F3A_u529F_u80FD_u3002"><a href="#u65B0_u7684_u8BED_u8A00_u7279_u6027_u548C_u589E_u5F3A_u529F_u80FD_u3002" class="headerlink" title="新的语言特性和增强功能。"></a>新的语言特性和增强功能。</h3><p><strong>常量引用</strong><br>“常量引用”意味着数组可以直接操作字符串和数组字面值。举两个例子:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomHexString</span><span class="params">(<span class="variable">$length</span>)</span> </span>&#123;    </span><br><span class="line">    <span class="variable">$str</span> = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; ++<span class="variable">$i</span>) &#123;    </span><br><span class="line">        <span class="variable">$str</span> .= <span class="string">"0123456789abcdef"</span>[mt_rand(<span class="number">0</span>, <span class="number">15</span>)]; <span class="comment">// direct dereference of string    </span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomBool</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">false</span>, <span class="keyword">true</span>][mt_rand(<span class="number">0</span>, <span class="number">1</span>)]; <span class="comment">// direct dereference of array    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我不认为在实践中会使用此功能，但它使语言更加一致。请参阅 RFC。</p>
<h3 id="u8C03_u7528empty_28_29_u51FD_u6570_28_u548C_u5176_u4ED6_u8868_u8FBE_u5F0F_29_u4E00_u8D77_u5DE5_u4F5C"><a href="#u8C03_u7528empty_28_29_u51FD_u6570_28_u548C_u5176_u4ED6_u8868_u8FBE_u5F0F_29_u4E00_u8D77_u5DE5_u4F5C" class="headerlink" title="调用empty()函数(和其他表达式)一起工作"></a>调用empty()函数(和其他表达式)一起工作</h3><p>目前，empty()语言构造只能用在变量，而不能在其他表达式。<br>在特定的代码像empty($this-&gt;getFriends())将会抛出一个错误。作为PHP5.5 这将成为有效的代码</p>
<h3 id="u83B7_u53D6_u5B8C_u6574_u7C7B_u522B_u540D_u79F0"><a href="#u83B7_u53D6_u5B8C_u6574_u7C7B_u522B_u540D_u79F0" class="headerlink" title="获取完整类别名称"></a>获取完整类别名称</h3><p>PHP5.3 中引入命名空间的别名类和命名空间短版本的功能。虽然这并不适用于字符串类名称<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Some</span>\<span class="title">Deeply</span>\<span class="title">Nested</span>\<span class="title">Namespace</span>\<span class="title">FooBar</span>;    </span><br><span class="line"><span class="comment">// does not work, because this will try to use the global `FooBar` class    </span></span><br><span class="line"><span class="variable">$reflection</span> = <span class="keyword">new</span> ReflectionClass(<span class="string">'FooBar'</span>);   </span><br><span class="line"><span class="keyword">echo</span> FooBar::class;</span><br></pre></td></tr></table></figure></p>
<p>为了解决这个问题采用新的<code>FooBar::class</code>语法，它返回类的完整类别名称, 这里::class 等价于get_class（）</p>
<h3 id="u53C2_u6570_u8DF3_u8DC3"><a href="#u53C2_u6570_u8DF3_u8DC3" class="headerlink" title="参数跳跃"></a>参数跳跃</h3><p>如果你有一个函数接受多个可选的参数，目前没有办法只改变最后一个参数，而让其他所有参数为默认值。<br>RFC上的例子，如果你有一个函数如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_query</span><span class="params">(<span class="variable">$where</span>, <span class="variable">$order_by</span>, <span class="variable">$join_type</span>=<span class="string">''</span>, <span class="variable">$execute</span> = false, <span class="variable">$report_errors</span> = true)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p>
<p>那么有没有办法设置$report_errors=false，而其他两个为默认值。为了解决这个跳跃参数的问题而提出：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create_query(<span class="string">"deleted=0"</span>, <span class="string">"name"</span>, <span class="keyword">default</span>, <span class="keyword">default</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p>
<p>我个人不是特别喜欢这个提议。在我的眼睛里，代码需要这个功能，只是设计不当。函数不应该有12个可选参数。 </p>
<h3 id="Getter__u548C_Setter"><a href="#Getter__u548C_Setter" class="headerlink" title="Getter 和 Setter"></a>Getter 和 Setter</h3><p>如果你从不喜欢写这些getXYZ()和setXYZ($value)方法，那么这应该是你最受欢迎的改变。提议添加一个新的语法来定义一个属性的设置/读取:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimePeriod</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$seconds</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hours</span> &#123;  </span><br><span class="line">        get &#123; <span class="keyword">return</span> <span class="variable">$this</span>-&gt;seconds / <span class="number">3600</span>; &#125;  </span><br><span class="line">        set &#123; <span class="variable">$this</span>-&gt;seconds = <span class="variable">$value</span> * <span class="number">3600</span>; &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$timePeriod</span> = <span class="keyword">new</span> TimePeriod;  </span><br><span class="line"><span class="variable">$timePeriod</span>-&gt;hours = <span class="number">10</span>;  </span><br><span class="line">var_dump(<span class="variable">$timePeriod</span>-&gt;seconds); <span class="comment">// int(36000)  </span></span><br><span class="line">var_dump(<span class="variable">$timePeriod</span>-&gt;hours);   <span class="comment">// int(10)</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u751F_u6210_u5668_yield"><a href="#u751F_u6210_u5668_yield" class="headerlink" title="生成器 yield"></a>生成器 yield</h3><p>目前，自定义迭代器很少使用，因为它们的实现，需要大量的样板代码。生成器解决这个问题，并提供了一种简单的样板代码来创建迭代器。<br>例如，你可以定义一个范围函数作为迭代器:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">xrange</span><span class="params">(<span class="variable">$start</span>, <span class="variable">$end</span>, <span class="variable">$step</span> = <span class="number">1</span>)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$start</span>; <span class="variable">$i</span> &lt; <span class="variable">$end</span>; <span class="variable">$i</span> += <span class="variable">$step</span>) &#123;  </span><br><span class="line">        <span class="keyword">yield</span> <span class="variable">$i</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">foreach</span> (xrange(<span class="number">10</span>, <span class="number">20</span>) <span class="keyword">as</span> <span class="variable">$i</span>) &#123;  </span><br><span class="line">    <span class="comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述xrange函数具有与内建函数相同的行为，但有一点区别：不是返回一个数组的所有值，而是返回一个迭代器动态生成的值。</p>
<h3 id="foreach__u652F_u6301list_28_29"><a href="#foreach__u652F_u6301list_28_29" class="headerlink" title="foreach 支持list()"></a>foreach 支持list()</h3><p>对于“数组的数组”进行迭代，之前需要使用两个foreach，现在只需要使用foreach + list了，但是这个数组的数组中的每个数组的个数需要一样。看文档的例子一看就明白了。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [  </span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>],  </span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>],  </span><br><span class="line">];  </span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>)) &#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"A: $a; B: $b\n"</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>更多新特性，参照官网：<a href="http://php.net/manual/en/migration55.new-features.php" target="_blank" rel="external">http://php.net/manual/en/migration55.new-features.php</a></strong></p>
<h2 id="PHP5-6_new_feature"><a href="#PHP5-6_new_feature" class="headerlink" title="PHP5.6 new feature"></a>PHP5.6 new feature</h2><h3 id="u547D_u540D_u7A7A_u95F4_use__u64CD_u4F5C_u7B26_u5F00_u59CB_u652F_u6301_u51FD_u6570_u548C_u5E38_u91CF_u7684_u5BFC_u5165"><a href="#u547D_u540D_u7A7A_u95F4_use__u64CD_u4F5C_u7B26_u5F00_u59CB_u652F_u6301_u51FD_u6570_u548C_u5E38_u91CF_u7684_u5BFC_u5165" class="headerlink" title="命名空间 use 操作符开始支持函数和常量的导入"></a>命名空间 use 操作符开始支持函数和常量的导入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Name</span>\<span class="title">Space</span> &#123;  </span><br><span class="line">    <span class="title">const</span> <span class="title">FOO</span> = 42;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span>.<span class="string">"\n"</span>; &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">namespace</span> &#123;  </span><br><span class="line">    <span class="title">use</span> <span class="title">const</span> <span class="title">Name</span>\<span class="title">Space</span>\<span class="title">FOO</span>;  </span><br><span class="line">    <span class="keyword">use</span> <span class="title">function</span> <span class="title">Name</span>\<span class="title">Space</span>\<span class="title">f</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">echo</span> FOO.<span class="string">"\n"</span>;  </span><br><span class="line">    f();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span>  </span><br><span class="line">Name\Space\f</span><br></pre></td></tr></table></figure></p>
<h3 id="u4F7F_u7528**_u64CD_u4F5C_u7B26_u8BA1_u7B97_u4E58_u65B9"><a href="#u4F7F_u7528**_u64CD_u4F5C_u7B26_u8BA1_u7B97_u4E58_u65B9" class="headerlink" title="使用**操作符计算乘方"></a>使用**操作符计算乘方</h3><h3 id="phpdbg"><a href="#phpdbg" class="headerlink" title="phpdbg"></a>phpdbg</h3><p>PHP自带了一个交互式调试器phpdbg，它是一个SAPI模块，更多信息参考 phpdbg文档 。</p>
<h3 id="php_3A//input__u53EF_u4EE5_u88AB_u590D_u7528"><a href="#php_3A//input__u53EF_u4EE5_u88AB_u590D_u7528" class="headerlink" title="php://input 可以被复用"></a>php://input 可以被复用</h3><p>php://input 开始支持多次打开和读取，这给处理POST数据的模块的内存占用带来了极大的改善。</p>
<h3 id="u5927_u6587_u4EF6_u4E0A_u4F20_u652F_u6301"><a href="#u5927_u6587_u4EF6_u4E0A_u4F20_u652F_u6301" class="headerlink" title="大文件上传支持"></a>大文件上传支持</h3><p>可以上传超过2G的大文件。</p>
<p><strong>更多新特性，参照官网：<a href="http://php.net/manual/en/migration56.new-features.php" target="_blank" rel="external">http://php.net/manual/en/migration56.new-features.php</a></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u8BF4_u660E"><a href="#u8BF4_u660E" class="headerlink" title="说明"></a>说明</h2><p>最近公司要用lumen框架开发应用APP的接口，用到了PHP新版本，一些新特性必须要了解，且有些可以在开]]>
    </summary>
    
      <category term="feature" scheme="http://sphenginx.github.io/tags/feature/"/>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[培训机构毕业的程序员被歧视的背后逻辑]]></title>
    <link href="http://sphenginx.github.io/2015/11/29/train-vs-education/"/>
    <id>http://sphenginx.github.io/2015/11/29/train-vs-education/</id>
    <published>2015-11-29T12:03:01.000Z</published>
    <updated>2015-12-02T01:02:49.768Z</updated>
    <content type="html"><![CDATA[<h2 id="u73B0_u72B6"><a href="#u73B0_u72B6" class="headerlink" title="现状"></a>现状</h2><p>现在，像达内、华清远见、国嵌、北大青鸟、传播智客等等 IT 培训机构很多，为尚未毕业的大学生、毕业了一时找不到工作的大学生、工作后想转行的再就业者提供了一个掌握新技能的机会，通过三个月或半年或更久的培训， 你就可以掌握某一种技能，比如 Android 开发、Java Web 开发、iOS 开发、嵌入式 Linux 开发，然后，没然后了吗……</p>
<p>Sorry，然后还是有的，只不过，“然后”并不是像培训机构的销售代表频频给你通电话时宣传的那样光明罢了。有的机构会推荐你就业直到你彻底失望他们推荐的单位，有的机构会放你出去闯荡江湖四处碰壁……形式不一，但，一段痛苦的旅程从此开始了，这倒是真的。</p>
<p>很多单位歧视培训机构毕业的学员，你所在的单位是这样吗？或者你从 IT 培训机构毕业后，找工作时被鄙视了吗？</p>
<p>为了弄明白为什么 IT 培训机构出来的程序员在找工作时经常遭遇不平等对待，我们需要弄明白“教育”和“培训”的差别。</p>
<h2 id="u6559_u80B2_u548C_u57F9_u8BAD"><a href="#u6559_u80B2_u548C_u57F9_u8BAD" class="headerlink" title="教育和培训"></a>教育和培训</h2><p>大致上讲，我们所说的“教育”，指的是掌握一般性的原理与技巧的过程；而我们所说的“培训”，不过是学会某种特定技能的过程。</p>
<p>上面是温伯格在《程序开发心理学》中说到的，符合大多数人对“教育”和“培训”的理解。</p>
<p>你可以通过培训机构学会理发、做饭、修汽车、写代码、做蛋糕，这没什么稀奇的，当我们接受培训时，就是为了某项技能而去的，不是吗？我去蓝翔，难道不是为了开挖掘机吗？</p>
<p>通常我们认为培训机构（学校）是学习某种不太复杂的谋生技能的摇篮。这种技能还有一个特点，就是相对稳定、变化不是特别频繁，能够在相当长一段时间内保持基本的稳定性。所以，一旦你获得了这项技能，就可以靠它吃饭吃上一阵子，一年半载，三年五年，十年八年，都有可能。</p>
<p>而教育，我们通常认为是一项基础性的工作，重知识，重原理，周期长，见效慢，与社会脱节，有时还能把人变傻（注意我不是讽刺现行教育制度，也不是诋 毁我们伟大的大学教育）。虽然如此，很多 IT 公司的基础部门还是被受过正规大学教育的朋友们占据了重要岗位。因为大家普遍认为，虽然学校教育严重脱离社会现实，但名牌大学的学生的智力水平、学习能 力，平均来看还是高于未能考上大学的中学生，更适合于从事某种对智力、学习能力有些特别要求的技术岗位。</p>
<p>没错，程序员正是这样的岗位。程序员的平均智力水平和学习能力高于大部分的其它行业从业者。</p>
<p>然而，教育和培训的差别，并不是关键。关键是，出于某种原因，面试官或公司主管对出身“培训机构”的人有偏见。为了说明这一点，我们先要看看程序员需要的特殊能力。</p>
<p>成为一个合格的程序员，需要以下“特殊”能力：</p>
<ul>
<li><p>自知之明</p>
</li>
<li><p>自我学习</p>
</li>
<li><p>努力</p>
</li>
</ul>
<p>看起来没什么出奇之处，也许你会觉得一个程序员最重要的能力不是上面三项，没关系，知否知否，应是绿肥红瘦，随便怎么看，横看成岭侧成峰，一千个观众就有一千个哈姆雷特，嗯，开启口水模式……这里省略 500 字……</p>
<p>大家公认程序员从事的是烧脑性工作，行业发展日新月异，各种新语言新技术新框架新概念层出不穷，需要程序员时刻保持归零的学习心态，持续不断地保持学习维持竞争能力和价值。所以，我也是从这个角度出发，选择了前面提到的三点，实际上这三点指向的是<strong>“[学习之道]”</strong>。</p>
<h2 id="u81EA_u77E5_u4E4B_u660E"><a href="#u81EA_u77E5_u4E4B_u660E" class="headerlink" title="自知之明"></a>自知之明</h2><p>我们要了解自己拥有什么、缺乏什么，然后才能开始学习。</p>
<p>通过不断地总结、回顾自己做过的事情，我们就可以慢慢了解自己的能力边界。哪些事情做好了，好在哪里，为什么好在那里而不是别处，是由你自身的哪种 行为、才干、能力决定的？哪些事情做得不好，坏在哪里，为什么坏在那个点而不是其它的点，改善你自身的哪种行为或能力可以改变事情的走向，还是说你没什么 能改变的那就是你的局限？</p>
<p>当你了解了自己，就能发现自己应该做什么，就能决定自己的学习方向，而不是盲目地把自己交付给别人（学校、老师、家长、培训机构），因为，没有什么人真的可以为你负责，能为你负责的，只有你自己。</p>
<p>当然，自知是最难的事，也不是一朝一夕的事，需要不断的自省和内视才可以做到。</p>
<h2 id="u81EA_u6211_u5B66_u4E60"><a href="#u81EA_u6211_u5B66_u4E60" class="headerlink" title="自我学习"></a>自我学习</h2><p>知名的教育专家林格有两本非常著名的书，《教育是没有用的》和《学习是不需要教的》。林格有一个非常核心的观点：学习能力是人与生俱来的能力，是人 之天赋，是不需要教的，但这种能力会随着年龄的增长和家庭教育、学校教育的误导而萎缩或消失，所以，教育的方向就是营造一个环境，让人自己发现自己的学习 能力。</p>
<p>六祖慧能一朝顿悟传承衣钵，佛性自在每人心中。只不过，世人多如神秀，认为“身是菩提树，心如明镜台，时时勤拂拭，勿使惹尘埃”，一定要借助外力和 各种各样的清规戒律，方可保持灵台清明，最终获得某种修行。这种扭曲了教育本质的说法、做法大行其道，导致中学教育（大学相对自由）重知识、重规矩、重技 能而轻发现、轻唤醒、轻因材施教、轻有教无类，最终扼杀了学生的自我学习能力。所以，很多人不是天生不会学习，而是在成长过程中在家庭、学校、社会的各种 外力撕扯中慢慢丧失了自我学习能力。更甚之，多数人不自知这种能力的丧失。</p>
<p><strong>然而，程序员尤其需要自我学习能力。</strong></p>
<p>学校会教你操作系统原理，会教你计算机组成原理，会教你算法，会教你C语言，会教你 Java，各种知识都会教你。然而你到工作中，能不能用你学到的知识解决问题，实在是个未知数。</p>
<p>培训机构会教你怎么写 Java 代码，怎么安装某个 IDE，怎么完成一个个人博客或购物车之类的小项目。然而，你是在框好的架子下被动地按照老师的要求“完成”了这些事。到了工作中，面对巨大的未知和陌生的项目，你能不能举一反三灵活运用，充满了未知。</p>
<p>一个程序员能不能自己学会一门技术、能不能自己解决一个问题特别重要</p>
<p>因为，很少有主管会手把手的教会你编程和设计的实际技巧，也很少有主管会大发慈悲把你送去研习班学习工作需要的技能，在一个现实的环境里，一切都要 靠你自己。假如你自己不能独立习得某项必须的技术，真没有人能帮得上你。假如你自己不能独立解决问题，真没有人能始终拉扯着你。这也正合梁漱溟说的话： “任何一个人的学问成就，都是出于自学。学校教育不过给学生一个开端，使他更容易自学而已。青年于此，不可不勉。”</p>
<p>很多人轻视培训机构，是认为培训机构的老师，多数脱产，没有丰富的一线工程实践，是业余选手，而这些“业余选手”却要通过短短的一期培训来为社会培 养“专业选手”，这基本是一个笑话。即便我们能举出不少从培训机构出来的优秀选手，那也只能说明，这个选手本身具有很好的学习能力。</p>
<p>如果一个人意识到了自己还具备自我学习能力，那他完全没必要去培训机构浪费动辄六七千一两万的学费——他完全可以自己学到必须的知识和技能，假如他真有兴趣的话。</p>
<p>而要检验你是否还有自我学习能力，先不要去培训机构，自己找本讲编程的书、找台电脑、连上网，花一两个月时间就能搞明白你是否适合做一个程序员。一旦你通过了这种自我学习实验，那时再挑一个培训机构系统地学习某条技术栈不迟。</p>
<p>言而总之，你能不能成为合格的或优秀的程序员，取决于自我学习能力，而不是参加过专业培训。所以，很多公司在招募程序员时，不太愿意考虑培训机构毕 业的学员，因为在面试官的心里，觉得如果你有能力，自己就可以学会，完全没必要去培训机构，你接受了培训，他反倒认为你可能缺乏自我学习能力（以及对技术 的兴趣），担心你不能胜任将来的工作，他太了解了，你学的那点东西根本不够用，还有很多新东西等着你学，所以，他不愿意考虑你。</p>
<p>而对于知名大学的毕业生，虽然可能和你一样是一张白纸，但别人会以为，能进得了大学当得了学霸，起码学习能力没问题的概率高一些。</p>
<h2 id="u52AA_u529B"><a href="#u52AA_u529B" class="headerlink" title="努力"></a>努力</h2><p>有一句话是这么说的，“以大多数人的努力程度之低，根本还轮不到拼天赋”。其实，努力也是一种天赋。为什么有的人明知努力可以改变生活，可他还是不 努力呢？因为，臣妾做不到啊！为什么做不到，因为他缺乏“勤奋”、“努力”之类的天赋和才干。真的，勤奋、努力的人，多数是生就的，少数是被后妈（生活） 逼的。</p>
<p>程序员白天要上班，晚上偶尔还要加个班，自由时间少，而新技术很多，什么时候去学呢？你以为实际的项目一定可以让你锻炼新技术吗？要知道，大部分的 项目在技术选型时，会考虑技术的成熟度和团队的技术储备，很少有冒险采用大家都不熟悉的技术的，不可控因素太多，风险太大，项目失败的概率很高。那这样的 话，你什么时间丰富自己呢？</p>
<p>八小时之内是现在，八小时之外是将来。你可以用的，就是你的业余时间了。你看，人家都在打游戏、看电视、挎着女伴的胳膊去速8，你还要苦哈哈的学习，如果你没有“努力”这种天赋，是很难做到的。</p>
<p>所以，很多面试官在面对培训机构毕业的人选时，也会有诸如“如果你有自我学习能力并且努力，其实没必要上什么培训班，完全可以自己搞定”之类的想 法，而你上了培训班，是不是反过来证明你不够努力咧……然后，他又会想，是不是因为你没自知之明不知道自己要干啥才被忽悠到培训机构去交学费了呢……也 许，他还会想，是不是因为你对技术其实不感兴趣只是想谋个事儿干呢……</p>
<p>额，你看，面无表情之下，其实各种想法如同暗流漩涡，澎湃不息……所以，最后，你可能就只好“回去等消息”了……</p>
<p>不知道说了这么多，你是否明白了个中原因——面试官会觉得培训出来的学员，可能对技术没有那么浓厚的兴趣、缺乏足够强的自我学习能力也不能很好的自 律和努力。但在我的观念里，其实应该这么看待 IT 培训机构的学员：他只是找了一个类似学校的地方系统学了一些东西，和别人并无什么不同，如果他对技术有兴趣，有自我学习能力，一样可以做一个优秀的程序员。</p>
<p>原文转自：<a href="http://developer.51cto.com/art/201511/498403.htm" target="_blank" rel="external">http://developer.51cto.com/art/201511/498403.htm</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u73B0_u72B6"><a href="#u73B0_u72B6" class="headerlink" title="现状"></a>现状</h2><p>现在，像达内、华清远见、国嵌、北大青鸟、传播智客等等 IT 培训机构很多，为尚未毕业的大学生、毕业了一时]]>
    </summary>
    
      <category term="培训" scheme="http://sphenginx.github.io/tags/%E5%9F%B9%E8%AE%AD/"/>
    
      <category term="教育" scheme="http://sphenginx.github.io/tags/%E6%95%99%E8%82%B2/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP依赖管理工具Composer入门]]></title>
    <link href="http://sphenginx.github.io/2015/11/07/learn-php-composer/"/>
    <id>http://sphenginx.github.io/2015/11/07/learn-php-composer/</id>
    <published>2015-11-07T06:43:25.000Z</published>
    <updated>2015-12-07T03:23:41.696Z</updated>
    <content type="html"><![CDATA[<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>Composer是PHP中的一个依赖管理工具. 它可以让你声明自己项目所依赖的库，然后它将会在项目中为你安装这些库。</p>
<h2 id="u4F9D_u8D56_u7BA1_u7406"><a href="#u4F9D_u8D56_u7BA1_u7406" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>Composer不是包管理器。是的，它实际上和”包”或者库打交道，但是它是以项目为单位进行管理，把它们安装到你项目中的一个目录（例如vendor）。默认情况下它不会以全局的方式安装任何东西。因此，它是一个依赖管理器。</p>
<p>这个想法并不新鲜，Composer的灵感是来自于node的npm和ruby的bundler。但是目前PHP还没有一个这样的工具。<br><code>Composer</code>解决的问题是：</p>
<ul>
<li>你有一个依赖N多库的项目。</li>
<li>这些库中一些又依赖于其他的库。</li>
<li>你声明你所依赖的库。</li>
<li>Composer找出哪些包的哪个版本将会被安装，然后安装它们（也就是把它们下载到你的项目中）。</li>
</ul>
<h2 id="u58F0_u660E_u4F9D_u8D56_u5173_u7CFB"><a href="#u58F0_u660E_u4F9D_u8D56_u5173_u7CFB" class="headerlink" title="声明依赖关系"></a>声明依赖关系</h2><p>假设你正在创建一个项目，然后你需要一个日志操作的库。你决定使用monolog。为了把它加入到你的项目中，你需要做的就是创建一个名为composer.json的文件，其描述这个项目的依赖关系。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"require"</span>: &#123;</span><br><span class="line">        <span class="string">"monolog/monolog"</span>: <span class="string">"1.2.*"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们简单的描述说我们的项目依赖某个monolog/monolog包，版本只要是以1.2开头的就行。</p>
<h2 id="u7CFB_u7EDF_u8981_u6C42"><a href="#u7CFB_u7EDF_u8981_u6C42" class="headerlink" title="系统要求"></a>系统要求</h2><p>Composer需要PHP <strong>5.3.2+</strong> 才能运行。一些灵敏的PHP设置和编译选项也是必须的，不过安装程序 <code>installer</code> 会警告你任何不兼容的地方。<br>如果想要从源码而不是简单的从zip压缩包中安装软件包的话，你将需要git，svn或者hg，这依赖于软件包是通过什么进行版本控制的。<br>Composer是兼容多平台的，并且我们力争使其在Windows，Linux和OSX上的运行无差异。<br>安装 - *nix下载Composer可执行程序局部安装<br>为了获取Composer，我们需要做两件事。第一个是安装Composer（前面说过了，这意味下载它到你的项目中）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="operator">-s</span>S https://getcomposer.org/installer | php</span><br></pre></td></tr></table></figure></p>
<p>这只会检查一些PHP设置，然后下载<strong>composer.phar</strong>到你的工作目录中。这个文件是Composer二进制文件。它是一个PHAR <code>PHP archive</code>，PHP的归档格式，也可以像其他命令一样在命令行上运行。<br>你可以使用<code>--install-dir</code>选项，并且提供一个目标目录（可以是绝对或者相对路径）从而把Composer安装到一个指定的目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="operator">-s</span>S https://getcomposer.org/installer | php -- --install-dir=bin</span><br></pre></td></tr></table></figure></p>
<p>你可以把这个文件放到任何你想放的地方。如果你把它放到你的PATH中，你就可以全局访问它了。在类unix系统中你甚至可以使它可执行，并且调用的时候不需要php。<br>你可以执行这些命令从而能够在你的系统上简单的访问composer：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="operator">-s</span>S https://getcomposer.org/installer | php</span><br><span class="line">$ sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure></p>
<p>然后，只需要执行composer命令来运行Composer，而不是php composer.phar。</p>
<h2 id="Windows_u4F7F_u7528_u5B89_u88C5_u7A0B_u5E8F"><a href="#Windows_u4F7F_u7528_u5B89_u88C5_u7A0B_u5E8F" class="headerlink" title="Windows使用安装程序"></a>Windows使用安装程序</h2><p>这是在你的机器上安装Composer最简单的方法。<br>下载并运行<a href="https://getcomposer.org/Composer-Setup.exe" target="_blank" rel="external">Composer-Setup.exe</a>，它将会安装最新的Composer版本并且设置好PATH，然后你就可以在命令中的任何目录下调用composer了。<br>手动安装<br>切换到一个存在于PATH环境变量中的目录，然后执行安装代码片段来下载composer.phar：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username&gt;<span class="built_in">cd</span> C:\bin</span><br><span class="line">C:\bin&gt;php -r <span class="string">"eval('?&gt;'.file_get_contents('https://getcomposer.org/installer'));"</span></span><br></pre></td></tr></table></figure></p>
<p>创建一个新的以.bat结尾的composer文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\bin&gt;<span class="built_in">echo</span> @php <span class="string">"%~dp0composer.phar"</span> %*&gt;composer.bat</span><br></pre></td></tr></table></figure></p>
<p>关闭你当前的终端。打开一个新的终端测试一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username&gt;composer -V</span><br><span class="line">Composer version <span class="number">27</span>d8904</span><br><span class="line"> </span><br><span class="line">C:\Users\username&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="u4F7F_u7528Composer"><a href="#u4F7F_u7528Composer" class="headerlink" title="使用Composer"></a>使用Composer</h2><p>我们接下来要使用Composer来安装项目的依赖。如果你在当前目录下没有一个叫作<strong>composer.json</strong>的文件，请跳到基本使用章节。<br>为了解决并下载依赖，运行install命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php composer.phar install</span><br></pre></td></tr></table></figure></p>
<p>如果你是全局安装，并且目录下没有phar文件，那么运行这个：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer install</span><br></pre></td></tr></table></figure></p>
<p>如果是上面的例子，这个操作将会下载monolog到vendor/monolog/monolog目录。<br>自动加载<br>除了下载库之外，Composer也会创建一个自动加载文件，这个文件能够自动加载Composer下载的库中所有的类。如果想使用它，只需要在你代码启动的地方加上如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require <span class="string">'vendor/autoload.php'</span>;</span><br></pre></td></tr></table></figure></p>
<p>哇哦！现在开始使用monolog吧! 如果想进一步学习Composer，继续阅读「基本使用」章节。 如果想要找需要的package，到Packagist。</p>
<p>参考  英文原文：<a href="http://getcomposer.org/doc/00-intro.md" target="_blank" rel="external">http://getcomposer.org/doc/00-intro.md</a></p>
<p>(完)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>Composer是PHP中的一个依赖管理工具. 它可以让你声明自己项目所依赖的库，然后它将会在项目中为你]]>
    </summary>
    
      <category term="composer" scheme="http://sphenginx.github.io/tags/composer/"/>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二维码图片生成器QRCode.js]]></title>
    <link href="http://sphenginx.github.io/2015/09/27/js-qrcode/"/>
    <id>http://sphenginx.github.io/2015/09/27/js-qrcode/</id>
    <published>2015-09-27T08:03:01.000Z</published>
    <updated>2015-12-07T03:19:08.040Z</updated>
    <content type="html"><![CDATA[<h2 id="u4E8C_u7EF4_u7801_u662F_u4EC0_u4E48_uFF1F"><a href="#u4E8C_u7EF4_u7801_u662F_u4EC0_u4E48_uFF1F" class="headerlink" title="二维码是什么？"></a>二维码是什么？</h2><p>百度百科上是这样介绍二维码的：二维码（Quick Response Code），又称二维条码，它是用特定的几何图形按一定规律在平面（二维方向）上分布的黑白相间的图形，是所有信息数据的一把钥匙。在现代商业活动中，可实现的应用十分广泛，如：产品防伪/溯源、广告推送、网站链接、数据下载、商品交易、定位/导航、电子商务应用、车辆管理、信息传递等。如今智能手机扫一扫（简称313）功能的应用使得二维码更加普遍，随着国内物联网产业的蓬勃发展，更多的二维码技术应用解决方案被开发，二维码成为移动互联网入口真正成为现实。 </p>
<h2 id="QRCode-js_u8BF4_u660E"><a href="#QRCode-js_u8BF4_u660E" class="headerlink" title="QRCode.js说明"></a>QRCode.js说明</h2><p>QRCode.js是一个实现生成二维码(QRCode)的js插件。 QRCode.js有着良好的跨浏览器兼容性（高版本使用HTML5的 Canvas，低版本IE使用table元素绘制），而且QRCode.js没有任何依赖。只需要引用一个QRCode.js。</p>
<h2 id="u4F7F_u7528QRCode-js"><a href="#u4F7F_u7528QRCode-js" class="headerlink" title="使用QRCode.js"></a>使用QRCode.js</h2><h3 id="u5F15_u5165qrcode-js"><a href="#u5F15_u5165qrcode-js" class="headerlink" title="引入qrcode.js"></a>引入qrcode.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=”qrcode.js” <span class="built_in">type</span>=”text/javascript”&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="HTML_u4EE3_u7801"><a href="#HTML_u4EE3_u7801" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=”qrcode”&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="JS_u4EE3_u7801"><a href="#JS_u4EE3_u7801" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//初始化QRCode对象</span><br><span class="line">var qrcode = new QRCode(document.getElementById(“qrcode”));</span><br><span class="line"></span><br><span class="line">//也可以在初始化QRCode对象，传入更多参数</span><br><span class="line">var qrcode = new QRCode(document.getElementById(“qrcode”),&#123;</span><br><span class="line">	width: <span class="number">128</span>,</span><br><span class="line">	height: <span class="number">128</span>,</span><br><span class="line">	colorDark : “<span class="comment">#000000″,</span></span><br><span class="line">	colorLight : “<span class="comment">#ffffff”,</span></span><br><span class="line">	correctLevel : QRCode.CorrectLevel.H</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//需要生成二维码的字符串</span><br><span class="line">qrcode.makeCode(“http://www.leixuesong.cn”);</span><br><span class="line"></span><br><span class="line">//清除二维码</span><br><span class="line">qrcode.clear();</span><br></pre></td></tr></table></figure>
<h3 id="u53C2_u6570_u8BF4_u660E"><a href="#u53C2_u6570_u8BF4_u660E" class="headerlink" title="参数说明"></a>参数说明</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>render</td>
<td>string</td>
<td>配置用哪个节点元素画二维码，选项有table、svg和canvas，默认的选择顺序为 canvas -&gt; svg -&gt; table</td>
</tr>
<tr>
<td>text</td>
<td>string</td>
<td>要编码的字符串，默认为空</td>
</tr>
<tr>
<td>width</td>
<td>number</td>
<td>二维码的长，单位是px  需要注意的是，当使用table或者svg绘制二维码时，会适当减小，使得能够整除二维码矩阵的维度。  默认：256</td>
</tr>
<tr>
<td>height</td>
<td>number</td>
<td>同width</td>
</tr>
<tr>
<td>correctLevel</td>
<td>number</td>
<td>纠错级别，可取0、1、2、3，数字越大说明所需纠错级别越大，默认：3</td>
</tr>
<tr>
<td>background</td>
<td>color</td>
<td>背景色，默认：<code>#FFFFFF</code></td>
</tr>
<tr>
<td>foreground</td>
<td>color</td>
<td>前景色，默认：<code>#000000</code></td>
</tr>
</tbody>
</table>
<h2 id="u6D4F_u89C8_u5668_u517C_u5BB9_u6027"><a href="#u6D4F_u89C8_u5668_u517C_u5BB9_u6027" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>几乎支持所有浏览器： IE6~10, Chrome, Firefox, Safari, Opera, Mobile Safari, Android, Windows Mobile.</p>
<p>到这里，js生成二维码插件-QRCode.js就介绍完了，QRCode.js非常的方便好用。需要注意的的是QRCode初始化传入DOM对象时，必须是js原生的DOM对象，不能是jQuery的DOM对象的，否则就会报错。</p>
<h2 id="u9644"><a href="#u9644" class="headerlink" title="附"></a>附</h2><p>GitHub地址: <a href="https://github.com/davidshimjs/qrcodejs" target="_blank" rel="external">https://github.com/davidshimjs/qrcodejs</a><br>二维码生成原理：<a href="http://www.thonky.com/qr-code-tutorial/" target="_blank" rel="external">http://www.thonky.com/qr-code-tutorial/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4E8C_u7EF4_u7801_u662F_u4EC0_u4E48_uFF1F"><a href="#u4E8C_u7EF4_u7801_u662F_u4EC0_u4E48_uFF1F" class="headerlink" title="二维码是什么？"><]]>
    </summary>
    
      <category term="js" scheme="http://sphenginx.github.io/tags/js/"/>
    
      <category term="qrcode" scheme="http://sphenginx.github.io/tags/qrcode/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo]]></title>
    <link href="http://sphenginx.github.io/2015/09/17/hexo/"/>
    <id>http://sphenginx.github.io/2015/09/17/hexo/</id>
    <published>2015-09-17T08:03:01.000Z</published>
    <updated>2015-12-14T05:13:57.297Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>!  Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="More_Info"><a href="#More_Info" class="headerlink" title="More Info"></a>More Info</h2><ul>
<li><a href="https://xuanwo.org/2014/08/14/hexo-usual-problem/" target="_blank" rel="external">Xuan Wo hexo usual problem</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>!  Check <a href="http://hexo.io/docs/" target="_blank" rel="]]>
    </summary>
    
      <category term="hexo" scheme="http://sphenginx.github.io/tags/hexo/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git学习笔记]]></title>
    <link href="http://sphenginx.github.io/2015/07/17/git/"/>
    <id>http://sphenginx.github.io/2015/07/17/git/</id>
    <published>2015-07-17T08:03:01.000Z</published>
    <updated>2015-12-10T03:39:31.974Z</updated>
    <content type="html"><![CDATA[<h2 id="Git__u57FA_u7840"><a href="#Git__u57FA_u7840" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="u7B80_u5355_u5730_u8BF4_uFF0CGit__u7A76_u7ADF_u662F_u600E_u6837_u7684_u4E00_u4E2A_u7CFB_u7EDF_u5462_uFF1F"><a href="#u7B80_u5355_u5730_u8BF4_uFF0CGit__u7A76_u7ADF_u662F_u600E_u6837_u7684_u4E00_u4E2A_u7CFB_u7EDF_u5462_uFF1F" class="headerlink" title="简单地说，Git 究竟是怎样的一个系统呢？"></a>简单地说，Git 究竟是怎样的一个系统呢？</h3><p>请注意接下来的内容非常重要，若您理解了 Git 的思想和基本工作原理，用起来就会知其所以然，游刃有余。<br>在开始学习 Git 的时候，请努力分清您对其它版本管理系统的已有认识，如 Subversion 和 Perforce 等；这么做能帮助您使用工具时避免发生混淆。<br>Git 在保存和对待各种信息的时候与其它版本控制系统有很大差异，尽管操作起来的命令形式非常相近，理解这些差异将有助于防止您使用中的困惑。  </p>
<h3 id="u76F4_u63A5_u8BB0_u5F55_u5FEB_u7167_uFF0C_u800C_u975E_u5DEE_u5F02_u6BD4_u8F83"><a href="#u76F4_u63A5_u8BB0_u5F55_u5FEB_u7167_uFF0C_u800C_u975E_u5DEE_u5F02_u6BD4_u8F83" class="headerlink" title="直接记录快照，而非差异比较"></a>直接记录快照，而非差异比较</h3><p>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。</p>
<p>Git 存储项目随时间改变的快照。存储项目随时间改变的快照.这是 Git 与几乎所有其它版本控制系统的重要区别。 因此 Git 重新考虑了以前每一代版本控制系统延续下来的诸多方面。 Git 更像是一个小型的文件系统，提供了许多以此为基础构建的超强工具，而不只是一个简单的 VCS。</p>
<h3 id="u8FD1_u4E4E_u6240_u6709_u64CD_u4F5C_u90FD_u662F_u672C_u5730_u6267_u884C"><a href="#u8FD1_u4E4E_u6240_u6709_u64CD_u4F5C_u90FD_u662F_u672C_u5730_u6267_u884C" class="headerlink" title="近乎所有操作都是本地执行"></a>近乎所有操作都是本地执行</h3><p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。如果您习惯于所有操作都有网络延时开销的集中式版本控制系统，Git 在这方面会让您感到速度之神赐给了 Git 超凡的能量。 因为您在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。   </p>
<p>举个例子，要浏览项目的历史，Git 不需外连到服务器去获取历史，然后再显示出来——它只需直接从本地数据库中读取。 您能立即看到项目历史。 如果您想查看当前版本与一个月前的版本之间引入的修改，Git 会查找到一个月前的文件做一次本地的差异计算，而不是由远程服务器处理或从远程服务器拉回旧版本文件再来本地处理。</p>
<p>这也意味着您离线或者没有 VPN 时，几乎可以进行任何操作。 如您在飞机或火车上想做些工作，您能愉快地提交，直到有网络连接时再上传。 如您回家后 VPN 客户端不正常，您仍能工作。 使用其它系统，做到如此是不可能或很费力的。 比如，用 Perforce，您没有连接服务器时几乎不能做什么事；用 Subversion 和 CVS，您能修改文件，但不能向数据库提交修改（因为您的本地数据库离线了）。 这看起来不是大问题，但是您可能会惊喜地发现它带来的巨大的不同。</p>
<h3 id="Git__u4FDD_u8BC1_u5B8C_u6574_u6027"><a href="#Git__u4FDD_u8BC1_u5B8C_u6574_u6027" class="headerlink" title="Git 保证完整性"></a>Git 保证完整性</h3><p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若您在传送过程中丢失信息或损坏文件，Git 就能发现。</p>
<p>Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24b9da<span class="number">6552252987</span>aa<span class="number">493b52f86</span>96cd<span class="number">6d3b00373</span></span><br></pre></td></tr></table></figure></p>
<p>Git 中使用这种哈希值的情况很多，您将经常看到这种哈希值。 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。</p>
<h3 id="Git__u4E00_u822C_u53EA_u6DFB_u52A0_u6570_u636E"><a href="#Git__u4E00_u822C_u53EA_u6DFB_u52A0_u6570_u636E" class="headerlink" title="Git 一般只添加数据"></a>Git 一般只添加数据</h3><p>您执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦您提交快照到 Git 中，就再难丢失数据，特别是如果您定期的推送数据库到其它仓库的话。</p>
<p>这使得我们使用 Git 成为一个安心愉悦的过程，因为我们深知可以尽情做各种尝试，而没有把事情弄糟的危险。 更深度探讨 Git 如何保存数据及恢复丢失数据的话题，请参考“Undoing Things”。</p>
<h3 id="u4E09_u79CD_u72B6_u6001"><a href="#u4E09_u79CD_u72B6_u6001" class="headerlink" title="三种状态"></a>三种状态</h3><p>好，请注意。 如果您希望后面的学习更顺利，记住下面这些关于 Git 的概念。<br>Git 有三种状态，您的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。 已提交表示数据已经安全的保存在本地数据库中。 已修改表示修改了文件，但还没保存到数据库中。 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p>
<p>由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。</p>
<p>每个项目都有一个 Git 目录（译注：如果 git clone 出来的话，就是其中 .git 的目录；如果 git clone –bare 的话，新建的目录本身就是 Git 目录。），它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。</p>
<p>从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。</p>
<p>所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。</p>
<h3 id="u57FA_u672C_u7684_Git__u5DE5_u4F5C_u6D41_u7A0B_u5982_u4E0B_uFF1A"><a href="#u57FA_u672C_u7684_Git__u5DE5_u4F5C_u6D41_u7A0B_u5982_u4E0B_uFF1A" class="headerlink" title="基本的 Git 工作流程如下："></a>基本的 Git 工作流程如下：</h3><p><img src="http://sphenginx.github.io/images/git_flow.png" alt="Git flow"></p>
<blockquote>
<p><strong>Workspace</strong>：工作区<br><strong>Index / Stage</strong>：暂存区<br><strong>Repository</strong>：仓库区（或本地仓库）<br><strong>Remote</strong>：远程仓库</p>
</blockquote>
<ol>
<li>在工作目录中修改某些文件。  </li>
<li>对修改后的文件进行快照，然后保存到暂存区域。  </li>
<li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。 </li>
</ol>
<p>所以，我们可以从文件所处的位置来判断状态：如果是 Git 目录中保存着的特定版本文件，就属于已提交状态；如果作了修改并已放入暂存区域，就属于已暂存状态；如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。到第二章的时候，我们会进一步了解其中细节，并学会如何根据文件状态实施后续操作，以及怎样跳过暂存直接提交。</p>
<h2 id="u5B89_u88C5Git"><a href="#u5B89_u88C5Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>是时候动手尝试下 Git 了，不过得先安装好它。有许多种安装方式，主要分为两种，   </p>
<ul>
<li>一种是通过编译源代码来安装；   </li>
<li>一种是使用为特定平台预编译好的安装包(yum | apt-get)。  </li>
<li>WIN下自动Google，或去官网自行下载</li>
</ul>
<h3 id="u521D_u6B21_u8FD0_u884C_Git__u524D_u7684_u914D_u7F6E"><a href="#u521D_u6B21_u8FD0_u884C_Git__u524D_u7684_u914D_u7F6E" class="headerlink" title="初次运行 Git 前的配置"></a>初次运行 Git 前的配置</h3><p>一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。</p>
<p>Git 提供了一个叫做 <code>git config</code> 的工具（译注：实际是 git-config 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>
<p><code>/etc/gitconfig 文件</code>：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。<br><code>~/.gitconfig 文件</code>：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。<br>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。<br>在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Documents and Settings\<span class="variable">$USER</span></span><br></pre></td></tr></table></figure></p>
<p>此外，Git 还会尝试找寻 <code>/etc/gitconfig</code> 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p>
<h3 id="u7528_u6237_u4FE1_u606F"><a href="#u7528_u6237_u4FE1_u606F" class="headerlink" title="用户信息"></a>用户信息</h3><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user<span class="class">.name</span> <span class="string">"Little Cui"</span></span><br><span class="line">$ git config --global user<span class="class">.email</span> Little Cui@sphenginx.com</span><br></pre></td></tr></table></figure></p>
<p>如果用了<code>--global</code>选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>
<h3 id="u6587_u672C_u7F16_u8F91_u5668"><a href="#u6587_u672C_u7F16_u8F91_u5668" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><p>接下来要设置的是默认使用的文本编辑器。Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --<span class="keyword">global</span> core.<span class="keyword">editor</span> emacs</span><br></pre></td></tr></table></figure></p>
<p>差异分析工具<br>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --<span class="keyword">global</span> <span class="keyword">merge</span>.tool vimdiff</span><br></pre></td></tr></table></figure></p>
<p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。</p>
<h3 id="u67E5_u770B_u914D_u7F6E_u4FE1_u606F"><a href="#u67E5_u770B_u914D_u7F6E_u4FE1_u606F" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><p>要检查已有的配置信息，可以使用 <code>git config --list</code> 命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">user.name=Scott Chacon</span><br><span class="line">user.email=schacon@gmail<span class="class">.com</span></span><br><span class="line"><span class="attribute">color</span>.status=<span class="attribute">auto</span></span><br><span class="line"><span class="attribute">color</span>.branch=<span class="attribute">auto</span></span><br><span class="line"><span class="attribute">color</span>.interactive=<span class="attribute">auto</span></span><br><span class="line"><span class="attribute">color</span>.diff=<span class="attribute">auto</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。</p>
<p><strong>https方式每次都要输入密码，按照如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速:</strong></p>
<p>设置记住密码（默认15分钟）：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure></p>
<p>如果想自己设置失效时间，可以这么设置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper &#39;cache --timeout=3600&#39; //&#36825;&#26679;&#23601;&#35774;&#32622;&#19968;&#20010;&#23567;&#26102;&#20043;&#21518;&#22833;&#25928;</span><br></pre></td></tr></table></figure></p>
<p>长期储存密码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></p>
<p>注：This [git-credential-cache] doesn’t work for Windows systems as git-credential-cache communicates through a Unix socket</p>
<p>The wincred helper was added in msysgit 1.8.1. Use it as follows:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper wincred</span><br></pre></td></tr></table></figure>
<p>Finally, launch a command prompt and type:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper winstore</span><br></pre></td></tr></table></figure>
<p>附：<a href="http://my.oschina.net/silentboy/blog/217766" target="_blank" rel="external">https 方式使用git@osc设置密码的方式</a></p>
<h3 id="u603B_u7ED3_u4E00_u4E0Bcommit_u7684_u51E0_u79CD_u59FF_u52BF_uFF1A"><a href="#u603B_u7ED3_u4E00_u4E0Bcommit_u7684_u51E0_u79CD_u59FF_u52BF_uFF1A" class="headerlink" title="总结一下commit的几种姿势："></a>总结一下commit的几种姿势：</h3><p>传统姿势：先 “git add file” 再 “git commit -m ‘xxx’ “<br>快速提交当前所有文件的更改：”git commit -am ‘xxx’” 会先add所有的更改然后提交<br>快速提交单个文件的更改：”git commit file -m ‘xxx’ “ 只提交这个文件的更改<br>修改最后一次提交：”git commit –amend -am ‘xxx’ “将当前的更改加入最后一次commit中并更改最后一次commit的信息。   </p>
<h2 id="Git_tips"><a href="#Git_tips" class="headerlink" title="Git tips"></a>Git tips</h2><ul>
<li><p>设置config信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name sphenginx</span><br><span class="line">$ git config --global user.email sphenginx@sphenginx.com</span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成ssh key</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -<span class="keyword">C</span> <span class="string">"littleCui@gmail.com"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看config信息</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="comment">--list</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>彩色的 git 输出：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attribute">color</span><span class="class">.ui</span> true</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示历史记录时，只显示一行注释信息：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config format<span class="class">.pretty</span> oneline</span><br></pre></td></tr></table></figure>
</li>
<li><p>不替换win下的CRLF设置</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> config core.autocrlf <span class="built_in">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>win下使用https地址的仓库不输入密码设置</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential<span class="class">.helper</span> wincred</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取我的bitbucket的笔记仓库</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://sphenginx@bitbucket.org/sphenginx/my-php.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置远程仓库地址</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git remote <span class="comment">--help</span></span><br><span class="line">git remote <span class="built_in">set</span> origin <span class="keyword">https</span>://sphenginx@bitbucket.org/sphenginx/my-php.git</span><br><span class="line">git remote <span class="built_in">set</span>-url origin <span class="keyword">https</span>://sphenginx@bitbucket.org/sphenginx/my-php.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>正常提交命令</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git pull origin <span class="keyword">master</span></span><br><span class="line"><span class="title">git</span> add .</span><br><span class="line">git commit -am '提交信息'</span><br><span class="line">git push origin <span class="literal">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>缓存某些修改的文件</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> stash</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复缓存的文件</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">pop</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取某个分支/恢复某个文件</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> checkout branchX/file_path</span><br></pre></td></tr></table></figure>
</li>
<li><p>撤销某次修改</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">revert </span>HEAD</span><br></pre></td></tr></table></figure>
</li>
<li><p>回退到某个版本</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">git</span> <span class="comment">reset</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">hard</span> <span class="comment">HEAD</span> <span class="comment">|</span> <span class="comment">git</span> <span class="comment">reset</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">hard</span> <span class="comment">origin/master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在你的仓库根目录中添加一个叫”.gitignore”的文件，来告诉Git系统要忽略 掉哪些文件，下面是文件内容的示例:</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 以'#' 开始的行，被视为注释.</span></span><br><span class="line"><span class="preprocessor"># 忽略掉所有文件名是 foo.txt 的文件.</span></span><br><span class="line">foo.txt</span><br><span class="line"><span class="preprocessor"># 忽略所有生成的 html 文件,</span></span><br><span class="line">*.html</span><br><span class="line"><span class="preprocessor"># foo.html是手工维护的，所以例外.</span></span><br><span class="line">!foo.html</span><br><span class="line"><span class="preprocessor">#  忽略所有.o 和 .a文件.</span></span><br><span class="line">*.[oa]</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除 untracked files</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean <span class="operator">-f</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>连 untracked 的目录也一起删掉</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> clean -fd</span><br></pre></td></tr></table></figure>
</li>
<li><p>连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> clean -xfd</span><br></pre></td></tr></table></figure>
</li>
<li><p>在用上述 git clean 前，强烈建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> clean -nxfd</span><br><span class="line">git clean -nf</span><br><span class="line">git clean -nfd</span><br></pre></td></tr></table></figure>
</li>
<li><p>内建的图形化 git</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitk</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="More_info"><a href="#More_info" class="headerlink" title="More info"></a>More info</h2><p><a href="http://git-scm.com/book/zh/v1/" target="_blank" rel="external">git-scm.com</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用 Git 命令清单 - 阮一峰</a></p>
<p><a href="http://xianglong.me/article/permanently-delete-a-commit-from-git/" target="_blank" rel="external">GIT永久删除commit</a></p>
<p><a href="http://blog.jobbole.com/87700/" target="_blank" rel="external">如何在 Git 里撤销(几乎)任何操作</a></p>
<p><a href="http://blog.jobbole.com/89302/" target="_blank" rel="external">开源项目的那点事</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Git__u57FA_u7840"><a href="#Git__u57FA_u7840" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="u7B80_u5355_u5730_u8BF4_uFF0C]]>
    </summary>
    
      <category term="Git" scheme="http://sphenginx.github.io/tags/Git/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[健身]]></title>
    <link href="http://sphenginx.github.io/2015/06/29/body-building/"/>
    <id>http://sphenginx.github.io/2015/06/29/body-building/</id>
    <published>2015-06-29T12:03:01.000Z</published>
    <updated>2015-11-28T01:43:20.805Z</updated>
    <content type="html"><![CDATA[<p>今天晚上在体育街打乒乓球，偶遇一退休乒乓球教练，他在看到洒家打球的时候，一针见血的指出了我的陋习，他说：因地球引力的存在，地球上的一切运动都是抛物线型的，在运动的时候身体的重心要放低，像扎马步那样最好，球拍和桌沿平行，击球时，运用肘部的力量，快速直线摆动小臂，球拍从腰部快速摆到鼻子部分，给球一个向上向前的力，不要做多余的动作，尤其是动腿的陋习必须改掉。</p>
<p>洒家对老爷爷的说法深以为然，其实运动大道理是相通的，都是重心放低，做好扎马步的姿势，这样可以快速的进行身体姿势的变换，以应对即将到来的变化。运动时要运用相关关节的力量，快速带动关节相关身体部位向上前方向击出，不要做多余的动作。（陋习:打球时完全不需要动脚…… 囧）</p>
<p>为了改变运动陋习，特作此文，已备翻阅。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天晚上在体育街打乒乓球，偶遇一退休乒乓球教练，他在看到洒家打球的时候，一针见血的指出了我的陋习，他说：因地球引力的存在，地球上的一切运动都是抛物线型的，在运动的时候身体的重心要放低，像扎马步那样最好，球拍和桌沿平行，击球时，运用肘部的力量，快速直线摆动小臂，球拍从腰部快速]]>
    </summary>
    
      <category term="健身" scheme="http://sphenginx.github.io/tags/%E5%81%A5%E8%BA%AB/"/>
    
      <category term="人生百态" scheme="http://sphenginx.github.io/categories/%E4%BA%BA%E7%94%9F%E7%99%BE%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[API漫谈]]></title>
    <link href="http://sphenginx.github.io/2015/06/01/api-discuss/"/>
    <id>http://sphenginx.github.io/2015/06/01/api-discuss/</id>
    <published>2015-06-01T01:27:40.000Z</published>
    <updated>2015-11-28T04:50:49.856Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>如何保证API的client来源是真实的，对于API的认证很重要,平时都是按别人的文档和别人通讯也没想过这事，一想还蛮有趣的，下面就让我们来一步步规划一个接口认证的吧。</p>
<h2 id="u4FE1_u606F_u5339_u5BF9"><a href="#u4FE1_u606F_u5339_u5BF9" class="headerlink" title="信息匹对"></a>信息匹对</h2><p>认证不就是登陆么，用户给我发个身份和密码，我一匹对，正确，通过不久可以了么？</p>
<h3 id="u65B9_u6CD5"><a href="#u65B9_u6CD5" class="headerlink" title="方法"></a>方法</h3><pre><code>用户发一个 user_id 和 user_key 过来，我们接收后匹对看是否存在。
</code></pre><h3 id="u4E0D_u8DB3"><a href="#u4E0D_u8DB3" class="headerlink" title="不足"></a>不足</h3><pre><code>接口通过HTTP通讯，中间一旦被人窃听，以后就可以拿 user_id 和 user_key 给我们发请求，而我们无法分辨出到底是谁才是真的齐天大圣。看来，不可以把 user_key 这样子发送。

就算认证是可靠的，黑客还是可以拦截住请求，对认证部分不修改但把参数修改了，然后让请求继续发送。例如把你准备给哈利文转账，但是请求在中间被拦截修改后，变成给变色龙转了。
</code></pre><h2 id="u54C8_u5E0C"><a href="#u54C8_u5E0C" class="headerlink" title="哈希"></a>哈希</h2><p>我们密码存储的时候不是经常md5哈希后保存么，那么我们把 user_key 也哈希一下吧，嗯，正愁不知道拿user_key和谁哈希好，既然说参数会被替换，那么，我们拿 user_key 和 请求参数哈希后的字符串作为 auth_token 传输，而不发送 user_key不就可以了。这样参数也成为认证的一部分，就不会被替换掉了。</p>
<h3 id="u505A_u6CD5"><a href="#u505A_u6CD5" class="headerlink" title="做法"></a>做法</h3><p>把参数按某个规则排好序后，连接成字符串，然后和 user_key 哈希后作为 auth_token，发送。接受端接到请求后，把参数排序后和 user_key 哈希后的字符串和 auth_token 比较。</p>
<h3 id="u4E0D_u8DB3-1"><a href="#u4E0D_u8DB3-1" class="headerlink" title="不足"></a>不足</h3><p>当参数很少，而 user_key 不复杂的情况下， auto_token 有被碰撞出 user_key的可能</p>
<h2 id="u52A0_u5F3A_u7248_u54C8_u5E0C"><a href="#u52A0_u5F3A_u7248_u54C8_u5E0C" class="headerlink" title="加强版哈希"></a>加强版哈希</h2><p>表示，这种情况对我们这种平时存密码都要多次哈希的孩子来说毫无鸭梨啊，我们可以分别对参数字符串哈希后取一定位数，然后把 user_key 哈希后取一定位数，再把两者连起来哈希作为 auth_token</p>
<h3 id="u8BF7_u6C42_u975E_u6CD5__uFF01"><a href="#u8BF7_u6C42_u975E_u6CD5__uFF01" class="headerlink" title="请求非法 ！"></a>请求非法 ！</h3><p>什么转了9999次款？黑客大叔表示无法对我们请求下手了，不过他借你某次给他转款的时候拦截到了你的请求，然后不停的伪造一样的请求… 我们可以增加一些策略，防止这种请求重放，例如：在参数里面添加时间戳，最好精确到毫秒，然后把时间戳、user_id和接口方法作为唯一值检验，相同的值只能一次有效。</p>
<h3 id="u4E0D_u8DB3-2"><a href="#u4E0D_u8DB3-2" class="headerlink" title="不足"></a>不足</h3><p>目前为止，我们能确保请求时持有user_key的user_id发出的，而且不会被修改，不会被重放，user_key也不会暴露，一切都很美好。但是我们的信息是明文的，会照成信息泄露。</p>
<h2 id="u52A0_u5BC6"><a href="#u52A0_u5BC6" class="headerlink" title="加密"></a>加密</h2><h3 id="u53EF_u4EE5_u628A_u5185_u5BB9_u52A0_u5BC6_u8D77_u6765_u4F20_u8F93"><a href="#u53EF_u4EE5_u628A_u5185_u5BB9_u52A0_u5BC6_u8D77_u6765_u4F20_u8F93" class="headerlink" title="可以把内容加密起来传输"></a>可以把内容加密起来传输</h3><h3 id="u65B9_u6CD5-1"><a href="#u65B9_u6CD5-1" class="headerlink" title="方法"></a>方法</h3><pre><code>HTTPS  
RSA  
利用user_key对整个请求的内容进行异或后重新编码之类的加密
</code></pre><h3 id="u4E0D_u8DB3-3"><a href="#u4E0D_u8DB3-3" class="headerlink" title="不足"></a>不足</h3><pre><code>成本高，操作麻烦，目前普通接口通讯一般不会有到这一步的处理。
</code></pre><h3 id="u8FD9_u662F_u53CC_u5411_u7684"><a href="#u8FD9_u662F_u53CC_u5411_u7684" class="headerlink" title="这是双向的"></a>这是双向的</h3><pre><code>认证是接口双方都需要做的，不止指用户发给平台，还要包括用户接到平台应答后也应该进行相同的验证
</code></pre><h2 id="u5176_u4ED6_u624B_u6BB5"><a href="#u5176_u4ED6_u624B_u6BB5" class="headerlink" title="其他手段"></a>其他手段</h2><blockquote>
<p>   ip地址认证<br>    请求有效时间  </p>
</blockquote>
<h2 id="u603B_u4E4B"><a href="#u603B_u4E4B" class="headerlink" title="总之"></a>总之</h2><blockquote>
<p>   来源正确，身份正确，内容正确，请求正确，信息安全</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>如何保证API的client来源是真实的，对于API的认证很重要,平时都是按别人的文档和别人通讯也没想过]]>
    </summary>
    
      <category term="php" scheme="http://sphenginx.github.io/tags/php/"/>
    
      <category term="request" scheme="http://sphenginx.github.io/tags/request/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SSDB：高性能数据库服务器]]></title>
    <link href="http://sphenginx.github.io/2015/03/17/ssdb/"/>
    <id>http://sphenginx.github.io/2015/03/17/ssdb/</id>
    <published>2015-03-17T08:03:01.000Z</published>
    <updated>2015-12-09T02:35:03.591Z</updated>
    <content type="html"><![CDATA[<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>SSDB是一个开源的<a href="http://ssdb.io/zh_cn/" target="_blank" rel="external">高性能数据库服务器</a>, 使用Google LevelDB作为存储引擎, 支持T级别的数据, 同时支持类似Redis中的zset和hash等数据结构, 在同时需求高性能和大数据的条件下, 作为Redis的替代方案.</p>
<p>因为SSDB的最初目的是替代Redis, 所以SSDB会经常和Redis进行比较. 我们知道, Redis是经常的”主-从”架构, 虽然可以得到负载均衡以及数据跨地域备份的功能, 但无法实现高可用性. 考虑这种情况, Redis的主和从分别在两个IDC机房, 当主所在的机房出现故障时, 整个服务其实就相当于停止了. 因为所有写操作都失败, 而应用一般不会实现自动降级服务.</p>
<p>而SSDB支持”双主”架构(SSDB分布式架构: <a href="https://github.com/ideawu/ssdb/wiki/Replication" target="_blank" rel="external">https://github.com/ideawu/ssdb/wiki/Replication</a>), 两个或者更多的主服务器. 当其中一部分出现故障时, 剩余的主服务器仍然能正常接受写请求, 从而保证服务正常可用, 再将DNS解析修改之后, 就能在机房故障后立即恢复100%可用.</p>
<p>SSDB 被开发和开源出来后, 已经在生产环境经受了3个季度的考验,SSDB最先在”IT牛人博客聚合网站“进行尝试应用, 接着在360游戏部门得到大规模应用, 目前支撑的数据量已经达到数百G. 这些应用最初是使用Redis的, 迁移到SSDB的成本非常低, 涉及的代码改动极小.</p>
<h2 id="u4F7F_u7528"><a href="#u4F7F_u7528" class="headerlink" title="使用"></a>使用</h2><h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><p>SSDB 的建议安装方式是源码编译安装, 建议运行环境是主流 Linux 发行版. 远程 SSH 登录你的服务器, 然后⽤用下⾯面的命令下载、编译、安装和运行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[sphenginx@~]$ sudo wget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip</span><br><span class="line">[sphenginx@~]$ sudo unzip master</span><br><span class="line">[sphenginx@~]$ <span class="built_in">cd</span> ssdb-master</span><br><span class="line">[sphenginx@~]$ sudo make</span><br><span class="line">[sphenginx@~]$ <span class="comment">#optional, install ssdb in /usr/local/ssdb</span></span><br><span class="line">[sphenginx@~]$ sudo make install</span><br><span class="line"><span class="comment"># start master</span></span><br><span class="line">[sphenginx@~]$ sudo ./ssdb-server ssdb.conf</span><br><span class="line"><span class="comment"># or start as daemon</span></span><br><span class="line">[sphenginx@~]$ sudo ./ssdb-server <span class="operator">-d</span> ssdb.conf</span><br><span class="line"><span class="comment"># ssdb command line</span></span><br><span class="line">[sphenginx@~]$ sudo ./ssdb-cli -p <span class="number">8888</span></span><br><span class="line"><span class="comment"># stop ssdb-server</span></span><br><span class="line">[sphenginx@~]$ sudo <span class="built_in">kill</span> `cat ./var/ssdb.pid`</span><br></pre></td></tr></table></figure>
<p>SSDB 默认安装在 <code>/usr/local/ssdb</code> 目录下. ssdb-server 是服务器的程序, ssdb-cli 是命令行客户端.</p>
<h3 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h3><p>SSDB配置文件: <a href="http://www.ideawu.net/blog/archives/733.html" target="_blank" rel="external">http://www.ideawu.net/blog/archives/733.html</a></p>
<p>SSDB  附带的 ssdb.conf 你不用修改便可以使用. 如果你要高度定制, 还是需要修改一些配置的. 下面做介绍. SSDB 的配置文件是一种层级 key-value 的静态配置文件, 通过一个 TAB 缩进来表示层级关系. 以 ‘#’ 号开始的行是注释. 标准的配置文件如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssdb-server config </span></span><br><span class="line"><span class="comment"># MUST indent by TAB!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># relative to path of this file, directory must exists </span></span><br><span class="line">work_dir = ./var </span><br><span class="line">pidfile = ./var/ssdb.pid</span><br><span class="line"></span><br><span class="line">server: </span><br><span class="line">        ip: <span class="number">127.0</span>.<span class="number">0.1</span> </span><br><span class="line">        port: <span class="number">8888</span> </span><br><span class="line">        <span class="comment"># bind to public ip </span></span><br><span class="line">        <span class="comment">#ip: 0.0.0.0 </span></span><br><span class="line">        <span class="comment"># format: allow|deny: all|ip_prefix </span></span><br><span class="line">        <span class="comment"># multiple allows or denys is supported </span></span><br><span class="line">        <span class="comment">#deny: all </span></span><br><span class="line">        <span class="comment">#allow: 127.0.0.1 </span></span><br><span class="line">        <span class="comment">#allow: 192.168</span></span><br><span class="line"></span><br><span class="line">replication: </span><br><span class="line">        slaveof: </span><br><span class="line">                <span class="comment"># to identify a master even if it moved(ip, port changed) </span></span><br><span class="line">                <span class="comment"># if set to empty or not defined, ip:port will be used. </span></span><br><span class="line">                <span class="comment">#id: svc_2 </span></span><br><span class="line">                <span class="comment"># sync|mirror, default is sync </span></span><br><span class="line">                <span class="comment">#type: sync </span></span><br><span class="line">                <span class="comment">#ip: 127.0.0.1 </span></span><br><span class="line">                <span class="comment">#port: 8889</span></span><br><span class="line"></span><br><span class="line">logger: </span><br><span class="line">        level: info </span><br><span class="line">        output: log.txt </span><br><span class="line">        rotate: </span><br><span class="line">                size: <span class="number">1000000000</span></span><br><span class="line"></span><br><span class="line">leveldb: </span><br><span class="line">        <span class="comment"># in MB </span></span><br><span class="line">        cache_size: <span class="number">500</span> </span><br><span class="line">        <span class="comment"># in KB </span></span><br><span class="line">        block_size: <span class="number">32</span> </span><br><span class="line">        <span class="comment"># in MB </span></span><br><span class="line">        write_buffer_size: <span class="number">64</span> </span><br><span class="line">        <span class="comment"># in MB </span></span><br><span class="line">        compaction_speed: <span class="number">1000</span> </span><br><span class="line">        <span class="comment"># yes|no </span></span><br><span class="line">        compression: no</span><br></pre></td></tr></table></figure>
<p><strong>work_dir</strong>: ssdb-server 的工作目录, 启动后, 会在这个目录下生成 data 和 meta 两个目录, 用来保存 LevelDB 的数据库文件. 这个目录是相对于 ssdb.conf 的相对路径, 也可以指定绝对路径.</p>
<p><strong>server</strong>: ip 和 port 指定了服务器要监听的 IP 和端口号. 如果 ip 是 0.0.0.0, 则表示绑定所有的 IP. 基于安全考虑, 可以将 ip 设置为 127.0.0.1, 这样, 只有本机可以访问了. 如果要做更严格的更多的网络安全限制, 就需要依赖操作系统的 iptables.</p>
<p><strong>replication</strong>: 用于指定主从同步复制. slaveof.ip, slaveof.port 表示, 本台 SSDB 服务器将从这个目标机上同步数据(也即这个配置文件对应的服务器是 slave). 你可以参考 ssdb_slave.conf 的配制.</p>
<p><strong>logger</strong>: 配置日志记录. level 是日志的级别, 可以是 trace|debug|info|error. output 是日志文件的名字, SSDB 支持日志轮转, 在日志文件达到一定大小后, 将 log.txt 改名, 然后创建一个新的 log.txt.</p>
<p><strong>leveldb</strong>: 配置 LevelDB 的参数. 你一般想要修改的是 cache_size 参数, 用于指定缓存大小. 适当的缓存可以提高读性能, 但是过大的缓存会影响写性能.</p>
<h3 id="u4F7F_u7528-1"><a href="#u4F7F_u7528-1" class="headerlink" title="使用"></a>使用</h3><p>在使用自带的 ssdb.conf 配置文件时, SSDB 生成的日志文件按体积进行分割, 仅此而已. 所以, 你需要编写自己的 crontab 进行日志压缩和定期清理.<br>如果出现服务器掉电, kernel panic 等系统故障, 在系统重新启动之后, 你需要⼿手动删除 ssdb的 PID 文件 ssdb.pid, 然后才能启动 ssdb-server.另外, 你可以参考下面的做法, 在系统启动和关机时, 启动和关闭 ssdb-server: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /bin/sh </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># chkconfig:345 98 98 </span></span><br><span class="line"><span class="comment"># description: SSDB is a fast NoSQL database for storing big list of billions of elements </span></span><br><span class="line"><span class="comment"># processname:ssdb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span> </span><br><span class="line">  <span class="string">'start'</span>) </span><br><span class="line">    /usr/<span class="built_in">local</span>/ssdb/ssdb-server <span class="operator">-d</span> /usr/<span class="built_in">local</span>/ssdb/ssdb.conf </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ssdb started."</span> </span><br><span class="line">    ;; </span><br><span class="line">  <span class="string">'stop'</span>) </span><br><span class="line">    <span class="built_in">kill</span> `cat /usr/<span class="built_in">local</span>/ssdb/var/ssdb.pid` </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ssdb stopped."</span> </span><br><span class="line">    ;; </span><br><span class="line">  <span class="string">'restart'</span>) </span><br><span class="line">    <span class="built_in">kill</span> `cat /usr/<span class="built_in">local</span>/ssdb/var/ssdb.pid` </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ssdb stopped."</span> </span><br><span class="line">    sleep <span class="number">0.5</span> </span><br><span class="line">    /usr/<span class="built_in">local</span>/ssdb/ssdb-server <span class="operator">-d</span> /usr/<span class="built_in">local</span>/ssdb/ </span><br><span class="line">ssdb.conf </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ssdb started."</span> </span><br><span class="line">    ;; </span><br><span class="line">  *) </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span> </span><br><span class="line">    <span class="built_in">exit</span> <span class="number">1</span> </span><br><span class="line">  ;; </span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>把文件保存为 /etc/init.d/ssdb.sh(需要 root 权限), 然后执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sphenginx@~]$ chmod ugo+x /etc/init.d/ssdb.sh</span><br></pre></td></tr></table></figure></p>
<p>把 ssdb加入chkconfig，并设置开机启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[sphenginx@~]$ sudo chkconfig --add ssdb.sh </span><br><span class="line">[sphenginx@~]$ chkconfig ssdb.sh on</span><br></pre></td></tr></table></figure></p>
<p>启动、停止的命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[sphenginx@~]$ sudo service ssdb.sh stop </span><br><span class="line">ssdb stopped. </span><br><span class="line">[sphenginx@~]$ sudo service ssdb.sh start </span><br><span class="line">ssdb <span class="number">1.6</span>.<span class="number">7</span> </span><br><span class="line">Copyright (c) <span class="number">2012</span>-<span class="number">2013</span> ideawu.com</span><br><span class="line">ssdb started.</span><br></pre></td></tr></table></figure></p>
<h3 id="Win_platform"><a href="#Win_platform" class="headerlink" title="Win platform"></a>Win platform</h3><p>项目代码中已经加入PHP 的api，API地址：<a href="http://ssdb.io/docs/zh_cn/php/index.html" target="_blank" rel="external">http://ssdb.io/docs/zh_cn/php/index.html</a><br>也可以安装一下SSDB的管理软件：<a href="https://github.com/ssdb/phpssdbadmin" target="_blank" rel="external">PSA</a><br>另外, SSDB 提供了预编译的 Windows 下的可执行安装包, Windows 用户可以下载后直接运行 ssdb-server.exe. Windows 下的 SSDB 依赖 cygwin, 所以附带了几个 dll 文件. 使用方式:</p>
<ol>
<li>从 <a href="https://github.com/ideawu/ssdb-bin" target="_blank" rel="external">https://github.com/ideawu/ssdb-bin</a> 下载可执行文件 ssdb-server.exe 和相关 dll.  </li>
<li>从 <a href="https://github.com/ideawu/ssdb" target="_blank" rel="external">https://github.com/ideawu/ssdb</a> 下载 ssdb.conf 配置文件.  </li>
<li>解压, 然后从开始菜单中运行 cmd.exe.  </li>
<li>在 cmd.exe 启动后, cd ssdb-server.exe 所在的目录.  </li>
<li>执行 ssdb-server.exe ssdb.conf  </li>
</ol>
<h2 id="More_info"><a href="#More_info" class="headerlink" title="More info"></a>More info</h2><p>SSDB开源数据库项目地址: <a href="https://github.com/ideawu/ssdb" target="_blank" rel="external">https://github.com/ideawu/ssdb</a><br>作者博客地址： <a href="http://www.ideawu.net/blog/ssdb" target="_blank" rel="external">http://www.ideawu.net/blog/ssdb</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>SSDB是一个开源的<a href="http://ssdb.io/zh_cn/" target="_b]]>
    </summary>
    
      <category term="NoSql" scheme="http://sphenginx.github.io/tags/NoSql/"/>
    
      <category term="SSDB" scheme="http://sphenginx.github.io/tags/SSDB/"/>
    
      <category term="日薪越亿" scheme="http://sphenginx.github.io/categories/%E6%97%A5%E8%96%AA%E8%B6%8A%E4%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[闲言碎语]]></title>
    <link href="http://sphenginx.github.io/2015/03/09/word-debris/"/>
    <id>http://sphenginx.github.io/2015/03/09/word-debris/</id>
    <published>2015-03-09T08:29:00.000Z</published>
    <updated>2015-12-15T02:58:02.681Z</updated>
    <content type="html"><![CDATA[<h2 id="u788E_u8BED"><a href="#u788E_u8BED" class="headerlink" title="碎语"></a>碎语</h2><ul>
<li><p>春有百花秋有月，夏有凉风冬有雪。若无闲事挂心头，便是人间好时节。</p>
</li>
<li><p>长大也许就是：学会了把亲情放在第一位、把友情放在第二位、把爱情放在够不到的位置；学会了不和父母顶嘴，学会为了维护友谊让步；学会了不想着依赖别人，做好自己，让别人依赖你；学会了认清自己，不是很好，也不算坏，不把头扬的很高，也不拿眼睛盯别人的脚；学会把喜欢的人放在心底，默默的不张扬。</p>
</li>
<li><p>爱自己最好的方式，就是成就自己!</p>
</li>
<li><p>这世界上，败给谁都可以释怀，败给自己最不能原谅!</p>
</li>
<li><p>启蒙就是有勇气去运用你自己的理性。</p>
</li>
<li><p>一件事你犹豫去不去做，那就是该立即动身做的。一个东西你犹豫买不买，那就是该买的。喜欢是非常难得的，尽管去争取你喜欢的，而不是费心找廉价点的替代品。对事物，对人都该如此。</p>
</li>
<li><p>I’d rather be a failure at something I love than a success at something I hate.</p>
</li>
<li><p>世间凡人皆慵于懒，天下才子皆毁于疏！ 困难，只是用来被击败的存在而已，只是因为现在的你不够强大。</p>
</li>
<li><p>如果懒惰暂时还未产生恶习或祸患，那通常也一定会产生沮丧。懒惰就像生锈一样，比操劳更能损害身体！</p>
</li>
<li><p>人应该是自己的主宰，主宰自己的身体和思想，而不应该让身体或者贪婪控制自己！！！</p>
</li>
<li><p>回归本质，学习编程语言还是为了低成本高效的解决实际的业务问题。</p>
</li>
<li><p>如果只看合乎自己口味的书，那你永远只能知道你已经知道的事情。</p>
</li>
<li><p>读万卷书不如行万里路，行万里路不如阅人无数！</p>
</li>
<li><p>怕什么真理无穷，进一寸有一寸的欢喜。</p>
</li>
<li><p>生活中真正的勇士向来是默默无闻的 喧哗不止的永远是自视清高的一群 。</p>
</li>
<li><p>黑暗既然一定要存在，就让阳光尽量多的普照大地吧。</p>
</li>
<li><p>声音比文字更能表达一个人的想法，和人花点时间坐下来交谈是不能代替的。</p>
</li>
<li><p>工作中积极发挥主观能动性是非常重要的，主动的去交流工作任务，完工后积极的去和同事进行反馈；这样可以减少一些交流或者说是等待成本，可以非常高效的完成任务！！！</p>
</li>
<li><p>迷茫的时候，才是学习的时候，才是认知世界的时候，才是真正走出自己的认知面见到世界的时候。</p>
</li>
<li><p>成熟的人需要面具。戴上，坚强面对社会；摘下，温柔面对家人。</p>
</li>
<li><p>当你知道了许多真实，虚假的东西，就没有那么多酸情了，你越来越沉默，越来越不想说。</p>
</li>
<li><p>最快的脚步不是跨越，而是持续；最慢的步伐不是小步，而是徘徊。</p>
</li>
<li><p>想要不再受人欺负，努力让自己变得更强大吧！ 想要保护身边的人，那就让自己变得更加强大吧！</p>
</li>
<li><p>你之所以一边埋怨自己，一边又安于现状，是因为你还没走到无路可走的时候。真正的选择，是别无选择！</p>
</li>
<li><p>以前很喜欢抱怨，后来每次抱怨前仔细想想，常发现其实最应该抱怨的对象是自己，是自己没能力改变这个状况，让自己脱困。… 这么想的好处是：抱怨频率少了，自己也努力要变得更强。</p>
</li>
<li><p>情怀就是，生活不只是眼前的苟且，还有诗（吃）和远方。</p>
</li>
<li><p>忙起来你觉得什么都不缺，空下来才知道你什么都没有。</p>
</li>
<li><p>穷在闹市无人问，富在深山有远亲。</p>
</li>
<li><p>岂能尽如人意，但求问心无愧！</p>
</li>
<li><p>你若笃定，社会便不浮躁！！！</p>
</li>
<li><p>想要不可替代,就必须与众不同！！！</p>
</li>
<li><p>真正的勇气是：无所畏惧地接受上天给你的一切！</p>
</li>
<li><p>进步，从鄙视自己开始。跟贱人吵架，不仅仅让人分不清谁是贱人，更容易让你停留在跟贱人一个层次；为烂事操心，不仅仅是对我们精力的一种浪费，更悲惨在这会麻痹神经，让我们误人为这就是生活常态并最终成为常态。</p>
</li>
<li><p>心情再差，也不要写在脸上，因为没有人喜欢看；日子再穷，也不要挂在嘴边，因为没有人无故给你钱；工作再累，也不要抱怨，因为没有人无条件替你干；生活再苦，也不要失去信念，因为美好将在明天； 品性再坏，也要孝顺父母，因为你也有老的那天。</p>
</li>
<li><p>人往往把自己看得过重才会患得患失，觉得别人必须理解自己。 其实，人要看轻自己，少一些自我，多一些换位，才能心生快乐。 所谓心有多大，快乐就有多少；包容越多，得到越多。</p>
</li>
<li><p>做人的最高境界不是一味低调，也不是一味张扬，而是始终如一的不卑不亢！</p>
</li>
<li><p>你是什么样的人，就会遇见什么样的人。让自己变得闪闪发光，努力站在人生的高处，自然会遇见更好的人和风景。</p>
</li>
<li><p>学会用一种幽默面对生活，不要把那些生命的历练当做生命的坎，记住一句忠告，生活因为感谢才倍加温暖，生活中的那些苦水，越吐才越苦，睁大眼睛去发现生活的光明与希望，内心多一些冷静与宽阔，不在乎苦难，苦难又奈何。</p>
</li>
<li><p>找伴侣就要找大度，大气的，一点亏都不肯吃的人，说一万遍“爱你”也别信。爱你的人会心甘情愿输给你。学会了迁就，懂得了忍让，才能证明深爱着你。他给你的或许不多，但有了宽容，就等于给了你全部!</p>
</li>
<li><p>我对全栈开发工程师的定义是，他们能够自己构建和部署一个完整的、可以工作的应用程序，而不需要其他任何人的帮助。那意味着他们能够编写前端、后端代码，能够配置服务器，当然还能够设计数据库表。</p>
</li>
</ul>
<h2 id="u8BED_u5F55"><a href="#u8BED_u5F55" class="headerlink" title="语录"></a>语录</h2><ul>
<li><p>“没手，没脚，没烦恼” ——尼克·胡哲</p>
</li>
<li><p>大胆假设，小心求证。 ——胡适</p>
</li>
<li><p>读书的目的是为了认识事物原理。为挑剔辩驳去读书是无聊。但也不可过于迷信书本。求知的目的不是为了吹嘘炫耀，而是为了寻找真理，启迪智慧。 ——培根</p>
</li>
<li><p>成长的很大一部分，是接受。接受分道扬镳，接受世事无常，接受孤独挫折，接受突如其来的无力感，接受自己的缺点。然后发自内心地去改变，找到一个平衡点。跟世界相处，首先是和自己相处。天黑开盏灯，落雨带把伞，难过先难过，但也不作死。—— 卢思浩</p>
</li>
<li><p>年轻人不要试图追求安全感，特别是年轻的时候，周遭环境从来都不会有绝对的安全感，如果你觉得安全，很可能暗藏危机。真正的安全感，来自你对自己的信心，是你每个阶段性目标的实现，而真正的归属感，在于你的内心深处，对自己命运的把控，因为你最大的对手永远都是自己。—— 李嘉诚</p>
</li>
<li><p>胜利迟早都属于有信心的人。换句话说，你若仅仅接受最好的，你最后得到的常常也就是最好的，只要你有自信。一个人胜任一件事，85%取决于态度，15%取决于智力，所以一个人的成败取决于他是否自信，假如这个人是自卑的，那自卑就会扼杀他的聪明才智，消磨他的意志。—— 杜根定律</p>
</li>
<li><p>你不应该给软件装后门，因为你不能保证这个后门只有好人能够使用。  —— 苹果CEO 库克</p>
</li>
<li><p>思考和知识应该是经常同步而行。不然，知识就是个死物，而且会毫无成果地消亡。—— 弗兰西斯.培根</p>
</li>
<li><p>阅读使人充实，会谈使人敏捷，写作使人精确。读史使人明智,读诗使人灵秀,演算使人精密,哲理使人深刻,伦理学使人庄重,逻辑修辞使人善辩. —— 培根</p>
</li>
<li><p>士人读书，第一要有志，第二要有识，第三要有恒。有志，则断不甘为下流。有识，则知学问无尽，不敢以一得自足；如河伯之观海，如井蛙之窥天，皆无见识也。有恒，则断无不成之事。此三者缺一不可。—— 曾国藩</p>
</li>
<li><p>好好珍惜身边的人，因为你不知道意外和明天哪一个会先到来。 —— 天津塘沽大爆炸。</p>
</li>
<li><p>人类面临有三大问题，顺序错不得。先要解决人和物之间的问题，接下来要解决人和人之间的问题，最后一定要解决人和自己内心之间的问题。 —— 梁漱溟</p>
</li>
<li><p>世界不是想象的那样，恐惧是世间最强大的武器！你是因为恐惧，所以你才愤怒；因为恐惧你才选择了逃避，让自己成为一个连是非都不分的人，你不知道，你永远不知道，要走在正确的路上需要多么大的勇气。别再因为害怕，找理由一次次为自己开脱。 —— 《痞子英雄》</p>
</li>
<li><p>我不敢休息，因为我没有存款；我不敢说累，因为我没有成就；我不敢偷懒，因为我还要生活；我能放弃选择，但是我不能选择放弃。所以坚强，拼搏是我唯一的选择！——  致此时的你。</p>
</li>
<li><p><a href="https://zh.wikiquote.org/zh-cn/%E5%BC%97%E8%98%AD%E8%A5%BF%E6%96%AF%C2%B7%E5%9F%B9%E6%A0%B9" target="_blank" rel="external">圣佛朗西斯·培根</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u788E_u8BED"><a href="#u788E_u8BED" class="headerlink" title="碎语"></a>碎语</h2><ul>
<li><p>春有百花秋有月，夏有凉风冬有雪。若无闲事挂心头，便是人间好时节。</p>
</li>
]]>
    </summary>
    
      <category term="碎语" scheme="http://sphenginx.github.io/tags/%E7%A2%8E%E8%AF%AD/"/>
    
      <category term="闲言碎语" scheme="http://sphenginx.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
</feed>
